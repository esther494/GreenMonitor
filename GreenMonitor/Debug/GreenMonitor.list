
GreenMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6c0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  0800b860  0800b860  0000c860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd0c  0800bd0c  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd0c  0800bd0c  0000cd0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd14  0800bd14  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd14  0800bd14  0000cd14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd18  0800bd18  0000cd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800bd1c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f14  200001d8  0800bef4  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050ec  0800bef4  0000e0ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a220  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b1c  00000000  00000000  00027428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  0002af48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001201  00000000  00000000  0002c650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1d4  00000000  00000000  0002d851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c2d9  00000000  00000000  00048a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6b80  00000000  00000000  00064cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b87e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074c4  00000000  00000000  0010b8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00112d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b848 	.word	0x0800b848

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800b848 	.word	0x0800b848

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <AM2320_ReadTemperatureAndHumidity>:
  *humidity = (float) raw_humidity / 10;

  return HAL_OK;
}

HAL_StatusTypeDef AM2320_ReadTemperatureAndHumidity(I2C_HandleTypeDef *hi2c, float *temperature, float *humidity) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  uint8_t txBuffer[3] = {0x03, 0x00, 0x04};  // Command to read both temperature and humidity
 8000eb4:	4a31      	ldr	r2, [pc, #196]	@ (8000f7c <AM2320_ReadTemperatureAndHumidity+0xd4>)
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	6812      	ldr	r2, [r2, #0]
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	8019      	strh	r1, [r3, #0]
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	0c12      	lsrs	r2, r2, #16
 8000ec4:	701a      	strb	r2, [r3, #0]
  uint8_t dataBuffer[8];  // Buffer to store received data

  HAL_I2C_Master_Transmit(hi2c, SENSOR_ADDRESS << 1, 0x00, 0, HAL_MAX_DELAY);
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	2200      	movs	r2, #0
 8000ed0:	21b8      	movs	r1, #184	@ 0xb8
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f002 fee4 	bl	8003ca0 <HAL_I2C_Master_Transmit>
  vTaskDelay(pdMS_TO_TICKS(1));
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f006 f99f 	bl	800721c <vTaskDelay>

  // Send the command to the sensor
  if (HAL_I2C_Master_Transmit(hi2c, SENSOR_ADDRESS << 1, txBuffer, sizeof(txBuffer), HAL_MAX_DELAY) != HAL_OK) {
 8000ede:	f107 0218 	add.w	r2, r7, #24
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2303      	movs	r3, #3
 8000eea:	21b8      	movs	r1, #184	@ 0xb8
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f002 fed7 	bl	8003ca0 <HAL_I2C_Master_Transmit>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <AM2320_ReadTemperatureAndHumidity+0x54>
    return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e03b      	b.n	8000f74 <AM2320_ReadTemperatureAndHumidity+0xcc>
  }

  // Wait for the sensor to process the command and complete the measurement
  vTaskDelay(pdMS_TO_TICKS(1000));  // 2 seconds to allow the sensor to complete the measurement
 8000efc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f00:	f006 f98c 	bl	800721c <vTaskDelay>

  // Read the data from the sensor
  if (HAL_I2C_Master_Receive(hi2c, SENSOR_ADDRESS << 1, dataBuffer, sizeof(dataBuffer), HAL_MAX_DELAY) != HAL_OK) {
 8000f04:	f107 0210 	add.w	r2, r7, #16
 8000f08:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2308      	movs	r3, #8
 8000f10:	21b8      	movs	r1, #184	@ 0xb8
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f002 ffc2 	bl	8003e9c <HAL_I2C_Master_Receive>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <AM2320_ReadTemperatureAndHumidity+0x7a>
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e028      	b.n	8000f74 <AM2320_ReadTemperatureAndHumidity+0xcc>
  }

  // Process received data
  // Data format: 0x03 (Function Code) + 0x04 (Data Length) + Humidity (2 bytes) + Temperature (2 bytes) + CRC (2 bytes)

  uint16_t raw_humidity = (dataBuffer[2] << 8) | dataBuffer[3];
 8000f22:	7cbb      	ldrb	r3, [r7, #18]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	7cfb      	ldrb	r3, [r7, #19]
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	83fb      	strh	r3, [r7, #30]
  uint16_t raw_temperature = (dataBuffer[4] << 8) | dataBuffer[5];
 8000f32:	7d3b      	ldrb	r3, [r7, #20]
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	7d7b      	ldrb	r3, [r7, #21]
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	83bb      	strh	r3, [r7, #28]

  *humidity = (float) raw_humidity / 10.0;
 8000f42:	8bfb      	ldrh	r3, [r7, #30]
 8000f44:	ee07 3a90 	vmov	s15, r3
 8000f48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f4c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000f50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	edc3 7a00 	vstr	s15, [r3]
  *temperature = (float) raw_temperature / 10.0;
 8000f5a:	8bbb      	ldrh	r3, [r7, #28]
 8000f5c:	ee07 3a90 	vmov	s15, r3
 8000f60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f64:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000f68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	edc3 7a00 	vstr	s15, [r3]

  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3720      	adds	r7, #32
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	0800b868 	.word	0x0800b868

08000f80 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4a07      	ldr	r2, [pc, #28]	@ (8000fac <vApplicationGetIdleTaskMemory+0x2c>)
 8000f90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	4a06      	ldr	r2, [pc, #24]	@ (8000fb0 <vApplicationGetIdleTaskMemory+0x30>)
 8000f96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f9e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	200001f4 	.word	0x200001f4
 8000fb0:	20000294 	.word	0x20000294

08000fb4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c3;
#define SLAVE_ADDRESS_LCD 0x4E // default address

// rs is 0 for commands
void lcd_send_cmd (char cmd)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
  uint8_t data_t[4];
  data_u = (cmd&0xf0);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f023 030f 	bic.w	r3, r3, #15
 8000fc4:	73fb      	strb	r3, [r7, #15]
  data_l = ((cmd<<4)&0xf0);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	011b      	lsls	r3, r3, #4
 8000fca:	73bb      	strb	r3, [r7, #14]
  data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	f043 030c 	orr.w	r3, r3, #12
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	723b      	strb	r3, [r7, #8]
  data_t[1] = data_u|0x08;  //en=0, rs=0
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	727b      	strb	r3, [r7, #9]
  data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000fe0:	7bbb      	ldrb	r3, [r7, #14]
 8000fe2:	f043 030c 	orr.w	r3, r3, #12
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	72bb      	strb	r3, [r7, #10]
  data_t[3] = data_l|0x08;  //en=0, rs=0
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ff4:	f107 0208 	add.w	r2, r7, #8
 8000ff8:	2364      	movs	r3, #100	@ 0x64
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	214e      	movs	r1, #78	@ 0x4e
 8001000:	4803      	ldr	r0, [pc, #12]	@ (8001010 <lcd_send_cmd+0x5c>)
 8001002:	f002 fe4d 	bl	8003ca0 <HAL_I2C_Master_Transmit>
}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000790 	.word	0x20000790

08001014 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af02      	add	r7, sp, #8
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
  uint8_t data_t[4];
  data_u = (data&0xf0);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f023 030f 	bic.w	r3, r3, #15
 8001024:	73fb      	strb	r3, [r7, #15]
  data_l = ((data<<4)&0xf0);
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	011b      	lsls	r3, r3, #4
 800102a:	73bb      	strb	r3, [r7, #14]
  data_t[0] = data_u|0x0D;  //en=1, rs=1
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	f043 030d 	orr.w	r3, r3, #13
 8001032:	b2db      	uxtb	r3, r3
 8001034:	723b      	strb	r3, [r7, #8]
  data_t[1] = data_u|0x09;  //en=0, rs=1
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	f043 0309 	orr.w	r3, r3, #9
 800103c:	b2db      	uxtb	r3, r3
 800103e:	727b      	strb	r3, [r7, #9]
  data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001040:	7bbb      	ldrb	r3, [r7, #14]
 8001042:	f043 030d 	orr.w	r3, r3, #13
 8001046:	b2db      	uxtb	r3, r3
 8001048:	72bb      	strb	r3, [r7, #10]
  data_t[3] = data_l|0x09;  //en=0, rs=1
 800104a:	7bbb      	ldrb	r3, [r7, #14]
 800104c:	f043 0309 	orr.w	r3, r3, #9
 8001050:	b2db      	uxtb	r3, r3
 8001052:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001054:	f107 0208 	add.w	r2, r7, #8
 8001058:	2364      	movs	r3, #100	@ 0x64
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2304      	movs	r3, #4
 800105e:	214e      	movs	r1, #78	@ 0x4e
 8001060:	4803      	ldr	r0, [pc, #12]	@ (8001070 <lcd_send_data+0x5c>)
 8001062:	f002 fe1d 	bl	8003ca0 <HAL_I2C_Master_Transmit>
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000790 	.word	0x20000790

08001074 <lcd_init>:

void lcd_init (void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  // 4 bit initialization
  HAL_Delay(50);  // wait for >40ms
 8001078:	2032      	movs	r0, #50	@ 0x32
 800107a:	f001 f911 	bl	80022a0 <HAL_Delay>
  lcd_send_cmd (0x30);
 800107e:	2030      	movs	r0, #48	@ 0x30
 8001080:	f7ff ff98 	bl	8000fb4 <lcd_send_cmd>
  HAL_Delay(5);  // wait for >4.1ms
 8001084:	2005      	movs	r0, #5
 8001086:	f001 f90b 	bl	80022a0 <HAL_Delay>
  lcd_send_cmd (0x30);
 800108a:	2030      	movs	r0, #48	@ 0x30
 800108c:	f7ff ff92 	bl	8000fb4 <lcd_send_cmd>
  HAL_Delay(1);  // wait for >100us
 8001090:	2001      	movs	r0, #1
 8001092:	f001 f905 	bl	80022a0 <HAL_Delay>
  lcd_send_cmd (0x30);
 8001096:	2030      	movs	r0, #48	@ 0x30
 8001098:	f7ff ff8c 	bl	8000fb4 <lcd_send_cmd>
  HAL_Delay(10);
 800109c:	200a      	movs	r0, #10
 800109e:	f001 f8ff 	bl	80022a0 <HAL_Delay>
  lcd_send_cmd (0x20);  // 4bit mode
 80010a2:	2020      	movs	r0, #32
 80010a4:	f7ff ff86 	bl	8000fb4 <lcd_send_cmd>
  HAL_Delay(10);
 80010a8:	200a      	movs	r0, #10
 80010aa:	f001 f8f9 	bl	80022a0 <HAL_Delay>

  // dislay initialisation
  lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80010ae:	2028      	movs	r0, #40	@ 0x28
 80010b0:	f7ff ff80 	bl	8000fb4 <lcd_send_cmd>
  HAL_Delay(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f001 f8f3 	bl	80022a0 <HAL_Delay>
  lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80010ba:	2008      	movs	r0, #8
 80010bc:	f7ff ff7a 	bl	8000fb4 <lcd_send_cmd>
  HAL_Delay(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f001 f8ed 	bl	80022a0 <HAL_Delay>
  lcd_send_cmd (0x01);  // clear display
 80010c6:	2001      	movs	r0, #1
 80010c8:	f7ff ff74 	bl	8000fb4 <lcd_send_cmd>
  HAL_Delay(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f001 f8e7 	bl	80022a0 <HAL_Delay>
  HAL_Delay(1);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f001 f8e4 	bl	80022a0 <HAL_Delay>
  lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80010d8:	2006      	movs	r0, #6
 80010da:	f7ff ff6b 	bl	8000fb4 <lcd_send_cmd>
  HAL_Delay(1);
 80010de:	2001      	movs	r0, #1
 80010e0:	f001 f8de 	bl	80022a0 <HAL_Delay>
  lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80010e4:	200c      	movs	r0, #12
 80010e6:	f7ff ff65 	bl	8000fb4 <lcd_send_cmd>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}

080010ee <lcd_clear_display>:
void lcd_send_string (char *str)
{
  while (*str) lcd_send_data (*str++);
}

void lcd_clear_display (void) {
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
  lcd_send_cmd (0x80);
 80010f4:	2080      	movs	r0, #128	@ 0x80
 80010f6:	f7ff ff5d 	bl	8000fb4 <lcd_send_cmd>
  for (int i = 0; i < 70; i++) {
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	e005      	b.n	800110c <lcd_clear_display+0x1e>
    lcd_send_data(' ');
 8001100:	2020      	movs	r0, #32
 8001102:	f7ff ff87 	bl	8001014 <lcd_send_data>
  for (int i = 0; i < 70; i++) {
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3301      	adds	r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b45      	cmp	r3, #69	@ 0x45
 8001110:	ddf6      	ble.n	8001100 <lcd_clear_display+0x12>
  }
}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800111c:	b5b0      	push	{r4, r5, r7, lr}
 800111e:	b09c      	sub	sp, #112	@ 0x70
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001122:	f001 f87b 	bl	800221c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001126:	f000 f86d 	bl	8001204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112a:	f000 fa35 	bl	8001598 <MX_GPIO_Init>
  MX_DMA_Init();
 800112e:	f000 f9e5 	bl	80014fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001132:	f000 f9b9 	bl	80014a8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001136:	f000 f8d1 	bl	80012dc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800113a:	f000 f98b 	bl	8001454 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 800113e:	f000 f95b 	bl	80013f8 <MX_I2C3_Init>
  MX_I2C1_Init();
 8001142:	f000 f92b 	bl	800139c <MX_I2C1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8001146:	4b27      	ldr	r3, [pc, #156]	@ (80011e4 <main+0xc8>)
 8001148:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800114c:	461d      	mov	r5, r3
 800114e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001152:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001156:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800115a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f005 fd98 	bl	8006c96 <osThreadCreate>
 8001166:	4603      	mov	r3, r0
 8001168:	4a1f      	ldr	r2, [pc, #124]	@ (80011e8 <main+0xcc>)
 800116a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ToESP */
  osThreadDef(ToESP, StartToESP, osPriorityNormal, 0, 256);
 800116c:	4b1f      	ldr	r3, [pc, #124]	@ (80011ec <main+0xd0>)
 800116e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001172:	461d      	mov	r5, r3
 8001174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001178:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800117c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ToESPHandle = osThreadCreate(osThread(ToESP), NULL);
 8001180:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f005 fd85 	bl	8006c96 <osThreadCreate>
 800118c:	4603      	mov	r3, r0
 800118e:	4a18      	ldr	r2, [pc, #96]	@ (80011f0 <main+0xd4>)
 8001190:	6013      	str	r3, [r2, #0]

  /* definition and creation of FromESP */
  osThreadDef(FromESP, StartFromESP, osPriorityNormal, 0, 512);
 8001192:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <main+0xd8>)
 8001194:	f107 041c 	add.w	r4, r7, #28
 8001198:	461d      	mov	r5, r3
 800119a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FromESPHandle = osThreadCreate(osThread(FromESP), NULL);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f005 fd72 	bl	8006c96 <osThreadCreate>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4a10      	ldr	r2, [pc, #64]	@ (80011f8 <main+0xdc>)
 80011b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of DispScreen */
  osThreadDef(DispScreen, StartDispScreen, osPriorityNormal, 0, 256);
 80011b8:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <main+0xe0>)
 80011ba:	463c      	mov	r4, r7
 80011bc:	461d      	mov	r5, r3
 80011be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DispScreenHandle = osThreadCreate(osThread(DispScreen), NULL);
 80011ca:	463b      	mov	r3, r7
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f005 fd61 	bl	8006c96 <osThreadCreate>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <main+0xe4>)
 80011d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80011da:	f005 fd55 	bl	8006c88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011de:	bf00      	nop
 80011e0:	e7fd      	b.n	80011de <main+0xc2>
 80011e2:	bf00      	nop
 80011e4:	0800b878 	.word	0x0800b878
 80011e8:	200009f4 	.word	0x200009f4
 80011ec:	0800b89c 	.word	0x0800b89c
 80011f0:	200009f8 	.word	0x200009f8
 80011f4:	0800b8c0 	.word	0x0800b8c0
 80011f8:	200009fc 	.word	0x200009fc
 80011fc:	0800b8e8 	.word	0x0800b8e8
 8001200:	20000a00 	.word	0x20000a00

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b094      	sub	sp, #80	@ 0x50
 8001208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	f107 0320 	add.w	r3, r7, #32
 800120e:	2230      	movs	r2, #48	@ 0x30
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f007 fd6b 	bl	8008cee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	4b29      	ldr	r3, [pc, #164]	@ (80012d4 <SystemClock_Config+0xd0>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001230:	4a28      	ldr	r2, [pc, #160]	@ (80012d4 <SystemClock_Config+0xd0>)
 8001232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001236:	6413      	str	r3, [r2, #64]	@ 0x40
 8001238:	4b26      	ldr	r3, [pc, #152]	@ (80012d4 <SystemClock_Config+0xd0>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	4b23      	ldr	r3, [pc, #140]	@ (80012d8 <SystemClock_Config+0xd4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001250:	4a21      	ldr	r2, [pc, #132]	@ (80012d8 <SystemClock_Config+0xd4>)
 8001252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <SystemClock_Config+0xd4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001264:	2302      	movs	r3, #2
 8001266:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001268:	2301      	movs	r3, #1
 800126a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126c:	2310      	movs	r3, #16
 800126e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001270:	2302      	movs	r3, #2
 8001272:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001274:	2300      	movs	r3, #0
 8001276:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001278:	2310      	movs	r3, #16
 800127a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800127c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001280:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001282:	2304      	movs	r3, #4
 8001284:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001286:	2307      	movs	r3, #7
 8001288:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128a:	f107 0320 	add.w	r3, r7, #32
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fbbc 	bl	8004a0c <HAL_RCC_OscConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800129a:	f000 fb2b 	bl	80018f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129e:	230f      	movs	r3, #15
 80012a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a2:	2302      	movs	r3, #2
 80012a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	2102      	movs	r1, #2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 fe1e 	bl	8004efc <HAL_RCC_ClockConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012c6:	f000 fb15 	bl	80018f4 <Error_Handler>
  }
}
 80012ca:	bf00      	nop
 80012cc:	3750      	adds	r7, #80	@ 0x50
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40007000 	.word	0x40007000

080012dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012e2:	463b      	mov	r3, r7
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012ee:	4b28      	ldr	r3, [pc, #160]	@ (8001390 <MX_ADC1_Init+0xb4>)
 80012f0:	4a28      	ldr	r2, [pc, #160]	@ (8001394 <MX_ADC1_Init+0xb8>)
 80012f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012f4:	4b26      	ldr	r3, [pc, #152]	@ (8001390 <MX_ADC1_Init+0xb4>)
 80012f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012fc:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <MX_ADC1_Init+0xb4>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001302:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <MX_ADC1_Init+0xb4>)
 8001304:	2201      	movs	r2, #1
 8001306:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001308:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <MX_ADC1_Init+0xb4>)
 800130a:	2201      	movs	r2, #1
 800130c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800130e:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <MX_ADC1_Init+0xb4>)
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001316:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <MX_ADC1_Init+0xb4>)
 8001318:	2200      	movs	r2, #0
 800131a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800131c:	4b1c      	ldr	r3, [pc, #112]	@ (8001390 <MX_ADC1_Init+0xb4>)
 800131e:	4a1e      	ldr	r2, [pc, #120]	@ (8001398 <MX_ADC1_Init+0xbc>)
 8001320:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001322:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <MX_ADC1_Init+0xb4>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001328:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <MX_ADC1_Init+0xb4>)
 800132a:	2202      	movs	r2, #2
 800132c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800132e:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <MX_ADC1_Init+0xb4>)
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001336:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <MX_ADC1_Init+0xb4>)
 8001338:	2201      	movs	r2, #1
 800133a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800133c:	4814      	ldr	r0, [pc, #80]	@ (8001390 <MX_ADC1_Init+0xb4>)
 800133e:	f000 ffd3 	bl	80022e8 <HAL_ADC_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001348:	f000 fad4 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800134c:	230e      	movs	r3, #14
 800134e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001350:	2301      	movs	r3, #1
 8001352:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001354:	2304      	movs	r3, #4
 8001356:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	4619      	mov	r1, r3
 800135c:	480c      	ldr	r0, [pc, #48]	@ (8001390 <MX_ADC1_Init+0xb4>)
 800135e:	f001 fa2f 	bl	80027c0 <HAL_ADC_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001368:	f000 fac4 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800136c:	230d      	movs	r3, #13
 800136e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001370:	2302      	movs	r3, #2
 8001372:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001374:	463b      	mov	r3, r7
 8001376:	4619      	mov	r1, r3
 8001378:	4805      	ldr	r0, [pc, #20]	@ (8001390 <MX_ADC1_Init+0xb4>)
 800137a:	f001 fa21 	bl	80027c0 <HAL_ADC_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001384:	f000 fab6 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000694 	.word	0x20000694
 8001394:	40012000 	.word	0x40012000
 8001398:	0f000001 	.word	0x0f000001

0800139c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013a2:	4a13      	ldr	r2, [pc, #76]	@ (80013f0 <MX_I2C1_Init+0x54>)
 80013a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013a8:	4a12      	ldr	r2, [pc, #72]	@ (80013f4 <MX_I2C1_Init+0x58>)
 80013aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013c6:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013cc:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d2:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013da:	f002 fb1d 	bl	8003a18 <HAL_I2C_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013e4:	f000 fa86 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000073c 	.word	0x2000073c
 80013f0:	40005400 	.word	0x40005400
 80013f4:	000186a0 	.word	0x000186a0

080013f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <MX_I2C3_Init+0x50>)
 80013fe:	4a13      	ldr	r2, [pc, #76]	@ (800144c <MX_I2C3_Init+0x54>)
 8001400:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001402:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <MX_I2C3_Init+0x50>)
 8001404:	4a12      	ldr	r2, [pc, #72]	@ (8001450 <MX_I2C3_Init+0x58>)
 8001406:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001408:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <MX_I2C3_Init+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <MX_I2C3_Init+0x50>)
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001414:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <MX_I2C3_Init+0x50>)
 8001416:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800141a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800141c:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <MX_I2C3_Init+0x50>)
 800141e:	2200      	movs	r2, #0
 8001420:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001422:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <MX_I2C3_Init+0x50>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001428:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <MX_I2C3_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <MX_I2C3_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	@ (8001448 <MX_I2C3_Init+0x50>)
 8001436:	f002 faef 	bl	8003a18 <HAL_I2C_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001440:	f000 fa58 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000790 	.word	0x20000790
 800144c:	40005c00 	.word	0x40005c00
 8001450:	000186a0 	.word	0x000186a0

08001454 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 800145a:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <MX_USART1_UART_Init+0x50>)
 800145c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001460:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001464:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 800148c:	f004 f9fc 	bl	8005888 <HAL_UART_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001496:	f000 fa2d 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200007e4 	.word	0x200007e4
 80014a4:	40011000 	.word	0x40011000

080014a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014ac:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	@ (80014f8 <MX_USART2_UART_Init+0x50>)
 80014b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014e0:	f004 f9d2 	bl	8005888 <HAL_UART_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ea:	f000 fa03 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000082c 	.word	0x2000082c
 80014f8:	40004400 	.word	0x40004400

080014fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	4b23      	ldr	r3, [pc, #140]	@ (8001594 <MX_DMA_Init+0x98>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a22      	ldr	r2, [pc, #136]	@ (8001594 <MX_DMA_Init+0x98>)
 800150c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <MX_DMA_Init+0x98>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	4b1c      	ldr	r3, [pc, #112]	@ (8001594 <MX_DMA_Init+0x98>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a1b      	ldr	r2, [pc, #108]	@ (8001594 <MX_DMA_Init+0x98>)
 8001528:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <MX_DMA_Init+0x98>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2105      	movs	r1, #5
 800153e:	2010      	movs	r0, #16
 8001540:	f001 fca0 	bl	8002e84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001544:	2010      	movs	r0, #16
 8001546:	f001 fcb9 	bl	8002ebc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2105      	movs	r1, #5
 800154e:	2011      	movs	r0, #17
 8001550:	f001 fc98 	bl	8002e84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001554:	2011      	movs	r0, #17
 8001556:	f001 fcb1 	bl	8002ebc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2105      	movs	r1, #5
 800155e:	2038      	movs	r0, #56	@ 0x38
 8001560:	f001 fc90 	bl	8002e84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001564:	2038      	movs	r0, #56	@ 0x38
 8001566:	f001 fca9 	bl	8002ebc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2105      	movs	r1, #5
 800156e:	203a      	movs	r0, #58	@ 0x3a
 8001570:	f001 fc88 	bl	8002e84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001574:	203a      	movs	r0, #58	@ 0x3a
 8001576:	f001 fca1 	bl	8002ebc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2105      	movs	r1, #5
 800157e:	2046      	movs	r0, #70	@ 0x46
 8001580:	f001 fc80 	bl	8002e84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001584:	2046      	movs	r0, #70	@ 0x46
 8001586:	f001 fc99 	bl	8002ebc <HAL_NVIC_EnableIRQ>

}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800

08001598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	4b34      	ldr	r3, [pc, #208]	@ (8001684 <MX_GPIO_Init+0xec>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	4a33      	ldr	r2, [pc, #204]	@ (8001684 <MX_GPIO_Init+0xec>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015be:	4b31      	ldr	r3, [pc, #196]	@ (8001684 <MX_GPIO_Init+0xec>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001684 <MX_GPIO_Init+0xec>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001684 <MX_GPIO_Init+0xec>)
 80015d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b2a      	ldr	r3, [pc, #168]	@ (8001684 <MX_GPIO_Init+0xec>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	4b26      	ldr	r3, [pc, #152]	@ (8001684 <MX_GPIO_Init+0xec>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a25      	ldr	r2, [pc, #148]	@ (8001684 <MX_GPIO_Init+0xec>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b23      	ldr	r3, [pc, #140]	@ (8001684 <MX_GPIO_Init+0xec>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	4b1f      	ldr	r3, [pc, #124]	@ (8001684 <MX_GPIO_Init+0xec>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	4a1e      	ldr	r2, [pc, #120]	@ (8001684 <MX_GPIO_Init+0xec>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6313      	str	r3, [r2, #48]	@ 0x30
 8001612:	4b1c      	ldr	r3, [pc, #112]	@ (8001684 <MX_GPIO_Init+0xec>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	2120      	movs	r1, #32
 8001622:	4819      	ldr	r0, [pc, #100]	@ (8001688 <MX_GPIO_Init+0xf0>)
 8001624:	f002 f9de 	bl	80039e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001628:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800162c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800162e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4813      	ldr	r0, [pc, #76]	@ (800168c <MX_GPIO_Init+0xf4>)
 8001640:	f002 f84c 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001644:	2320      	movs	r3, #32
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	2301      	movs	r3, #1
 800164a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	480b      	ldr	r0, [pc, #44]	@ (8001688 <MX_GPIO_Init+0xf0>)
 800165c:	f002 f83e 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001660:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800166a:	2301      	movs	r3, #1
 800166c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	@ (800168c <MX_GPIO_Init+0xf4>)
 8001676:	f002 f831 	bl	80036dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	@ 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800
 8001688:	40020000 	.word	0x40020000
 800168c:	40020800 	.word	0x40020800

08001690 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a06      	ldr	r2, [pc, #24]	@ (80016b8 <HAL_UART_RxCpltCallback+0x28>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d103      	bne.n	80016aa <HAL_UART_RxCpltCallback+0x1a>
      //HAL_UART_Receive(&huart1, (uint8_t *)received_data, ESP_BUFFER_SIZE, HAL_MAX_DELAY);
      received_data[ESP_BUFFER_SIZE - 1] = '\0';
 80016a2:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_UART_RxCpltCallback+0x2c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 21f5 	strb.w	r2, [r3, #501]	@ 0x1f5
      //Handle_Buffer_Overflow();
    } */

  // Re-enable DMA reception for the next byte
  //HAL_UART_Receive_DMA(huart, &DMA_Buffer, 1);
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40011000 	.word	0x40011000
 80016bc:	20000a14 	.word	0x20000a14

080016c0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016c8:	2001      	movs	r0, #1
 80016ca:	f005 fb30 	bl	8006d2e <osDelay>
 80016ce:	e7fb      	b.n	80016c8 <StartDefaultTask+0x8>

080016d0 <StartToESP>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartToESP */
void StartToESP(void const * argument)
{
 80016d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016d4:	b0a6      	sub	sp, #152	@ 0x98
 80016d6:	af08      	add	r7, sp, #32
 80016d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartToESP */
  float light_moisture_buffer[2]; // in case buffer data changes due to dma
  char buffer[100]; // ready to be sent over
  HAL_ADC_Start_DMA(&hadc1, light_moisture_dma, 2);
 80016da:	2202      	movs	r2, #2
 80016dc:	492e      	ldr	r1, [pc, #184]	@ (8001798 <StartToESP+0xc8>)
 80016de:	482f      	ldr	r0, [pc, #188]	@ (800179c <StartToESP+0xcc>)
 80016e0:	f000 ff56 	bl	8002590 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  for(;;)
  {
    AM2320_ReadTemperatureAndHumidity(&hi2c1, temperature_humidity_buffer, temperature_humidity_buffer+1);
 80016e4:	4b2e      	ldr	r3, [pc, #184]	@ (80017a0 <StartToESP+0xd0>)
 80016e6:	461a      	mov	r2, r3
 80016e8:	492e      	ldr	r1, [pc, #184]	@ (80017a4 <StartToESP+0xd4>)
 80016ea:	482f      	ldr	r0, [pc, #188]	@ (80017a8 <StartToESP+0xd8>)
 80016ec:	f7ff fbdc 	bl	8000ea8 <AM2320_ReadTemperatureAndHumidity>
    vTaskDelay(pdMS_TO_TICKS(500)); // Need time to receive data
 80016f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016f4:	f005 fd92 	bl	800721c <vTaskDelay>

    // until here, we have 1500 ms of delay

    // Format the sensor data and send it over UART
    light_moisture_buffer[0] = (float)light_moisture_dma[0];
 80016f8:	4b27      	ldr	r3, [pc, #156]	@ (8001798 <StartToESP+0xc8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001704:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    light_moisture_buffer[1] = (float)light_moisture_dma[1];
 8001708:	4b23      	ldr	r3, [pc, #140]	@ (8001798 <StartToESP+0xc8>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	ee07 3a90 	vmov	s15, r3
 8001710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001714:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f\n", temperature_humidity_buffer[0],
 8001718:	4b22      	ldr	r3, [pc, #136]	@ (80017a4 <StartToESP+0xd4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff1b 	bl	8000558 <__aeabi_f2d>
 8001722:	4604      	mov	r4, r0
 8001724:	460d      	mov	r5, r1
        temperature_humidity_buffer[1], light_moisture_buffer[0], light_moisture_buffer[1]);
 8001726:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <StartToESP+0xd4>)
 8001728:	685b      	ldr	r3, [r3, #4]
    snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f\n", temperature_humidity_buffer[0],
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe ff14 	bl	8000558 <__aeabi_f2d>
 8001730:	4680      	mov	r8, r0
 8001732:	4689      	mov	r9, r1
        temperature_humidity_buffer[1], light_moisture_buffer[0], light_moisture_buffer[1]);
 8001734:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f\n", temperature_humidity_buffer[0],
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe ff0e 	bl	8000558 <__aeabi_f2d>
 800173c:	4682      	mov	sl, r0
 800173e:	468b      	mov	fp, r1
        temperature_humidity_buffer[1], light_moisture_buffer[0], light_moisture_buffer[1]);
 8001740:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
    snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f\n", temperature_humidity_buffer[0],
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe ff08 	bl	8000558 <__aeabi_f2d>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	f107 000c 	add.w	r0, r7, #12
 8001750:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001754:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001758:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800175c:	e9cd 4500 	strd	r4, r5, [sp]
 8001760:	4a12      	ldr	r2, [pc, #72]	@ (80017ac <StartToESP+0xdc>)
 8001762:	2164      	movs	r1, #100	@ 0x64
 8001764:	f007 fa20 	bl	8008ba8 <sniprintf>

    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fd87 	bl	8000280 <strlen>
 8001772:	4603      	mov	r3, r0
 8001774:	b29a      	uxth	r2, r3
 8001776:	f107 010c 	add.w	r1, r7, #12
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <StartToESP+0xe0>)
 8001780:	f004 f8d2 	bl	8005928 <HAL_UART_Transmit>
    vTaskDelay(pdMS_TO_TICKS(1000));
 8001784:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001788:	f005 fd48 	bl	800721c <vTaskDelay>

    // we have 2500 ms of delay

    osDelay(1);
 800178c:	2001      	movs	r0, #1
 800178e:	f005 face 	bl	8006d2e <osDelay>
    AM2320_ReadTemperatureAndHumidity(&hi2c1, temperature_humidity_buffer, temperature_humidity_buffer+1);
 8001792:	bf00      	nop
 8001794:	e7a6      	b.n	80016e4 <StartToESP+0x14>
 8001796:	bf00      	nop
 8001798:	20000a0c 	.word	0x20000a0c
 800179c:	20000694 	.word	0x20000694
 80017a0:	20000a08 	.word	0x20000a08
 80017a4:	20000a04 	.word	0x20000a04
 80017a8:	2000073c 	.word	0x2000073c
 80017ac:	0800b904 	.word	0x0800b904
 80017b0:	200007e4 	.word	0x200007e4

080017b4 <StartFromESP>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartFromESP */
void StartFromESP(void const * argument)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	@ 0x28
 80017b8:	af06      	add	r7, sp, #24
 80017ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFromESP */
  //HAL_UART_Receive_DMA(&huart1, (uint8_t*)received_data, ESP_BUFFER_SIZE);
  // Null-terminate the buffer
  received_data[ESP_BUFFER_SIZE - 1] = '\0';
 80017bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001874 <StartFromESP+0xc0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 21f5 	strb.w	r2, [r3, #501]	@ 0x1f5
  HAL_UART_Receive_DMA(&huart1, (uint8_t*)received_data, ESP_BUFFER_SIZE);
 80017c4:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 80017c8:	492a      	ldr	r1, [pc, #168]	@ (8001874 <StartFromESP+0xc0>)
 80017ca:	482b      	ldr	r0, [pc, #172]	@ (8001878 <StartFromESP+0xc4>)
 80017cc:	f004 f937 	bl	8005a3e <HAL_UART_Receive_DMA>
  {
    //HAL_UART_Receive(&huart1, (uint8_t*)received_data, ESP_BUFFER_SIZE, HAL_MAX_DELAY);
    //vTaskDelay(pdMS_TO_TICKS(2000));

    // Start parsing from the second character
    int result = sscanf(received_data,
 80017d0:	4b2a      	ldr	r3, [pc, #168]	@ (800187c <StartFromESP+0xc8>)
 80017d2:	9304      	str	r3, [sp, #16]
 80017d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001880 <StartFromESP+0xcc>)
 80017d6:	9303      	str	r3, [sp, #12]
 80017d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001884 <StartFromESP+0xd0>)
 80017da:	9302      	str	r3, [sp, #8]
 80017dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001888 <StartFromESP+0xd4>)
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	4b2a      	ldr	r3, [pc, #168]	@ (800188c <StartFromESP+0xd8>)
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001890 <StartFromESP+0xdc>)
 80017e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001894 <StartFromESP+0xe0>)
 80017e8:	492b      	ldr	r1, [pc, #172]	@ (8001898 <StartFromESP+0xe4>)
 80017ea:	4822      	ldr	r0, [pc, #136]	@ (8001874 <StartFromESP+0xc0>)
 80017ec:	f007 fa10 	bl	8008c10 <siscanf>
 80017f0:	60f8      	str	r0, [r7, #12]
                        parsedHumidity,
                        parsedUVIndex,
                        parsedMoisture,
                        parsedGeneral);

    if (result == 7) // Check if all fields were parsed correctly
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2b07      	cmp	r3, #7
 80017f6:	d139      	bne.n	800186c <StartFromESP+0xb8>
    {
        error_code = parsedErrorCode;
 80017f8:	4b26      	ldr	r3, [pc, #152]	@ (8001894 <StartFromESP+0xe0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a27      	ldr	r2, [pc, #156]	@ (800189c <StartFromESP+0xe8>)
 80017fe:	6013      	str	r3, [r2, #0]
        strncpy(time, parsedTime, sizeof(time) - 1);
 8001800:	2263      	movs	r2, #99	@ 0x63
 8001802:	4923      	ldr	r1, [pc, #140]	@ (8001890 <StartFromESP+0xdc>)
 8001804:	4826      	ldr	r0, [pc, #152]	@ (80018a0 <StartFromESP+0xec>)
 8001806:	f007 fa7a 	bl	8008cfe <strncpy>
        time[sizeof(time) - 1] = '\0';
 800180a:	4b25      	ldr	r3, [pc, #148]	@ (80018a0 <StartFromESP+0xec>)
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
        strncpy(temperature, parsedTemperature, sizeof(temperature) - 1);
 8001812:	2263      	movs	r2, #99	@ 0x63
 8001814:	491d      	ldr	r1, [pc, #116]	@ (800188c <StartFromESP+0xd8>)
 8001816:	4823      	ldr	r0, [pc, #140]	@ (80018a4 <StartFromESP+0xf0>)
 8001818:	f007 fa71 	bl	8008cfe <strncpy>
        temperature[sizeof(temperature) - 1] = '\0';
 800181c:	4b21      	ldr	r3, [pc, #132]	@ (80018a4 <StartFromESP+0xf0>)
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
        strncpy(humidity, parsedHumidity, sizeof(humidity) - 1);
 8001824:	2263      	movs	r2, #99	@ 0x63
 8001826:	4918      	ldr	r1, [pc, #96]	@ (8001888 <StartFromESP+0xd4>)
 8001828:	481f      	ldr	r0, [pc, #124]	@ (80018a8 <StartFromESP+0xf4>)
 800182a:	f007 fa68 	bl	8008cfe <strncpy>
        humidity[sizeof(humidity) - 1] = '\0';
 800182e:	4b1e      	ldr	r3, [pc, #120]	@ (80018a8 <StartFromESP+0xf4>)
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
        strncpy(uv_index, parsedUVIndex, sizeof(uv_index) - 1);
 8001836:	2263      	movs	r2, #99	@ 0x63
 8001838:	4912      	ldr	r1, [pc, #72]	@ (8001884 <StartFromESP+0xd0>)
 800183a:	481c      	ldr	r0, [pc, #112]	@ (80018ac <StartFromESP+0xf8>)
 800183c:	f007 fa5f 	bl	8008cfe <strncpy>
        uv_index[sizeof(uv_index) - 1] = '\0';
 8001840:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <StartFromESP+0xf8>)
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
        strncpy(moisture, parsedMoisture, sizeof(moisture) - 1);
 8001848:	2263      	movs	r2, #99	@ 0x63
 800184a:	490d      	ldr	r1, [pc, #52]	@ (8001880 <StartFromESP+0xcc>)
 800184c:	4818      	ldr	r0, [pc, #96]	@ (80018b0 <StartFromESP+0xfc>)
 800184e:	f007 fa56 	bl	8008cfe <strncpy>
        moisture[sizeof(moisture) - 1] = '\0';
 8001852:	4b17      	ldr	r3, [pc, #92]	@ (80018b0 <StartFromESP+0xfc>)
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
        strncpy(general, parsedGeneral, sizeof(general) - 1);
 800185a:	2263      	movs	r2, #99	@ 0x63
 800185c:	4907      	ldr	r1, [pc, #28]	@ (800187c <StartFromESP+0xc8>)
 800185e:	4815      	ldr	r0, [pc, #84]	@ (80018b4 <StartFromESP+0x100>)
 8001860:	f007 fa4d 	bl	8008cfe <strncpy>
        general[sizeof(general) - 1] = '\0';
 8001864:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <StartFromESP+0x100>)
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
    }

    osDelay(1);
 800186c:	2001      	movs	r0, #1
 800186e:	f005 fa5e 	bl	8006d2e <osDelay>
  {
 8001872:	e7ad      	b.n	80017d0 <StartFromESP+0x1c>
 8001874:	20000a14 	.word	0x20000a14
 8001878:	200007e4 	.word	0x200007e4
 800187c:	20001164 	.word	0x20001164
 8001880:	200010cc 	.word	0x200010cc
 8001884:	20001034 	.word	0x20001034
 8001888:	20000f9c 	.word	0x20000f9c
 800188c:	20000f04 	.word	0x20000f04
 8001890:	20000e6c 	.word	0x20000e6c
 8001894:	20000e68 	.word	0x20000e68
 8001898:	0800b91c 	.word	0x0800b91c
 800189c:	20000c0c 	.word	0x20000c0c
 80018a0:	20000c10 	.word	0x20000c10
 80018a4:	20000c74 	.word	0x20000c74
 80018a8:	20000cd8 	.word	0x20000cd8
 80018ac:	20000d3c 	.word	0x20000d3c
 80018b0:	20000da0 	.word	0x20000da0
 80018b4:	20000e04 	.word	0x20000e04

080018b8 <StartDispScreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDispScreen */
void StartDispScreen(void const * argument)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDispScreen */
  lcd_init();
 80018c0:	f7ff fbd8 	bl	8001074 <lcd_init>
  lcd_clear_display();
 80018c4:	f7ff fc13 	bl	80010ee <lcd_clear_display>
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 80018c8:	2001      	movs	r0, #1
 80018ca:	f005 fa30 	bl	8006d2e <osDelay>
 80018ce:	e7fb      	b.n	80018c8 <StartDispScreen+0x10>

080018d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d101      	bne.n	80018e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018e2:	f000 fcbd 	bl	8002260 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40010000 	.word	0x40010000

080018f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f8:	b672      	cpsid	i
}
 80018fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <Error_Handler+0x8>

08001900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <HAL_MspInit+0x54>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190e:	4a11      	ldr	r2, [pc, #68]	@ (8001954 <HAL_MspInit+0x54>)
 8001910:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001914:	6453      	str	r3, [r2, #68]	@ 0x44
 8001916:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <HAL_MspInit+0x54>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <HAL_MspInit+0x54>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <HAL_MspInit+0x54>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001930:	6413      	str	r3, [r2, #64]	@ 0x40
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <HAL_MspInit+0x54>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	210f      	movs	r1, #15
 8001942:	f06f 0001 	mvn.w	r0, #1
 8001946:	f001 fa9d 	bl	8002e84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800

08001958 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	@ 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a33      	ldr	r2, [pc, #204]	@ (8001a44 <HAL_ADC_MspInit+0xec>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d15f      	bne.n	8001a3a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	4b32      	ldr	r3, [pc, #200]	@ (8001a48 <HAL_ADC_MspInit+0xf0>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	4a31      	ldr	r2, [pc, #196]	@ (8001a48 <HAL_ADC_MspInit+0xf0>)
 8001984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001988:	6453      	str	r3, [r2, #68]	@ 0x44
 800198a:	4b2f      	ldr	r3, [pc, #188]	@ (8001a48 <HAL_ADC_MspInit+0xf0>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a48 <HAL_ADC_MspInit+0xf0>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	4a2a      	ldr	r2, [pc, #168]	@ (8001a48 <HAL_ADC_MspInit+0xf0>)
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a6:	4b28      	ldr	r3, [pc, #160]	@ (8001a48 <HAL_ADC_MspInit+0xf0>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80019b2:	2318      	movs	r3, #24
 80019b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b6:	2303      	movs	r3, #3
 80019b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	4821      	ldr	r0, [pc, #132]	@ (8001a4c <HAL_ADC_MspInit+0xf4>)
 80019c6:	f001 fe89 	bl	80036dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80019ca:	4b21      	ldr	r3, [pc, #132]	@ (8001a50 <HAL_ADC_MspInit+0xf8>)
 80019cc:	4a21      	ldr	r2, [pc, #132]	@ (8001a54 <HAL_ADC_MspInit+0xfc>)
 80019ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80019d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a50 <HAL_ADC_MspInit+0xf8>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a50 <HAL_ADC_MspInit+0xf8>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a50 <HAL_ADC_MspInit+0xf8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a50 <HAL_ADC_MspInit+0xf8>)
 80019e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019ea:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <HAL_ADC_MspInit+0xf8>)
 80019ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019f2:	4b17      	ldr	r3, [pc, #92]	@ (8001a50 <HAL_ADC_MspInit+0xf8>)
 80019f4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <HAL_ADC_MspInit+0xf8>)
 80019fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a02:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <HAL_ADC_MspInit+0xf8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a08:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <HAL_ADC_MspInit+0xf8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a0e:	4810      	ldr	r0, [pc, #64]	@ (8001a50 <HAL_ADC_MspInit+0xf8>)
 8001a10:	f001 fa62 	bl	8002ed8 <HAL_DMA_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001a1a:	f7ff ff6b 	bl	80018f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a0b      	ldr	r2, [pc, #44]	@ (8001a50 <HAL_ADC_MspInit+0xf8>)
 8001a22:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a24:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <HAL_ADC_MspInit+0xf8>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2105      	movs	r1, #5
 8001a2e:	2012      	movs	r0, #18
 8001a30:	f001 fa28 	bl	8002e84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a34:	2012      	movs	r0, #18
 8001a36:	f001 fa41 	bl	8002ebc <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a3a:	bf00      	nop
 8001a3c:	3728      	adds	r7, #40	@ 0x28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40012000 	.word	0x40012000
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020800 	.word	0x40020800
 8001a50:	200006dc 	.word	0x200006dc
 8001a54:	40026410 	.word	0x40026410

08001a58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08c      	sub	sp, #48	@ 0x30
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a42      	ldr	r2, [pc, #264]	@ (8001b80 <HAL_I2C_MspInit+0x128>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d12c      	bne.n	8001ad4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	4b41      	ldr	r3, [pc, #260]	@ (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	4a40      	ldr	r2, [pc, #256]	@ (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a96:	23c0      	movs	r3, #192	@ 0xc0
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a9a:	2312      	movs	r3, #18
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4835      	ldr	r0, [pc, #212]	@ (8001b88 <HAL_I2C_MspInit+0x130>)
 8001ab2:	f001 fe13 	bl	80036dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	4b32      	ldr	r3, [pc, #200]	@ (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	4a31      	ldr	r2, [pc, #196]	@ (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001ac0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ad2:	e050      	b.n	8001b76 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a2c      	ldr	r2, [pc, #176]	@ (8001b8c <HAL_I2C_MspInit+0x134>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d14b      	bne.n	8001b76 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	4b28      	ldr	r3, [pc, #160]	@ (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	4a27      	ldr	r2, [pc, #156]	@ (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aee:	4b25      	ldr	r3, [pc, #148]	@ (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b21      	ldr	r3, [pc, #132]	@ (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a20      	ldr	r2, [pc, #128]	@ (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b1c:	2312      	movs	r3, #18
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b28:	2304      	movs	r3, #4
 8001b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	4619      	mov	r1, r3
 8001b32:	4817      	ldr	r0, [pc, #92]	@ (8001b90 <HAL_I2C_MspInit+0x138>)
 8001b34:	f001 fdd2 	bl	80036dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b3e:	2312      	movs	r3, #18
 8001b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	480f      	ldr	r0, [pc, #60]	@ (8001b94 <HAL_I2C_MspInit+0x13c>)
 8001b56:	f001 fdc1 	bl	80036dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	4a08      	ldr	r2, [pc, #32]	@ (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001b64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b6a:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <HAL_I2C_MspInit+0x12c>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
}
 8001b76:	bf00      	nop
 8001b78:	3730      	adds	r7, #48	@ 0x30
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40005400 	.word	0x40005400
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	40005c00 	.word	0x40005c00
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020000 	.word	0x40020000

08001b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08c      	sub	sp, #48	@ 0x30
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a98      	ldr	r2, [pc, #608]	@ (8001e18 <HAL_UART_MspInit+0x280>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	f040 8093 	bne.w	8001ce2 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
 8001bc0:	4b96      	ldr	r3, [pc, #600]	@ (8001e1c <HAL_UART_MspInit+0x284>)
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc4:	4a95      	ldr	r2, [pc, #596]	@ (8001e1c <HAL_UART_MspInit+0x284>)
 8001bc6:	f043 0310 	orr.w	r3, r3, #16
 8001bca:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bcc:	4b93      	ldr	r3, [pc, #588]	@ (8001e1c <HAL_UART_MspInit+0x284>)
 8001bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	4b8f      	ldr	r3, [pc, #572]	@ (8001e1c <HAL_UART_MspInit+0x284>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be0:	4a8e      	ldr	r2, [pc, #568]	@ (8001e1c <HAL_UART_MspInit+0x284>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be8:	4b8c      	ldr	r3, [pc, #560]	@ (8001e1c <HAL_UART_MspInit+0x284>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bf4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c02:	2303      	movs	r3, #3
 8001c04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c06:	2307      	movs	r3, #7
 8001c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4883      	ldr	r0, [pc, #524]	@ (8001e20 <HAL_UART_MspInit+0x288>)
 8001c12:	f001 fd63 	bl	80036dc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001c16:	4b83      	ldr	r3, [pc, #524]	@ (8001e24 <HAL_UART_MspInit+0x28c>)
 8001c18:	4a83      	ldr	r2, [pc, #524]	@ (8001e28 <HAL_UART_MspInit+0x290>)
 8001c1a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001c1c:	4b81      	ldr	r3, [pc, #516]	@ (8001e24 <HAL_UART_MspInit+0x28c>)
 8001c1e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c22:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c24:	4b7f      	ldr	r3, [pc, #508]	@ (8001e24 <HAL_UART_MspInit+0x28c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c2a:	4b7e      	ldr	r3, [pc, #504]	@ (8001e24 <HAL_UART_MspInit+0x28c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c30:	4b7c      	ldr	r3, [pc, #496]	@ (8001e24 <HAL_UART_MspInit+0x28c>)
 8001c32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c36:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c38:	4b7a      	ldr	r3, [pc, #488]	@ (8001e24 <HAL_UART_MspInit+0x28c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c3e:	4b79      	ldr	r3, [pc, #484]	@ (8001e24 <HAL_UART_MspInit+0x28c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001c44:	4b77      	ldr	r3, [pc, #476]	@ (8001e24 <HAL_UART_MspInit+0x28c>)
 8001c46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c4a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c4c:	4b75      	ldr	r3, [pc, #468]	@ (8001e24 <HAL_UART_MspInit+0x28c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c52:	4b74      	ldr	r3, [pc, #464]	@ (8001e24 <HAL_UART_MspInit+0x28c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c58:	4872      	ldr	r0, [pc, #456]	@ (8001e24 <HAL_UART_MspInit+0x28c>)
 8001c5a:	f001 f93d 	bl	8002ed8 <HAL_DMA_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001c64:	f7ff fe46 	bl	80018f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a6e      	ldr	r2, [pc, #440]	@ (8001e24 <HAL_UART_MspInit+0x28c>)
 8001c6c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c6e:	4a6d      	ldr	r2, [pc, #436]	@ (8001e24 <HAL_UART_MspInit+0x28c>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001c74:	4b6d      	ldr	r3, [pc, #436]	@ (8001e2c <HAL_UART_MspInit+0x294>)
 8001c76:	4a6e      	ldr	r2, [pc, #440]	@ (8001e30 <HAL_UART_MspInit+0x298>)
 8001c78:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001c7a:	4b6c      	ldr	r3, [pc, #432]	@ (8001e2c <HAL_UART_MspInit+0x294>)
 8001c7c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c80:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c82:	4b6a      	ldr	r3, [pc, #424]	@ (8001e2c <HAL_UART_MspInit+0x294>)
 8001c84:	2240      	movs	r2, #64	@ 0x40
 8001c86:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c88:	4b68      	ldr	r3, [pc, #416]	@ (8001e2c <HAL_UART_MspInit+0x294>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c8e:	4b67      	ldr	r3, [pc, #412]	@ (8001e2c <HAL_UART_MspInit+0x294>)
 8001c90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c94:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c96:	4b65      	ldr	r3, [pc, #404]	@ (8001e2c <HAL_UART_MspInit+0x294>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c9c:	4b63      	ldr	r3, [pc, #396]	@ (8001e2c <HAL_UART_MspInit+0x294>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001ca2:	4b62      	ldr	r3, [pc, #392]	@ (8001e2c <HAL_UART_MspInit+0x294>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ca8:	4b60      	ldr	r3, [pc, #384]	@ (8001e2c <HAL_UART_MspInit+0x294>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cae:	4b5f      	ldr	r3, [pc, #380]	@ (8001e2c <HAL_UART_MspInit+0x294>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001cb4:	485d      	ldr	r0, [pc, #372]	@ (8001e2c <HAL_UART_MspInit+0x294>)
 8001cb6:	f001 f90f 	bl	8002ed8 <HAL_DMA_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001cc0:	f7ff fe18 	bl	80018f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a59      	ldr	r2, [pc, #356]	@ (8001e2c <HAL_UART_MspInit+0x294>)
 8001cc8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cca:	4a58      	ldr	r2, [pc, #352]	@ (8001e2c <HAL_UART_MspInit+0x294>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2105      	movs	r1, #5
 8001cd4:	2025      	movs	r0, #37	@ 0x25
 8001cd6:	f001 f8d5 	bl	8002e84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cda:	2025      	movs	r0, #37	@ 0x25
 8001cdc:	f001 f8ee 	bl	8002ebc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ce0:	e095      	b.n	8001e0e <HAL_UART_MspInit+0x276>
  else if(huart->Instance==USART2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a53      	ldr	r2, [pc, #332]	@ (8001e34 <HAL_UART_MspInit+0x29c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	f040 8090 	bne.w	8001e0e <HAL_UART_MspInit+0x276>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8001e1c <HAL_UART_MspInit+0x284>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	4a49      	ldr	r2, [pc, #292]	@ (8001e1c <HAL_UART_MspInit+0x284>)
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cfe:	4b47      	ldr	r3, [pc, #284]	@ (8001e1c <HAL_UART_MspInit+0x284>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b43      	ldr	r3, [pc, #268]	@ (8001e1c <HAL_UART_MspInit+0x284>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	4a42      	ldr	r2, [pc, #264]	@ (8001e1c <HAL_UART_MspInit+0x284>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1a:	4b40      	ldr	r3, [pc, #256]	@ (8001e1c <HAL_UART_MspInit+0x284>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d26:	230c      	movs	r3, #12
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d36:	2307      	movs	r3, #7
 8001d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 031c 	add.w	r3, r7, #28
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4837      	ldr	r0, [pc, #220]	@ (8001e20 <HAL_UART_MspInit+0x288>)
 8001d42:	f001 fccb 	bl	80036dc <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001d46:	4b3c      	ldr	r3, [pc, #240]	@ (8001e38 <HAL_UART_MspInit+0x2a0>)
 8001d48:	4a3c      	ldr	r2, [pc, #240]	@ (8001e3c <HAL_UART_MspInit+0x2a4>)
 8001d4a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001d4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e38 <HAL_UART_MspInit+0x2a0>)
 8001d4e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d52:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d54:	4b38      	ldr	r3, [pc, #224]	@ (8001e38 <HAL_UART_MspInit+0x2a0>)
 8001d56:	2240      	movs	r2, #64	@ 0x40
 8001d58:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d5a:	4b37      	ldr	r3, [pc, #220]	@ (8001e38 <HAL_UART_MspInit+0x2a0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d60:	4b35      	ldr	r3, [pc, #212]	@ (8001e38 <HAL_UART_MspInit+0x2a0>)
 8001d62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d66:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d68:	4b33      	ldr	r3, [pc, #204]	@ (8001e38 <HAL_UART_MspInit+0x2a0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d6e:	4b32      	ldr	r3, [pc, #200]	@ (8001e38 <HAL_UART_MspInit+0x2a0>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001d74:	4b30      	ldr	r3, [pc, #192]	@ (8001e38 <HAL_UART_MspInit+0x2a0>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e38 <HAL_UART_MspInit+0x2a0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d80:	4b2d      	ldr	r3, [pc, #180]	@ (8001e38 <HAL_UART_MspInit+0x2a0>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001d86:	482c      	ldr	r0, [pc, #176]	@ (8001e38 <HAL_UART_MspInit+0x2a0>)
 8001d88:	f001 f8a6 	bl	8002ed8 <HAL_DMA_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 8001d92:	f7ff fdaf 	bl	80018f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a27      	ldr	r2, [pc, #156]	@ (8001e38 <HAL_UART_MspInit+0x2a0>)
 8001d9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d9c:	4a26      	ldr	r2, [pc, #152]	@ (8001e38 <HAL_UART_MspInit+0x2a0>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001da2:	4b27      	ldr	r3, [pc, #156]	@ (8001e40 <HAL_UART_MspInit+0x2a8>)
 8001da4:	4a27      	ldr	r2, [pc, #156]	@ (8001e44 <HAL_UART_MspInit+0x2ac>)
 8001da6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001da8:	4b25      	ldr	r3, [pc, #148]	@ (8001e40 <HAL_UART_MspInit+0x2a8>)
 8001daa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001dae:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001db0:	4b23      	ldr	r3, [pc, #140]	@ (8001e40 <HAL_UART_MspInit+0x2a8>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db6:	4b22      	ldr	r3, [pc, #136]	@ (8001e40 <HAL_UART_MspInit+0x2a8>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_DISABLE;
 8001dbc:	4b20      	ldr	r3, [pc, #128]	@ (8001e40 <HAL_UART_MspInit+0x2a8>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e40 <HAL_UART_MspInit+0x2a8>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <HAL_UART_MspInit+0x2a8>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	@ (8001e40 <HAL_UART_MspInit+0x2a8>)
 8001dd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dd4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e40 <HAL_UART_MspInit+0x2a8>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ddc:	4b18      	ldr	r3, [pc, #96]	@ (8001e40 <HAL_UART_MspInit+0x2a8>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001de2:	4817      	ldr	r0, [pc, #92]	@ (8001e40 <HAL_UART_MspInit+0x2a8>)
 8001de4:	f001 f878 	bl	8002ed8 <HAL_DMA_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8001dee:	f7ff fd81 	bl	80018f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a12      	ldr	r2, [pc, #72]	@ (8001e40 <HAL_UART_MspInit+0x2a8>)
 8001df6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001df8:	4a11      	ldr	r2, [pc, #68]	@ (8001e40 <HAL_UART_MspInit+0x2a8>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2105      	movs	r1, #5
 8001e02:	2026      	movs	r0, #38	@ 0x26
 8001e04:	f001 f83e 	bl	8002e84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e08:	2026      	movs	r0, #38	@ 0x26
 8001e0a:	f001 f857 	bl	8002ebc <HAL_NVIC_EnableIRQ>
}
 8001e0e:	bf00      	nop
 8001e10:	3730      	adds	r7, #48	@ 0x30
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40011000 	.word	0x40011000
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40020000 	.word	0x40020000
 8001e24:	20000874 	.word	0x20000874
 8001e28:	40026440 	.word	0x40026440
 8001e2c:	200008d4 	.word	0x200008d4
 8001e30:	400264b8 	.word	0x400264b8
 8001e34:	40004400 	.word	0x40004400
 8001e38:	20000934 	.word	0x20000934
 8001e3c:	400260a0 	.word	0x400260a0
 8001e40:	20000994 	.word	0x20000994
 8001e44:	40026088 	.word	0x40026088

08001e48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	@ 0x30
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f18 <HAL_InitTick+0xd0>)
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e60:	4a2d      	ldr	r2, [pc, #180]	@ (8001f18 <HAL_InitTick+0xd0>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e68:	4b2b      	ldr	r3, [pc, #172]	@ (8001f18 <HAL_InitTick+0xd0>)
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e74:	f107 020c 	add.w	r2, r7, #12
 8001e78:	f107 0310 	add.w	r3, r7, #16
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 fa5c 	bl	800533c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e84:	f003 fa46 	bl	8005314 <HAL_RCC_GetPCLK2Freq>
 8001e88:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e8c:	4a23      	ldr	r2, [pc, #140]	@ (8001f1c <HAL_InitTick+0xd4>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	0c9b      	lsrs	r3, r3, #18
 8001e94:	3b01      	subs	r3, #1
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e98:	4b21      	ldr	r3, [pc, #132]	@ (8001f20 <HAL_InitTick+0xd8>)
 8001e9a:	4a22      	ldr	r2, [pc, #136]	@ (8001f24 <HAL_InitTick+0xdc>)
 8001e9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e9e:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <HAL_InitTick+0xd8>)
 8001ea0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ea4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f20 <HAL_InitTick+0xd8>)
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eaa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001eac:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <HAL_InitTick+0xd8>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f20 <HAL_InitTick+0xd8>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb8:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <HAL_InitTick+0xd8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001ebe:	4818      	ldr	r0, [pc, #96]	@ (8001f20 <HAL_InitTick+0xd8>)
 8001ec0:	f003 fa6e 	bl	80053a0 <HAL_TIM_Base_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001eca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d11b      	bne.n	8001f0a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001ed2:	4813      	ldr	r0, [pc, #76]	@ (8001f20 <HAL_InitTick+0xd8>)
 8001ed4:	f003 fabe 	bl	8005454 <HAL_TIM_Base_Start_IT>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001ede:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d111      	bne.n	8001f0a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ee6:	2019      	movs	r0, #25
 8001ee8:	f000 ffe8 	bl	8002ebc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	d808      	bhi.n	8001f04 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	2019      	movs	r0, #25
 8001ef8:	f000 ffc4 	bl	8002e84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001efc:	4a0a      	ldr	r2, [pc, #40]	@ (8001f28 <HAL_InitTick+0xe0>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	e002      	b.n	8001f0a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3730      	adds	r7, #48	@ 0x30
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	431bde83 	.word	0x431bde83
 8001f20:	200011fc 	.word	0x200011fc
 8001f24:	40010000 	.word	0x40010000
 8001f28:	20000004 	.word	0x20000004

08001f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <NMI_Handler+0x4>

08001f34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <HardFault_Handler+0x4>

08001f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <MemManage_Handler+0x4>

08001f44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <BusFault_Handler+0x4>

08001f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <UsageFault_Handler+0x4>

08001f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f68:	4802      	ldr	r0, [pc, #8]	@ (8001f74 <DMA1_Stream5_IRQHandler+0x10>)
 8001f6a:	f001 f94d 	bl	8003208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000994 	.word	0x20000994

08001f78 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001f7c:	4802      	ldr	r0, [pc, #8]	@ (8001f88 <DMA1_Stream6_IRQHandler+0x10>)
 8001f7e:	f001 f943 	bl	8003208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000934 	.word	0x20000934

08001f8c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f90:	4802      	ldr	r0, [pc, #8]	@ (8001f9c <ADC_IRQHandler+0x10>)
 8001f92:	f000 f9ec 	bl	800236e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000694 	.word	0x20000694

08001fa0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fa4:	4802      	ldr	r0, [pc, #8]	@ (8001fb0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001fa6:	f003 fab7 	bl	8005518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200011fc 	.word	0x200011fc

08001fb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fb8:	4802      	ldr	r0, [pc, #8]	@ (8001fc4 <USART1_IRQHandler+0x10>)
 8001fba:	f003 fd65 	bl	8005a88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200007e4 	.word	0x200007e4

08001fc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <USART2_IRQHandler+0x10>)
 8001fce:	f003 fd5b 	bl	8005a88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2000082c 	.word	0x2000082c

08001fdc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fe0:	4802      	ldr	r0, [pc, #8]	@ (8001fec <DMA2_Stream0_IRQHandler+0x10>)
 8001fe2:	f001 f911 	bl	8003208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200006dc 	.word	0x200006dc

08001ff0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ff4:	4802      	ldr	r0, [pc, #8]	@ (8002000 <DMA2_Stream2_IRQHandler+0x10>)
 8001ff6:	f001 f907 	bl	8003208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000874 	.word	0x20000874

08002004 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002008:	4802      	ldr	r0, [pc, #8]	@ (8002014 <DMA2_Stream7_IRQHandler+0x10>)
 800200a:	f001 f8fd 	bl	8003208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200008d4 	.word	0x200008d4

08002018 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return 1;
 800201c:	2301      	movs	r3, #1
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <_kill>:

int _kill(int pid, int sig)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002032:	f006 ff17 	bl	8008e64 <__errno>
 8002036:	4603      	mov	r3, r0
 8002038:	2216      	movs	r2, #22
 800203a:	601a      	str	r2, [r3, #0]
  return -1;
 800203c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <_exit>:

void _exit (int status)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002050:	f04f 31ff 	mov.w	r1, #4294967295
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ffe7 	bl	8002028 <_kill>
  while (1) {}    /* Make sure we hang here */
 800205a:	bf00      	nop
 800205c:	e7fd      	b.n	800205a <_exit+0x12>

0800205e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	e00a      	b.n	8002086 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002070:	f3af 8000 	nop.w
 8002074:	4601      	mov	r1, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	60ba      	str	r2, [r7, #8]
 800207c:	b2ca      	uxtb	r2, r1
 800207e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	3301      	adds	r3, #1
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	429a      	cmp	r2, r3
 800208c:	dbf0      	blt.n	8002070 <_read+0x12>
  }

  return len;
 800208e:	687b      	ldr	r3, [r7, #4]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	e009      	b.n	80020be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	60ba      	str	r2, [r7, #8]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	3301      	adds	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	dbf1      	blt.n	80020aa <_write+0x12>
  }
  return len;
 80020c6:	687b      	ldr	r3, [r7, #4]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_close>:

int _close(int file)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020f8:	605a      	str	r2, [r3, #4]
  return 0;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_isatty>:

int _isatty(int file)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002110:	2301      	movs	r3, #1
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800211e:	b480      	push	{r7}
 8002120:	b085      	sub	sp, #20
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002140:	4a14      	ldr	r2, [pc, #80]	@ (8002194 <_sbrk+0x5c>)
 8002142:	4b15      	ldr	r3, [pc, #84]	@ (8002198 <_sbrk+0x60>)
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800214c:	4b13      	ldr	r3, [pc, #76]	@ (800219c <_sbrk+0x64>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d102      	bne.n	800215a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002154:	4b11      	ldr	r3, [pc, #68]	@ (800219c <_sbrk+0x64>)
 8002156:	4a12      	ldr	r2, [pc, #72]	@ (80021a0 <_sbrk+0x68>)
 8002158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800215a:	4b10      	ldr	r3, [pc, #64]	@ (800219c <_sbrk+0x64>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	429a      	cmp	r2, r3
 8002166:	d207      	bcs.n	8002178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002168:	f006 fe7c 	bl	8008e64 <__errno>
 800216c:	4603      	mov	r3, r0
 800216e:	220c      	movs	r2, #12
 8002170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002172:	f04f 33ff 	mov.w	r3, #4294967295
 8002176:	e009      	b.n	800218c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002178:	4b08      	ldr	r3, [pc, #32]	@ (800219c <_sbrk+0x64>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800217e:	4b07      	ldr	r3, [pc, #28]	@ (800219c <_sbrk+0x64>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	4a05      	ldr	r2, [pc, #20]	@ (800219c <_sbrk+0x64>)
 8002188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800218a:	68fb      	ldr	r3, [r7, #12]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20018000 	.word	0x20018000
 8002198:	00000400 	.word	0x00000400
 800219c:	20001244 	.word	0x20001244
 80021a0:	200050f0 	.word	0x200050f0

080021a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a8:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <SystemInit+0x20>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ae:	4a05      	ldr	r2, [pc, #20]	@ (80021c4 <SystemInit+0x20>)
 80021b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002200 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021cc:	f7ff ffea 	bl	80021a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021d0:	480c      	ldr	r0, [pc, #48]	@ (8002204 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021d2:	490d      	ldr	r1, [pc, #52]	@ (8002208 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021d4:	4a0d      	ldr	r2, [pc, #52]	@ (800220c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d8:	e002      	b.n	80021e0 <LoopCopyDataInit>

080021da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021de:	3304      	adds	r3, #4

080021e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e4:	d3f9      	bcc.n	80021da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002210 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002214 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ec:	e001      	b.n	80021f2 <LoopFillZerobss>

080021ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f0:	3204      	adds	r2, #4

080021f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f4:	d3fb      	bcc.n	80021ee <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80021f6:	f006 fe3b 	bl	8008e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021fa:	f7fe ff8f 	bl	800111c <main>
  bx  lr    
 80021fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002200:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002208:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800220c:	0800bd1c 	.word	0x0800bd1c
  ldr r2, =_sbss
 8002210:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002214:	200050ec 	.word	0x200050ec

08002218 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002218:	e7fe      	b.n	8002218 <DMA1_Stream0_IRQHandler>
	...

0800221c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002220:	4b0e      	ldr	r3, [pc, #56]	@ (800225c <HAL_Init+0x40>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0d      	ldr	r2, [pc, #52]	@ (800225c <HAL_Init+0x40>)
 8002226:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800222a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800222c:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <HAL_Init+0x40>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0a      	ldr	r2, [pc, #40]	@ (800225c <HAL_Init+0x40>)
 8002232:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002238:	4b08      	ldr	r3, [pc, #32]	@ (800225c <HAL_Init+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a07      	ldr	r2, [pc, #28]	@ (800225c <HAL_Init+0x40>)
 800223e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002244:	2003      	movs	r0, #3
 8002246:	f000 fe12 	bl	8002e6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800224a:	200f      	movs	r0, #15
 800224c:	f7ff fdfc 	bl	8001e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002250:	f7ff fb56 	bl	8001900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023c00 	.word	0x40023c00

08002260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002264:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <HAL_IncTick+0x20>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <HAL_IncTick+0x24>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4413      	add	r3, r2
 8002270:	4a04      	ldr	r2, [pc, #16]	@ (8002284 <HAL_IncTick+0x24>)
 8002272:	6013      	str	r3, [r2, #0]
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000008 	.word	0x20000008
 8002284:	20001248 	.word	0x20001248

08002288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return uwTick;
 800228c:	4b03      	ldr	r3, [pc, #12]	@ (800229c <HAL_GetTick+0x14>)
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20001248 	.word	0x20001248

080022a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a8:	f7ff ffee 	bl	8002288 <HAL_GetTick>
 80022ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b8:	d005      	beq.n	80022c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ba:	4b0a      	ldr	r3, [pc, #40]	@ (80022e4 <HAL_Delay+0x44>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022c6:	bf00      	nop
 80022c8:	f7ff ffde 	bl	8002288 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d8f7      	bhi.n	80022c8 <HAL_Delay+0x28>
  {
  }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000008 	.word	0x20000008

080022e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e033      	b.n	8002366 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff fb26 	bl	8001958 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	2b00      	cmp	r3, #0
 8002324:	d118      	bne.n	8002358 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800232e:	f023 0302 	bic.w	r3, r3, #2
 8002332:	f043 0202 	orr.w	r2, r3, #2
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 fb62 	bl	8002a04 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	f023 0303 	bic.w	r3, r3, #3
 800234e:	f043 0201 	orr.w	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	641a      	str	r2, [r3, #64]	@ 0x40
 8002356:	e001      	b.n	800235c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002364:	7bfb      	ldrb	r3, [r7, #15]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d049      	beq.n	8002438 <HAL_ADC_IRQHandler+0xca>
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d046      	beq.n	8002438 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d105      	bne.n	80023c2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d12b      	bne.n	8002428 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d127      	bne.n	8002428 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d006      	beq.n	80023f4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d119      	bne.n	8002428 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0220 	bic.w	r2, r2, #32
 8002402:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002408:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d105      	bne.n	8002428 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	f043 0201 	orr.w	r2, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f9a1 	bl	8002770 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f06f 0212 	mvn.w	r2, #18
 8002436:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002446:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d057      	beq.n	80024fe <HAL_ADC_IRQHandler+0x190>
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d054      	beq.n	80024fe <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	2b00      	cmp	r3, #0
 800245e:	d105      	bne.n	800246c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002464:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d139      	bne.n	80024ee <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002480:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002484:	2b00      	cmp	r3, #0
 8002486:	d006      	beq.n	8002496 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002492:	2b00      	cmp	r3, #0
 8002494:	d12b      	bne.n	80024ee <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d124      	bne.n	80024ee <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d11d      	bne.n	80024ee <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d119      	bne.n	80024ee <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024c8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d105      	bne.n	80024ee <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	f043 0201 	orr.w	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 fc06 	bl	8002d00 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 020c 	mvn.w	r2, #12
 80024fc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800250c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d017      	beq.n	8002544 <HAL_ADC_IRQHandler+0x1d6>
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d014      	beq.n	8002544 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b01      	cmp	r3, #1
 8002526:	d10d      	bne.n	8002544 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f92f 	bl	8002798 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f06f 0201 	mvn.w	r2, #1
 8002542:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002552:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d015      	beq.n	8002586 <HAL_ADC_IRQHandler+0x218>
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d012      	beq.n	8002586 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002564:	f043 0202 	orr.w	r2, r3, #2
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0220 	mvn.w	r2, #32
 8002574:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f918 	bl	80027ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0220 	mvn.w	r2, #32
 8002584:	601a      	str	r2, [r3, #0]
  }
}
 8002586:	bf00      	nop
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_Start_DMA+0x1e>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e0ce      	b.n	800274c <HAL_ADC_Start_DMA+0x1bc>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d018      	beq.n	80025f6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025d4:	4b5f      	ldr	r3, [pc, #380]	@ (8002754 <HAL_ADC_Start_DMA+0x1c4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a5f      	ldr	r2, [pc, #380]	@ (8002758 <HAL_ADC_Start_DMA+0x1c8>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	0c9a      	lsrs	r2, r3, #18
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80025e8:	e002      	b.n	80025f0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f9      	bne.n	80025ea <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002600:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002604:	d107      	bne.n	8002616 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002614:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b01      	cmp	r3, #1
 8002622:	f040 8086 	bne.w	8002732 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800262e:	f023 0301 	bic.w	r3, r3, #1
 8002632:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002644:	2b00      	cmp	r3, #0
 8002646:	d007      	beq.n	8002658 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002650:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002664:	d106      	bne.n	8002674 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266a:	f023 0206 	bic.w	r2, r3, #6
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	645a      	str	r2, [r3, #68]	@ 0x44
 8002672:	e002      	b.n	800267a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002682:	4b36      	ldr	r3, [pc, #216]	@ (800275c <HAL_ADC_Start_DMA+0x1cc>)
 8002684:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800268a:	4a35      	ldr	r2, [pc, #212]	@ (8002760 <HAL_ADC_Start_DMA+0x1d0>)
 800268c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002692:	4a34      	ldr	r2, [pc, #208]	@ (8002764 <HAL_ADC_Start_DMA+0x1d4>)
 8002694:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269a:	4a33      	ldr	r2, [pc, #204]	@ (8002768 <HAL_ADC_Start_DMA+0x1d8>)
 800269c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80026a6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80026b6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026c6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	334c      	adds	r3, #76	@ 0x4c
 80026d2:	4619      	mov	r1, r3
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f000 fcac 	bl	8003034 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10f      	bne.n	8002708 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d129      	bne.n	800274a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002704:	609a      	str	r2, [r3, #8]
 8002706:	e020      	b.n	800274a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a17      	ldr	r2, [pc, #92]	@ (800276c <HAL_ADC_Start_DMA+0x1dc>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d11b      	bne.n	800274a <HAL_ADC_Start_DMA+0x1ba>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d114      	bne.n	800274a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	e00b      	b.n	800274a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	f043 0210 	orr.w	r2, r3, #16
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002742:	f043 0201 	orr.w	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000000 	.word	0x20000000
 8002758:	431bde83 	.word	0x431bde83
 800275c:	40012300 	.word	0x40012300
 8002760:	08002bfd 	.word	0x08002bfd
 8002764:	08002cb7 	.word	0x08002cb7
 8002768:	08002cd3 	.word	0x08002cd3
 800276c:	40012000 	.word	0x40012000

08002770 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x1c>
 80027d8:	2302      	movs	r3, #2
 80027da:	e105      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x228>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b09      	cmp	r3, #9
 80027ea:	d925      	bls.n	8002838 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68d9      	ldr	r1, [r3, #12]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	3b1e      	subs	r3, #30
 8002802:	2207      	movs	r2, #7
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43da      	mvns	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	400a      	ands	r2, r1
 8002810:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68d9      	ldr	r1, [r3, #12]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	b29b      	uxth	r3, r3
 8002822:	4618      	mov	r0, r3
 8002824:	4603      	mov	r3, r0
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4403      	add	r3, r0
 800282a:	3b1e      	subs	r3, #30
 800282c:	409a      	lsls	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	e022      	b.n	800287e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6919      	ldr	r1, [r3, #16]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	2207      	movs	r2, #7
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43da      	mvns	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	400a      	ands	r2, r1
 800285a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6919      	ldr	r1, [r3, #16]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	b29b      	uxth	r3, r3
 800286c:	4618      	mov	r0, r3
 800286e:	4603      	mov	r3, r0
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4403      	add	r3, r0
 8002874:	409a      	lsls	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b06      	cmp	r3, #6
 8002884:	d824      	bhi.n	80028d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	3b05      	subs	r3, #5
 8002898:	221f      	movs	r2, #31
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43da      	mvns	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	400a      	ands	r2, r1
 80028a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	4618      	mov	r0, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	3b05      	subs	r3, #5
 80028c2:	fa00 f203 	lsl.w	r2, r0, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80028ce:	e04c      	b.n	800296a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b0c      	cmp	r3, #12
 80028d6:	d824      	bhi.n	8002922 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	3b23      	subs	r3, #35	@ 0x23
 80028ea:	221f      	movs	r2, #31
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43da      	mvns	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	400a      	ands	r2, r1
 80028f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	4618      	mov	r0, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	3b23      	subs	r3, #35	@ 0x23
 8002914:	fa00 f203 	lsl.w	r2, r0, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002920:	e023      	b.n	800296a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	3b41      	subs	r3, #65	@ 0x41
 8002934:	221f      	movs	r2, #31
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	400a      	ands	r2, r1
 8002942:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	4618      	mov	r0, r3
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	3b41      	subs	r3, #65	@ 0x41
 800295e:	fa00 f203 	lsl.w	r2, r0, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800296a:	4b22      	ldr	r3, [pc, #136]	@ (80029f4 <HAL_ADC_ConfigChannel+0x234>)
 800296c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a21      	ldr	r2, [pc, #132]	@ (80029f8 <HAL_ADC_ConfigChannel+0x238>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d109      	bne.n	800298c <HAL_ADC_ConfigChannel+0x1cc>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b12      	cmp	r3, #18
 800297e:	d105      	bne.n	800298c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a19      	ldr	r2, [pc, #100]	@ (80029f8 <HAL_ADC_ConfigChannel+0x238>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d123      	bne.n	80029de <HAL_ADC_ConfigChannel+0x21e>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b10      	cmp	r3, #16
 800299c:	d003      	beq.n	80029a6 <HAL_ADC_ConfigChannel+0x1e6>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b11      	cmp	r3, #17
 80029a4:	d11b      	bne.n	80029de <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b10      	cmp	r3, #16
 80029b8:	d111      	bne.n	80029de <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029ba:	4b10      	ldr	r3, [pc, #64]	@ (80029fc <HAL_ADC_ConfigChannel+0x23c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a10      	ldr	r2, [pc, #64]	@ (8002a00 <HAL_ADC_ConfigChannel+0x240>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	0c9a      	lsrs	r2, r3, #18
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029d0:	e002      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f9      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	40012300 	.word	0x40012300
 80029f8:	40012000 	.word	0x40012000
 80029fc:	20000000 	.word	0x20000000
 8002a00:	431bde83 	.word	0x431bde83

08002a04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a0c:	4b79      	ldr	r3, [pc, #484]	@ (8002bf4 <ADC_Init+0x1f0>)
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	431a      	orrs	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	021a      	lsls	r2, r3, #8
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6899      	ldr	r1, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a96:	4a58      	ldr	r2, [pc, #352]	@ (8002bf8 <ADC_Init+0x1f4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d022      	beq.n	8002ae2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002aaa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6899      	ldr	r1, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002acc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6899      	ldr	r1, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	e00f      	b.n	8002b02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002af0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b00:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0202 	bic.w	r2, r2, #2
 8002b10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6899      	ldr	r1, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7e1b      	ldrb	r3, [r3, #24]
 8002b1c:	005a      	lsls	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01b      	beq.n	8002b68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b3e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6859      	ldr	r1, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	035a      	lsls	r2, r3, #13
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	e007      	b.n	8002b78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b76:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	051a      	lsls	r2, r3, #20
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6899      	ldr	r1, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bba:	025a      	lsls	r2, r3, #9
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6899      	ldr	r1, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	029a      	lsls	r2, r3, #10
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	609a      	str	r2, [r3, #8]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	40012300 	.word	0x40012300
 8002bf8:	0f000001 	.word	0x0f000001

08002bfc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d13c      	bne.n	8002c90 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d12b      	bne.n	8002c88 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d127      	bne.n	8002c88 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d006      	beq.n	8002c54 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d119      	bne.n	8002c88 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0220 	bic.w	r2, r2, #32
 8002c62:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d105      	bne.n	8002c88 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	f043 0201 	orr.w	r2, r3, #1
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f7ff fd71 	bl	8002770 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c8e:	e00e      	b.n	8002cae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f7ff fd85 	bl	80027ac <HAL_ADC_ErrorCallback>
}
 8002ca2:	e004      	b.n	8002cae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4798      	blx	r3
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f7ff fd5d 	bl	8002784 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cde:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2240      	movs	r2, #64	@ 0x40
 8002ce4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cea:	f043 0204 	orr.w	r2, r3, #4
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f7ff fd5a 	bl	80027ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d24:	4b0c      	ldr	r3, [pc, #48]	@ (8002d58 <__NVIC_SetPriorityGrouping+0x44>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d30:	4013      	ands	r3, r2
 8002d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d46:	4a04      	ldr	r2, [pc, #16]	@ (8002d58 <__NVIC_SetPriorityGrouping+0x44>)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	60d3      	str	r3, [r2, #12]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d60:	4b04      	ldr	r3, [pc, #16]	@ (8002d74 <__NVIC_GetPriorityGrouping+0x18>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	0a1b      	lsrs	r3, r3, #8
 8002d66:	f003 0307 	and.w	r3, r3, #7
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	db0b      	blt.n	8002da2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	f003 021f 	and.w	r2, r3, #31
 8002d90:	4907      	ldr	r1, [pc, #28]	@ (8002db0 <__NVIC_EnableIRQ+0x38>)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	2001      	movs	r0, #1
 8002d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000e100 	.word	0xe000e100

08002db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	6039      	str	r1, [r7, #0]
 8002dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	db0a      	blt.n	8002dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	490c      	ldr	r1, [pc, #48]	@ (8002e00 <__NVIC_SetPriority+0x4c>)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	0112      	lsls	r2, r2, #4
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ddc:	e00a      	b.n	8002df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4908      	ldr	r1, [pc, #32]	@ (8002e04 <__NVIC_SetPriority+0x50>)
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	3b04      	subs	r3, #4
 8002dec:	0112      	lsls	r2, r2, #4
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	440b      	add	r3, r1
 8002df2:	761a      	strb	r2, [r3, #24]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000e100 	.word	0xe000e100
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b089      	sub	sp, #36	@ 0x24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f1c3 0307 	rsb	r3, r3, #7
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	bf28      	it	cs
 8002e26:	2304      	movcs	r3, #4
 8002e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	2b06      	cmp	r3, #6
 8002e30:	d902      	bls.n	8002e38 <NVIC_EncodePriority+0x30>
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3b03      	subs	r3, #3
 8002e36:	e000      	b.n	8002e3a <NVIC_EncodePriority+0x32>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43da      	mvns	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e50:	f04f 31ff 	mov.w	r1, #4294967295
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5a:	43d9      	mvns	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e60:	4313      	orrs	r3, r2
         );
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3724      	adds	r7, #36	@ 0x24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff ff4c 	bl	8002d14 <__NVIC_SetPriorityGrouping>
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e96:	f7ff ff61 	bl	8002d5c <__NVIC_GetPriorityGrouping>
 8002e9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	6978      	ldr	r0, [r7, #20]
 8002ea2:	f7ff ffb1 	bl	8002e08 <NVIC_EncodePriority>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ff80 	bl	8002db4 <__NVIC_SetPriority>
}
 8002eb4:	bf00      	nop
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff ff54 	bl	8002d78 <__NVIC_EnableIRQ>
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ee4:	f7ff f9d0 	bl	8002288 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e099      	b.n	8003028 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f14:	e00f      	b.n	8002f36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f16:	f7ff f9b7 	bl	8002288 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b05      	cmp	r3, #5
 8002f22:	d908      	bls.n	8002f36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2220      	movs	r2, #32
 8002f28:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e078      	b.n	8003028 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1e8      	bne.n	8002f16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4b38      	ldr	r3, [pc, #224]	@ (8003030 <HAL_DMA_Init+0x158>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d107      	bne.n	8002fa0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f023 0307 	bic.w	r3, r3, #7
 8002fb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d117      	bne.n	8002ffa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00e      	beq.n	8002ffa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fb01 	bl	80035e4 <DMA_CheckFifoParam>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2240      	movs	r2, #64	@ 0x40
 8002fec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e016      	b.n	8003028 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fab8 	bl	8003578 <DMA_CalcBaseAndBitshift>
 8003008:	4603      	mov	r3, r0
 800300a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003010:	223f      	movs	r2, #63	@ 0x3f
 8003012:	409a      	lsls	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	f010803f 	.word	0xf010803f

08003034 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_DMA_Start_IT+0x26>
 8003056:	2302      	movs	r3, #2
 8003058:	e040      	b.n	80030dc <HAL_DMA_Start_IT+0xa8>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d12f      	bne.n	80030ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2202      	movs	r2, #2
 8003072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 fa4a 	bl	800351c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308c:	223f      	movs	r2, #63	@ 0x3f
 800308e:	409a      	lsls	r2, r3
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0216 	orr.w	r2, r2, #22
 80030a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0208 	orr.w	r2, r2, #8
 80030ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	e005      	b.n	80030da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030d6:	2302      	movs	r3, #2
 80030d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030da:	7dfb      	ldrb	r3, [r7, #23]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030f2:	f7ff f8c9 	bl	8002288 <HAL_GetTick>
 80030f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d008      	beq.n	8003116 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2280      	movs	r2, #128	@ 0x80
 8003108:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e052      	b.n	80031bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0216 	bic.w	r2, r2, #22
 8003124:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695a      	ldr	r2, [r3, #20]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003134:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d103      	bne.n	8003146 <HAL_DMA_Abort+0x62>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003142:	2b00      	cmp	r3, #0
 8003144:	d007      	beq.n	8003156 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0208 	bic.w	r2, r2, #8
 8003154:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0201 	bic.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003166:	e013      	b.n	8003190 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003168:	f7ff f88e 	bl	8002288 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b05      	cmp	r3, #5
 8003174:	d90c      	bls.n	8003190 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2220      	movs	r2, #32
 800317a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2203      	movs	r2, #3
 8003180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e015      	b.n	80031bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1e4      	bne.n	8003168 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a2:	223f      	movs	r2, #63	@ 0x3f
 80031a4:	409a      	lsls	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d004      	beq.n	80031e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2280      	movs	r2, #128	@ 0x80
 80031dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e00c      	b.n	80031fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2205      	movs	r2, #5
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0201 	bic.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003214:	4b8e      	ldr	r3, [pc, #568]	@ (8003450 <HAL_DMA_IRQHandler+0x248>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a8e      	ldr	r2, [pc, #568]	@ (8003454 <HAL_DMA_IRQHandler+0x24c>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	0a9b      	lsrs	r3, r3, #10
 8003220:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003226:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003232:	2208      	movs	r2, #8
 8003234:	409a      	lsls	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d01a      	beq.n	8003274 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d013      	beq.n	8003274 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0204 	bic.w	r2, r2, #4
 800325a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003260:	2208      	movs	r2, #8
 8003262:	409a      	lsls	r2, r3
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326c:	f043 0201 	orr.w	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003278:	2201      	movs	r2, #1
 800327a:	409a      	lsls	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d012      	beq.n	80032aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00b      	beq.n	80032aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003296:	2201      	movs	r2, #1
 8003298:	409a      	lsls	r2, r3
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a2:	f043 0202 	orr.w	r2, r3, #2
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ae:	2204      	movs	r2, #4
 80032b0:	409a      	lsls	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d012      	beq.n	80032e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00b      	beq.n	80032e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032cc:	2204      	movs	r2, #4
 80032ce:	409a      	lsls	r2, r3
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d8:	f043 0204 	orr.w	r2, r3, #4
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e4:	2210      	movs	r2, #16
 80032e6:	409a      	lsls	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d043      	beq.n	8003378 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d03c      	beq.n	8003378 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003302:	2210      	movs	r2, #16
 8003304:	409a      	lsls	r2, r3
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d018      	beq.n	800334a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d108      	bne.n	8003338 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d024      	beq.n	8003378 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
 8003336:	e01f      	b.n	8003378 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01b      	beq.n	8003378 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	4798      	blx	r3
 8003348:	e016      	b.n	8003378 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d107      	bne.n	8003368 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0208 	bic.w	r2, r2, #8
 8003366:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337c:	2220      	movs	r2, #32
 800337e:	409a      	lsls	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 808f 	beq.w	80034a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8087 	beq.w	80034a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339e:	2220      	movs	r2, #32
 80033a0:	409a      	lsls	r2, r3
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b05      	cmp	r3, #5
 80033b0:	d136      	bne.n	8003420 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0216 	bic.w	r2, r2, #22
 80033c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d103      	bne.n	80033e2 <HAL_DMA_IRQHandler+0x1da>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0208 	bic.w	r2, r2, #8
 80033f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f6:	223f      	movs	r2, #63	@ 0x3f
 80033f8:	409a      	lsls	r2, r3
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003412:	2b00      	cmp	r3, #0
 8003414:	d07e      	beq.n	8003514 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	4798      	blx	r3
        }
        return;
 800341e:	e079      	b.n	8003514 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d01d      	beq.n	800346a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10d      	bne.n	8003458 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003440:	2b00      	cmp	r3, #0
 8003442:	d031      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4798      	blx	r3
 800344c:	e02c      	b.n	80034a8 <HAL_DMA_IRQHandler+0x2a0>
 800344e:	bf00      	nop
 8003450:	20000000 	.word	0x20000000
 8003454:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d023      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4798      	blx	r3
 8003468:	e01e      	b.n	80034a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10f      	bne.n	8003498 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0210 	bic.w	r2, r2, #16
 8003486:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d032      	beq.n	8003516 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d022      	beq.n	8003502 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2205      	movs	r2, #5
 80034c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	3301      	adds	r3, #1
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d307      	bcc.n	80034f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f2      	bne.n	80034d4 <HAL_DMA_IRQHandler+0x2cc>
 80034ee:	e000      	b.n	80034f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	4798      	blx	r3
 8003512:	e000      	b.n	8003516 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003514:	bf00      	nop
    }
  }
}
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003538:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b40      	cmp	r3, #64	@ 0x40
 8003548:	d108      	bne.n	800355c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800355a:	e007      	b.n	800356c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	60da      	str	r2, [r3, #12]
}
 800356c:	bf00      	nop
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	3b10      	subs	r3, #16
 8003588:	4a14      	ldr	r2, [pc, #80]	@ (80035dc <DMA_CalcBaseAndBitshift+0x64>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003592:	4a13      	ldr	r2, [pc, #76]	@ (80035e0 <DMA_CalcBaseAndBitshift+0x68>)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d909      	bls.n	80035ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035ae:	f023 0303 	bic.w	r3, r3, #3
 80035b2:	1d1a      	adds	r2, r3, #4
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80035b8:	e007      	b.n	80035ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035c2:	f023 0303 	bic.w	r3, r3, #3
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	aaaaaaab 	.word	0xaaaaaaab
 80035e0:	0800b97c 	.word	0x0800b97c

080035e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d11f      	bne.n	800363e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d856      	bhi.n	80036b2 <DMA_CheckFifoParam+0xce>
 8003604:	a201      	add	r2, pc, #4	@ (adr r2, 800360c <DMA_CheckFifoParam+0x28>)
 8003606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360a:	bf00      	nop
 800360c:	0800361d 	.word	0x0800361d
 8003610:	0800362f 	.word	0x0800362f
 8003614:	0800361d 	.word	0x0800361d
 8003618:	080036b3 	.word	0x080036b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003620:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d046      	beq.n	80036b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362c:	e043      	b.n	80036b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003632:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003636:	d140      	bne.n	80036ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800363c:	e03d      	b.n	80036ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003646:	d121      	bne.n	800368c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b03      	cmp	r3, #3
 800364c:	d837      	bhi.n	80036be <DMA_CheckFifoParam+0xda>
 800364e:	a201      	add	r2, pc, #4	@ (adr r2, 8003654 <DMA_CheckFifoParam+0x70>)
 8003650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003654:	08003665 	.word	0x08003665
 8003658:	0800366b 	.word	0x0800366b
 800365c:	08003665 	.word	0x08003665
 8003660:	0800367d 	.word	0x0800367d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
      break;
 8003668:	e030      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d025      	beq.n	80036c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800367a:	e022      	b.n	80036c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003680:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003684:	d11f      	bne.n	80036c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800368a:	e01c      	b.n	80036c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d903      	bls.n	800369a <DMA_CheckFifoParam+0xb6>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d003      	beq.n	80036a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003698:	e018      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
      break;
 800369e:	e015      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00e      	beq.n	80036ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
      break;
 80036b0:	e00b      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      break;
 80036b2:	bf00      	nop
 80036b4:	e00a      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036b6:	bf00      	nop
 80036b8:	e008      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036ba:	bf00      	nop
 80036bc:	e006      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036be:	bf00      	nop
 80036c0:	e004      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036c2:	bf00      	nop
 80036c4:	e002      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;   
 80036c6:	bf00      	nop
 80036c8:	e000      	b.n	80036cc <DMA_CheckFifoParam+0xe8>
      break;
 80036ca:	bf00      	nop
    }
  } 
  
  return status; 
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop

080036dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036dc:	b480      	push	{r7}
 80036de:	b089      	sub	sp, #36	@ 0x24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	e159      	b.n	80039ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036f8:	2201      	movs	r2, #1
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	429a      	cmp	r2, r3
 8003712:	f040 8148 	bne.w	80039a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b01      	cmp	r3, #1
 8003720:	d005      	beq.n	800372e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800372a:	2b02      	cmp	r3, #2
 800372c:	d130      	bne.n	8003790 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	2203      	movs	r2, #3
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4013      	ands	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4313      	orrs	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003764:	2201      	movs	r2, #1
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 0201 	and.w	r2, r3, #1
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	2b03      	cmp	r3, #3
 800379a:	d017      	beq.n	80037cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2203      	movs	r2, #3
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d123      	bne.n	8003820 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	08da      	lsrs	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3208      	adds	r2, #8
 80037e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	220f      	movs	r2, #15
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	08da      	lsrs	r2, r3, #3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3208      	adds	r2, #8
 800381a:	69b9      	ldr	r1, [r7, #24]
 800381c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	2203      	movs	r2, #3
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4013      	ands	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0203 	and.w	r2, r3, #3
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80a2 	beq.w	80039a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	4b57      	ldr	r3, [pc, #348]	@ (80039c4 <HAL_GPIO_Init+0x2e8>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386a:	4a56      	ldr	r2, [pc, #344]	@ (80039c4 <HAL_GPIO_Init+0x2e8>)
 800386c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003870:	6453      	str	r3, [r2, #68]	@ 0x44
 8003872:	4b54      	ldr	r3, [pc, #336]	@ (80039c4 <HAL_GPIO_Init+0x2e8>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800387e:	4a52      	ldr	r2, [pc, #328]	@ (80039c8 <HAL_GPIO_Init+0x2ec>)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	089b      	lsrs	r3, r3, #2
 8003884:	3302      	adds	r3, #2
 8003886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	220f      	movs	r2, #15
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4013      	ands	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a49      	ldr	r2, [pc, #292]	@ (80039cc <HAL_GPIO_Init+0x2f0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d019      	beq.n	80038de <HAL_GPIO_Init+0x202>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a48      	ldr	r2, [pc, #288]	@ (80039d0 <HAL_GPIO_Init+0x2f4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d013      	beq.n	80038da <HAL_GPIO_Init+0x1fe>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a47      	ldr	r2, [pc, #284]	@ (80039d4 <HAL_GPIO_Init+0x2f8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00d      	beq.n	80038d6 <HAL_GPIO_Init+0x1fa>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a46      	ldr	r2, [pc, #280]	@ (80039d8 <HAL_GPIO_Init+0x2fc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d007      	beq.n	80038d2 <HAL_GPIO_Init+0x1f6>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a45      	ldr	r2, [pc, #276]	@ (80039dc <HAL_GPIO_Init+0x300>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d101      	bne.n	80038ce <HAL_GPIO_Init+0x1f2>
 80038ca:	2304      	movs	r3, #4
 80038cc:	e008      	b.n	80038e0 <HAL_GPIO_Init+0x204>
 80038ce:	2307      	movs	r3, #7
 80038d0:	e006      	b.n	80038e0 <HAL_GPIO_Init+0x204>
 80038d2:	2303      	movs	r3, #3
 80038d4:	e004      	b.n	80038e0 <HAL_GPIO_Init+0x204>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e002      	b.n	80038e0 <HAL_GPIO_Init+0x204>
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <HAL_GPIO_Init+0x204>
 80038de:	2300      	movs	r3, #0
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	f002 0203 	and.w	r2, r2, #3
 80038e6:	0092      	lsls	r2, r2, #2
 80038e8:	4093      	lsls	r3, r2
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038f0:	4935      	ldr	r1, [pc, #212]	@ (80039c8 <HAL_GPIO_Init+0x2ec>)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	089b      	lsrs	r3, r3, #2
 80038f6:	3302      	adds	r3, #2
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038fe:	4b38      	ldr	r3, [pc, #224]	@ (80039e0 <HAL_GPIO_Init+0x304>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003922:	4a2f      	ldr	r2, [pc, #188]	@ (80039e0 <HAL_GPIO_Init+0x304>)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003928:	4b2d      	ldr	r3, [pc, #180]	@ (80039e0 <HAL_GPIO_Init+0x304>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800394c:	4a24      	ldr	r2, [pc, #144]	@ (80039e0 <HAL_GPIO_Init+0x304>)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003952:	4b23      	ldr	r3, [pc, #140]	@ (80039e0 <HAL_GPIO_Init+0x304>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	43db      	mvns	r3, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4013      	ands	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003976:	4a1a      	ldr	r2, [pc, #104]	@ (80039e0 <HAL_GPIO_Init+0x304>)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800397c:	4b18      	ldr	r3, [pc, #96]	@ (80039e0 <HAL_GPIO_Init+0x304>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	43db      	mvns	r3, r3
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4013      	ands	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039a0:	4a0f      	ldr	r2, [pc, #60]	@ (80039e0 <HAL_GPIO_Init+0x304>)
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	3301      	adds	r3, #1
 80039aa:	61fb      	str	r3, [r7, #28]
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	2b0f      	cmp	r3, #15
 80039b0:	f67f aea2 	bls.w	80036f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop
 80039b8:	3724      	adds	r7, #36	@ 0x24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40023800 	.word	0x40023800
 80039c8:	40013800 	.word	0x40013800
 80039cc:	40020000 	.word	0x40020000
 80039d0:	40020400 	.word	0x40020400
 80039d4:	40020800 	.word	0x40020800
 80039d8:	40020c00 	.word	0x40020c00
 80039dc:	40021000 	.word	0x40021000
 80039e0:	40013c00 	.word	0x40013c00

080039e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	807b      	strh	r3, [r7, #2]
 80039f0:	4613      	mov	r3, r2
 80039f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039f4:	787b      	ldrb	r3, [r7, #1]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039fa:	887a      	ldrh	r2, [r7, #2]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a00:	e003      	b.n	8003a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a02:	887b      	ldrh	r3, [r7, #2]
 8003a04:	041a      	lsls	r2, r3, #16
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	619a      	str	r2, [r3, #24]
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e12b      	b.n	8003c82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7fe f80a 	bl	8001a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2224      	movs	r2, #36	@ 0x24
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0201 	bic.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a7c:	f001 fc36 	bl	80052ec <HAL_RCC_GetPCLK1Freq>
 8003a80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	4a81      	ldr	r2, [pc, #516]	@ (8003c8c <HAL_I2C_Init+0x274>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d807      	bhi.n	8003a9c <HAL_I2C_Init+0x84>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4a80      	ldr	r2, [pc, #512]	@ (8003c90 <HAL_I2C_Init+0x278>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	bf94      	ite	ls
 8003a94:	2301      	movls	r3, #1
 8003a96:	2300      	movhi	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	e006      	b.n	8003aaa <HAL_I2C_Init+0x92>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4a7d      	ldr	r2, [pc, #500]	@ (8003c94 <HAL_I2C_Init+0x27c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	bf94      	ite	ls
 8003aa4:	2301      	movls	r3, #1
 8003aa6:	2300      	movhi	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e0e7      	b.n	8003c82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4a78      	ldr	r2, [pc, #480]	@ (8003c98 <HAL_I2C_Init+0x280>)
 8003ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aba:	0c9b      	lsrs	r3, r3, #18
 8003abc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4a6a      	ldr	r2, [pc, #424]	@ (8003c8c <HAL_I2C_Init+0x274>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d802      	bhi.n	8003aec <HAL_I2C_Init+0xd4>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	e009      	b.n	8003b00 <HAL_I2C_Init+0xe8>
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003af2:	fb02 f303 	mul.w	r3, r2, r3
 8003af6:	4a69      	ldr	r2, [pc, #420]	@ (8003c9c <HAL_I2C_Init+0x284>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	099b      	lsrs	r3, r3, #6
 8003afe:	3301      	adds	r3, #1
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	495c      	ldr	r1, [pc, #368]	@ (8003c8c <HAL_I2C_Init+0x274>)
 8003b1c:	428b      	cmp	r3, r1
 8003b1e:	d819      	bhi.n	8003b54 <HAL_I2C_Init+0x13c>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	1e59      	subs	r1, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b2e:	1c59      	adds	r1, r3, #1
 8003b30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b34:	400b      	ands	r3, r1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_I2C_Init+0x138>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1e59      	subs	r1, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b48:	3301      	adds	r3, #1
 8003b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4e:	e051      	b.n	8003bf4 <HAL_I2C_Init+0x1dc>
 8003b50:	2304      	movs	r3, #4
 8003b52:	e04f      	b.n	8003bf4 <HAL_I2C_Init+0x1dc>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d111      	bne.n	8003b80 <HAL_I2C_Init+0x168>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1e58      	subs	r0, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6859      	ldr	r1, [r3, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	440b      	add	r3, r1
 8003b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b6e:	3301      	adds	r3, #1
 8003b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	bf0c      	ite	eq
 8003b78:	2301      	moveq	r3, #1
 8003b7a:	2300      	movne	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	e012      	b.n	8003ba6 <HAL_I2C_Init+0x18e>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	1e58      	subs	r0, r3, #1
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6859      	ldr	r1, [r3, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	0099      	lsls	r1, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b96:	3301      	adds	r3, #1
 8003b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf0c      	ite	eq
 8003ba0:	2301      	moveq	r3, #1
 8003ba2:	2300      	movne	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_I2C_Init+0x196>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e022      	b.n	8003bf4 <HAL_I2C_Init+0x1dc>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10e      	bne.n	8003bd4 <HAL_I2C_Init+0x1bc>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1e58      	subs	r0, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6859      	ldr	r1, [r3, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	440b      	add	r3, r1
 8003bc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bc8:	3301      	adds	r3, #1
 8003bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bd2:	e00f      	b.n	8003bf4 <HAL_I2C_Init+0x1dc>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1e58      	subs	r0, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	0099      	lsls	r1, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bea:	3301      	adds	r3, #1
 8003bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	6809      	ldr	r1, [r1, #0]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69da      	ldr	r2, [r3, #28]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6911      	ldr	r1, [r2, #16]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	68d2      	ldr	r2, [r2, #12]
 8003c2e:	4311      	orrs	r1, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	430b      	orrs	r3, r1
 8003c36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	000186a0 	.word	0x000186a0
 8003c90:	001e847f 	.word	0x001e847f
 8003c94:	003d08ff 	.word	0x003d08ff
 8003c98:	431bde83 	.word	0x431bde83
 8003c9c:	10624dd3 	.word	0x10624dd3

08003ca0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	607a      	str	r2, [r7, #4]
 8003caa:	461a      	mov	r2, r3
 8003cac:	460b      	mov	r3, r1
 8003cae:	817b      	strh	r3, [r7, #10]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cb4:	f7fe fae8 	bl	8002288 <HAL_GetTick>
 8003cb8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	f040 80e0 	bne.w	8003e88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	2319      	movs	r3, #25
 8003cce:	2201      	movs	r2, #1
 8003cd0:	4970      	ldr	r1, [pc, #448]	@ (8003e94 <HAL_I2C_Master_Transmit+0x1f4>)
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fc64 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e0d3      	b.n	8003e8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_I2C_Master_Transmit+0x50>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e0cc      	b.n	8003e8a <HAL_I2C_Master_Transmit+0x1ea>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d007      	beq.n	8003d16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0201 	orr.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2221      	movs	r2, #33	@ 0x21
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2210      	movs	r2, #16
 8003d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	893a      	ldrh	r2, [r7, #8]
 8003d46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4a50      	ldr	r2, [pc, #320]	@ (8003e98 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d58:	8979      	ldrh	r1, [r7, #10]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	6a3a      	ldr	r2, [r7, #32]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 face 	bl	8004300 <I2C_MasterRequestWrite>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e08d      	b.n	8003e8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d84:	e066      	b.n	8003e54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	6a39      	ldr	r1, [r7, #32]
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 fd22 	bl	80047d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00d      	beq.n	8003db2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d107      	bne.n	8003dae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e06b      	b.n	8003e8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db6:	781a      	ldrb	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d11b      	bne.n	8003e28 <HAL_I2C_Master_Transmit+0x188>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d017      	beq.n	8003e28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	781a      	ldrb	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	6a39      	ldr	r1, [r7, #32]
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 fd19 	bl	8004864 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00d      	beq.n	8003e54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d107      	bne.n	8003e50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e01a      	b.n	8003e8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d194      	bne.n	8003d86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	e000      	b.n	8003e8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e88:	2302      	movs	r3, #2
  }
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	00100002 	.word	0x00100002
 8003e98:	ffff0000 	.word	0xffff0000

08003e9c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08c      	sub	sp, #48	@ 0x30
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	817b      	strh	r3, [r7, #10]
 8003eac:	4613      	mov	r3, r2
 8003eae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eb0:	f7fe f9ea 	bl	8002288 <HAL_GetTick>
 8003eb4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b20      	cmp	r3, #32
 8003ec0:	f040 8217 	bne.w	80042f2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	2319      	movs	r3, #25
 8003eca:	2201      	movs	r2, #1
 8003ecc:	497c      	ldr	r1, [pc, #496]	@ (80040c0 <HAL_I2C_Master_Receive+0x224>)
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 fb66 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003eda:	2302      	movs	r3, #2
 8003edc:	e20a      	b.n	80042f4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_I2C_Master_Receive+0x50>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e203      	b.n	80042f4 <HAL_I2C_Master_Receive+0x458>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d007      	beq.n	8003f12 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0201 	orr.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2222      	movs	r2, #34	@ 0x22
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2210      	movs	r2, #16
 8003f2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	893a      	ldrh	r2, [r7, #8]
 8003f42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4a5c      	ldr	r2, [pc, #368]	@ (80040c4 <HAL_I2C_Master_Receive+0x228>)
 8003f52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f54:	8979      	ldrh	r1, [r7, #10]
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fa52 	bl	8004404 <I2C_MasterRequestRead>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e1c4      	b.n	80042f4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d113      	bne.n	8003f9a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f72:	2300      	movs	r3, #0
 8003f74:	623b      	str	r3, [r7, #32]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	623b      	str	r3, [r7, #32]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	623b      	str	r3, [r7, #32]
 8003f86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	e198      	b.n	80042cc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d11b      	bne.n	8003fda <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61fb      	str	r3, [r7, #28]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	e178      	b.n	80042cc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d11b      	bne.n	800401a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ff0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004000:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004002:	2300      	movs	r3, #0
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	e158      	b.n	80042cc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004028:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004040:	e144      	b.n	80042cc <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004046:	2b03      	cmp	r3, #3
 8004048:	f200 80f1 	bhi.w	800422e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004050:	2b01      	cmp	r3, #1
 8004052:	d123      	bne.n	800409c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004056:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 fc4b 	bl	80048f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e145      	b.n	80042f4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004090:	b29b      	uxth	r3, r3
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800409a:	e117      	b.n	80042cc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d14e      	bne.n	8004142 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040aa:	2200      	movs	r2, #0
 80040ac:	4906      	ldr	r1, [pc, #24]	@ (80040c8 <HAL_I2C_Master_Receive+0x22c>)
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fa76 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d008      	beq.n	80040cc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e11a      	b.n	80042f4 <HAL_I2C_Master_Receive+0x458>
 80040be:	bf00      	nop
 80040c0:	00100002 	.word	0x00100002
 80040c4:	ffff0000 	.word	0xffff0000
 80040c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004140:	e0c4      	b.n	80042cc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004148:	2200      	movs	r2, #0
 800414a:	496c      	ldr	r1, [pc, #432]	@ (80042fc <HAL_I2C_Master_Receive+0x460>)
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fa27 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0cb      	b.n	80042f4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800416a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a4:	2200      	movs	r2, #0
 80041a6:	4955      	ldr	r1, [pc, #340]	@ (80042fc <HAL_I2C_Master_Receive+0x460>)
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f9f9 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e09d      	b.n	80042f4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800422c:	e04e      	b.n	80042cc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800422e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004230:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 fb5e 	bl	80048f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e058      	b.n	80042f4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b04      	cmp	r3, #4
 8004280:	d124      	bne.n	80042cc <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004286:	2b03      	cmp	r3, #3
 8004288:	d107      	bne.n	800429a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004298:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f47f aeb6 	bne.w	8004042 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e000      	b.n	80042f4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80042f2:	2302      	movs	r3, #2
  }
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3728      	adds	r7, #40	@ 0x28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	00010004 	.word	0x00010004

08004300 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af02      	add	r7, sp, #8
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	607a      	str	r2, [r7, #4]
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	460b      	mov	r3, r1
 800430e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004314:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d006      	beq.n	800432a <I2C_MasterRequestWrite+0x2a>
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d003      	beq.n	800432a <I2C_MasterRequestWrite+0x2a>
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004328:	d108      	bne.n	800433c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	e00b      	b.n	8004354 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004340:	2b12      	cmp	r3, #18
 8004342:	d107      	bne.n	8004354 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004352:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f91d 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00d      	beq.n	8004388 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800437a:	d103      	bne.n	8004384 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004382:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e035      	b.n	80043f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004390:	d108      	bne.n	80043a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004392:	897b      	ldrh	r3, [r7, #10]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043a0:	611a      	str	r2, [r3, #16]
 80043a2:	e01b      	b.n	80043dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043a4:	897b      	ldrh	r3, [r7, #10]
 80043a6:	11db      	asrs	r3, r3, #7
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f003 0306 	and.w	r3, r3, #6
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f063 030f 	orn	r3, r3, #15
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	490e      	ldr	r1, [pc, #56]	@ (80043fc <I2C_MasterRequestWrite+0xfc>)
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f966 	bl	8004694 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e010      	b.n	80043f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043d2:	897b      	ldrh	r3, [r7, #10]
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	4907      	ldr	r1, [pc, #28]	@ (8004400 <I2C_MasterRequestWrite+0x100>)
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f956 	bl	8004694 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	00010008 	.word	0x00010008
 8004400:	00010002 	.word	0x00010002

08004404 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	607a      	str	r2, [r7, #4]
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	460b      	mov	r3, r1
 8004412:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004418:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004428:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2b08      	cmp	r3, #8
 800442e:	d006      	beq.n	800443e <I2C_MasterRequestRead+0x3a>
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d003      	beq.n	800443e <I2C_MasterRequestRead+0x3a>
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800443c:	d108      	bne.n	8004450 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	e00b      	b.n	8004468 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	2b11      	cmp	r3, #17
 8004456:	d107      	bne.n	8004468 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004466:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f893 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00d      	beq.n	800449c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800448e:	d103      	bne.n	8004498 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004496:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e079      	b.n	8004590 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044a4:	d108      	bne.n	80044b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044a6:	897b      	ldrh	r3, [r7, #10]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	611a      	str	r2, [r3, #16]
 80044b6:	e05f      	b.n	8004578 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044b8:	897b      	ldrh	r3, [r7, #10]
 80044ba:	11db      	asrs	r3, r3, #7
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	f003 0306 	and.w	r3, r3, #6
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	f063 030f 	orn	r3, r3, #15
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	4930      	ldr	r1, [pc, #192]	@ (8004598 <I2C_MasterRequestRead+0x194>)
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f8dc 	bl	8004694 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e054      	b.n	8004590 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044e6:	897b      	ldrh	r3, [r7, #10]
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4929      	ldr	r1, [pc, #164]	@ (800459c <I2C_MasterRequestRead+0x198>)
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 f8cc 	bl	8004694 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e044      	b.n	8004590 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004506:	2300      	movs	r3, #0
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	613b      	str	r3, [r7, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800452a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f831 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00d      	beq.n	8004560 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004552:	d103      	bne.n	800455c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800455a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e017      	b.n	8004590 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004560:	897b      	ldrh	r3, [r7, #10]
 8004562:	11db      	asrs	r3, r3, #7
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f003 0306 	and.w	r3, r3, #6
 800456a:	b2db      	uxtb	r3, r3
 800456c:	f063 030e 	orn	r3, r3, #14
 8004570:	b2da      	uxtb	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	4907      	ldr	r1, [pc, #28]	@ (800459c <I2C_MasterRequestRead+0x198>)
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 f888 	bl	8004694 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	00010008 	.word	0x00010008
 800459c:	00010002 	.word	0x00010002

080045a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045b0:	e048      	b.n	8004644 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d044      	beq.n	8004644 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ba:	f7fd fe65 	bl	8002288 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d302      	bcc.n	80045d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d139      	bne.n	8004644 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	0c1b      	lsrs	r3, r3, #16
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d10d      	bne.n	80045f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	43da      	mvns	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4013      	ands	r3, r2
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bf0c      	ite	eq
 80045ec:	2301      	moveq	r3, #1
 80045ee:	2300      	movne	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	461a      	mov	r2, r3
 80045f4:	e00c      	b.n	8004610 <I2C_WaitOnFlagUntilTimeout+0x70>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	43da      	mvns	r2, r3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4013      	ands	r3, r2
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	bf0c      	ite	eq
 8004608:	2301      	moveq	r3, #1
 800460a:	2300      	movne	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	429a      	cmp	r2, r3
 8004614:	d116      	bne.n	8004644 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004630:	f043 0220 	orr.w	r2, r3, #32
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e023      	b.n	800468c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	0c1b      	lsrs	r3, r3, #16
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b01      	cmp	r3, #1
 800464c:	d10d      	bne.n	800466a <I2C_WaitOnFlagUntilTimeout+0xca>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	43da      	mvns	r2, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4013      	ands	r3, r2
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	461a      	mov	r2, r3
 8004668:	e00c      	b.n	8004684 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	43da      	mvns	r2, r3
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4013      	ands	r3, r2
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	429a      	cmp	r2, r3
 8004688:	d093      	beq.n	80045b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046a2:	e071      	b.n	8004788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046b2:	d123      	bne.n	80046fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e8:	f043 0204 	orr.w	r2, r3, #4
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e067      	b.n	80047cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004702:	d041      	beq.n	8004788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004704:	f7fd fdc0 	bl	8002288 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	429a      	cmp	r2, r3
 8004712:	d302      	bcc.n	800471a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d136      	bne.n	8004788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	0c1b      	lsrs	r3, r3, #16
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b01      	cmp	r3, #1
 8004722:	d10c      	bne.n	800473e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	43da      	mvns	r2, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4013      	ands	r3, r2
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	bf14      	ite	ne
 8004736:	2301      	movne	r3, #1
 8004738:	2300      	moveq	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	e00b      	b.n	8004756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	43da      	mvns	r2, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	4013      	ands	r3, r2
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	bf14      	ite	ne
 8004750:	2301      	movne	r3, #1
 8004752:	2300      	moveq	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d016      	beq.n	8004788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004774:	f043 0220 	orr.w	r2, r3, #32
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e021      	b.n	80047cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	0c1b      	lsrs	r3, r3, #16
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b01      	cmp	r3, #1
 8004790:	d10c      	bne.n	80047ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	43da      	mvns	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	4013      	ands	r3, r2
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e00b      	b.n	80047c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	43da      	mvns	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4013      	ands	r3, r2
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bf14      	ite	ne
 80047be:	2301      	movne	r3, #1
 80047c0:	2300      	moveq	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f47f af6d 	bne.w	80046a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047e0:	e034      	b.n	800484c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f8e3 	bl	80049ae <I2C_IsAcknowledgeFailed>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e034      	b.n	800485c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d028      	beq.n	800484c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fa:	f7fd fd45 	bl	8002288 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	429a      	cmp	r2, r3
 8004808:	d302      	bcc.n	8004810 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d11d      	bne.n	800484c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800481a:	2b80      	cmp	r3, #128	@ 0x80
 800481c:	d016      	beq.n	800484c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004838:	f043 0220 	orr.w	r2, r3, #32
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e007      	b.n	800485c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004856:	2b80      	cmp	r3, #128	@ 0x80
 8004858:	d1c3      	bne.n	80047e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004870:	e034      	b.n	80048dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f89b 	bl	80049ae <I2C_IsAcknowledgeFailed>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e034      	b.n	80048ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004888:	d028      	beq.n	80048dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488a:	f7fd fcfd 	bl	8002288 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	429a      	cmp	r2, r3
 8004898:	d302      	bcc.n	80048a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d11d      	bne.n	80048dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d016      	beq.n	80048dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c8:	f043 0220 	orr.w	r2, r3, #32
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e007      	b.n	80048ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d1c3      	bne.n	8004872 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004900:	e049      	b.n	8004996 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b10      	cmp	r3, #16
 800490e:	d119      	bne.n	8004944 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0210 	mvn.w	r2, #16
 8004918:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e030      	b.n	80049a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004944:	f7fd fca0 	bl	8002288 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	429a      	cmp	r2, r3
 8004952:	d302      	bcc.n	800495a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d11d      	bne.n	8004996 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004964:	2b40      	cmp	r3, #64	@ 0x40
 8004966:	d016      	beq.n	8004996 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2220      	movs	r2, #32
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004982:	f043 0220 	orr.w	r2, r3, #32
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e007      	b.n	80049a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a0:	2b40      	cmp	r3, #64	@ 0x40
 80049a2:	d1ae      	bne.n	8004902 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c4:	d11b      	bne.n	80049fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ea:	f043 0204 	orr.w	r2, r3, #4
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e267      	b.n	8004eee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d075      	beq.n	8004b16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a2a:	4b88      	ldr	r3, [pc, #544]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d00c      	beq.n	8004a50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a36:	4b85      	ldr	r3, [pc, #532]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d112      	bne.n	8004a68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a42:	4b82      	ldr	r3, [pc, #520]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a4e:	d10b      	bne.n	8004a68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a50:	4b7e      	ldr	r3, [pc, #504]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d05b      	beq.n	8004b14 <HAL_RCC_OscConfig+0x108>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d157      	bne.n	8004b14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e242      	b.n	8004eee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a70:	d106      	bne.n	8004a80 <HAL_RCC_OscConfig+0x74>
 8004a72:	4b76      	ldr	r3, [pc, #472]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a75      	ldr	r2, [pc, #468]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e01d      	b.n	8004abc <HAL_RCC_OscConfig+0xb0>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a88:	d10c      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x98>
 8004a8a:	4b70      	ldr	r3, [pc, #448]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a6f      	ldr	r2, [pc, #444]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004a90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	4b6d      	ldr	r3, [pc, #436]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a6c      	ldr	r2, [pc, #432]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	e00b      	b.n	8004abc <HAL_RCC_OscConfig+0xb0>
 8004aa4:	4b69      	ldr	r3, [pc, #420]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a68      	ldr	r2, [pc, #416]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004aaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	4b66      	ldr	r3, [pc, #408]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a65      	ldr	r2, [pc, #404]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004ab6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d013      	beq.n	8004aec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac4:	f7fd fbe0 	bl	8002288 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004acc:	f7fd fbdc 	bl	8002288 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b64      	cmp	r3, #100	@ 0x64
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e207      	b.n	8004eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ade:	4b5b      	ldr	r3, [pc, #364]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f0      	beq.n	8004acc <HAL_RCC_OscConfig+0xc0>
 8004aea:	e014      	b.n	8004b16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aec:	f7fd fbcc 	bl	8002288 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004af4:	f7fd fbc8 	bl	8002288 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b64      	cmp	r3, #100	@ 0x64
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e1f3      	b.n	8004eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b06:	4b51      	ldr	r3, [pc, #324]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f0      	bne.n	8004af4 <HAL_RCC_OscConfig+0xe8>
 8004b12:	e000      	b.n	8004b16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d063      	beq.n	8004bea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b22:	4b4a      	ldr	r3, [pc, #296]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00b      	beq.n	8004b46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b2e:	4b47      	ldr	r3, [pc, #284]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d11c      	bne.n	8004b74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b3a:	4b44      	ldr	r3, [pc, #272]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d116      	bne.n	8004b74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b46:	4b41      	ldr	r3, [pc, #260]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d005      	beq.n	8004b5e <HAL_RCC_OscConfig+0x152>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d001      	beq.n	8004b5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e1c7      	b.n	8004eee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	4937      	ldr	r1, [pc, #220]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b72:	e03a      	b.n	8004bea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d020      	beq.n	8004bbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b7c:	4b34      	ldr	r3, [pc, #208]	@ (8004c50 <HAL_RCC_OscConfig+0x244>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b82:	f7fd fb81 	bl	8002288 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b8a:	f7fd fb7d 	bl	8002288 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e1a8      	b.n	8004eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba8:	4b28      	ldr	r3, [pc, #160]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	4925      	ldr	r1, [pc, #148]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	600b      	str	r3, [r1, #0]
 8004bbc:	e015      	b.n	8004bea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bbe:	4b24      	ldr	r3, [pc, #144]	@ (8004c50 <HAL_RCC_OscConfig+0x244>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc4:	f7fd fb60 	bl	8002288 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bcc:	f7fd fb5c 	bl	8002288 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e187      	b.n	8004eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bde:	4b1b      	ldr	r3, [pc, #108]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f0      	bne.n	8004bcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d036      	beq.n	8004c64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d016      	beq.n	8004c2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bfe:	4b15      	ldr	r3, [pc, #84]	@ (8004c54 <HAL_RCC_OscConfig+0x248>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c04:	f7fd fb40 	bl	8002288 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c0c:	f7fd fb3c 	bl	8002288 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e167      	b.n	8004eee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c4c <HAL_RCC_OscConfig+0x240>)
 8004c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f0      	beq.n	8004c0c <HAL_RCC_OscConfig+0x200>
 8004c2a:	e01b      	b.n	8004c64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c2c:	4b09      	ldr	r3, [pc, #36]	@ (8004c54 <HAL_RCC_OscConfig+0x248>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c32:	f7fd fb29 	bl	8002288 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c38:	e00e      	b.n	8004c58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c3a:	f7fd fb25 	bl	8002288 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d907      	bls.n	8004c58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e150      	b.n	8004eee <HAL_RCC_OscConfig+0x4e2>
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	42470000 	.word	0x42470000
 8004c54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c58:	4b88      	ldr	r3, [pc, #544]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1ea      	bne.n	8004c3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8097 	beq.w	8004da0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c72:	2300      	movs	r3, #0
 8004c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c76:	4b81      	ldr	r3, [pc, #516]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10f      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c82:	2300      	movs	r3, #0
 8004c84:	60bb      	str	r3, [r7, #8]
 8004c86:	4b7d      	ldr	r3, [pc, #500]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	4a7c      	ldr	r2, [pc, #496]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c92:	4b7a      	ldr	r3, [pc, #488]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca2:	4b77      	ldr	r3, [pc, #476]	@ (8004e80 <HAL_RCC_OscConfig+0x474>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d118      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cae:	4b74      	ldr	r3, [pc, #464]	@ (8004e80 <HAL_RCC_OscConfig+0x474>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a73      	ldr	r2, [pc, #460]	@ (8004e80 <HAL_RCC_OscConfig+0x474>)
 8004cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cba:	f7fd fae5 	bl	8002288 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc2:	f7fd fae1 	bl	8002288 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e10c      	b.n	8004eee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd4:	4b6a      	ldr	r3, [pc, #424]	@ (8004e80 <HAL_RCC_OscConfig+0x474>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d106      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x2ea>
 8004ce8:	4b64      	ldr	r3, [pc, #400]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cec:	4a63      	ldr	r2, [pc, #396]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004cee:	f043 0301 	orr.w	r3, r3, #1
 8004cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cf4:	e01c      	b.n	8004d30 <HAL_RCC_OscConfig+0x324>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	2b05      	cmp	r3, #5
 8004cfc:	d10c      	bne.n	8004d18 <HAL_RCC_OscConfig+0x30c>
 8004cfe:	4b5f      	ldr	r3, [pc, #380]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d02:	4a5e      	ldr	r2, [pc, #376]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004d04:	f043 0304 	orr.w	r3, r3, #4
 8004d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d0a:	4b5c      	ldr	r3, [pc, #368]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0e:	4a5b      	ldr	r2, [pc, #364]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004d10:	f043 0301 	orr.w	r3, r3, #1
 8004d14:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d16:	e00b      	b.n	8004d30 <HAL_RCC_OscConfig+0x324>
 8004d18:	4b58      	ldr	r3, [pc, #352]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1c:	4a57      	ldr	r2, [pc, #348]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004d1e:	f023 0301 	bic.w	r3, r3, #1
 8004d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d24:	4b55      	ldr	r3, [pc, #340]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d28:	4a54      	ldr	r2, [pc, #336]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004d2a:	f023 0304 	bic.w	r3, r3, #4
 8004d2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d015      	beq.n	8004d64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d38:	f7fd faa6 	bl	8002288 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d3e:	e00a      	b.n	8004d56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d40:	f7fd faa2 	bl	8002288 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e0cb      	b.n	8004eee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d56:	4b49      	ldr	r3, [pc, #292]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0ee      	beq.n	8004d40 <HAL_RCC_OscConfig+0x334>
 8004d62:	e014      	b.n	8004d8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d64:	f7fd fa90 	bl	8002288 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d6a:	e00a      	b.n	8004d82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d6c:	f7fd fa8c 	bl	8002288 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e0b5      	b.n	8004eee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d82:	4b3e      	ldr	r3, [pc, #248]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1ee      	bne.n	8004d6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d105      	bne.n	8004da0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d94:	4b39      	ldr	r3, [pc, #228]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d98:	4a38      	ldr	r2, [pc, #224]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 80a1 	beq.w	8004eec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004daa:	4b34      	ldr	r3, [pc, #208]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d05c      	beq.n	8004e70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d141      	bne.n	8004e42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dbe:	4b31      	ldr	r3, [pc, #196]	@ (8004e84 <HAL_RCC_OscConfig+0x478>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc4:	f7fd fa60 	bl	8002288 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dcc:	f7fd fa5c 	bl	8002288 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e087      	b.n	8004eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dde:	4b27      	ldr	r3, [pc, #156]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f0      	bne.n	8004dcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69da      	ldr	r2, [r3, #28]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df8:	019b      	lsls	r3, r3, #6
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e00:	085b      	lsrs	r3, r3, #1
 8004e02:	3b01      	subs	r3, #1
 8004e04:	041b      	lsls	r3, r3, #16
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0c:	061b      	lsls	r3, r3, #24
 8004e0e:	491b      	ldr	r1, [pc, #108]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e14:	4b1b      	ldr	r3, [pc, #108]	@ (8004e84 <HAL_RCC_OscConfig+0x478>)
 8004e16:	2201      	movs	r2, #1
 8004e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1a:	f7fd fa35 	bl	8002288 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e22:	f7fd fa31 	bl	8002288 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e05c      	b.n	8004eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e34:	4b11      	ldr	r3, [pc, #68]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_RCC_OscConfig+0x416>
 8004e40:	e054      	b.n	8004eec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e42:	4b10      	ldr	r3, [pc, #64]	@ (8004e84 <HAL_RCC_OscConfig+0x478>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e48:	f7fd fa1e 	bl	8002288 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e50:	f7fd fa1a 	bl	8002288 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e045      	b.n	8004eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e62:	4b06      	ldr	r3, [pc, #24]	@ (8004e7c <HAL_RCC_OscConfig+0x470>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0x444>
 8004e6e:	e03d      	b.n	8004eec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d107      	bne.n	8004e88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e038      	b.n	8004eee <HAL_RCC_OscConfig+0x4e2>
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	40007000 	.word	0x40007000
 8004e84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e88:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef8 <HAL_RCC_OscConfig+0x4ec>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d028      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d121      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d11a      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004eb8:	4013      	ands	r3, r2
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ebe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d111      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d107      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d001      	beq.n	8004eec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e000      	b.n	8004eee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40023800 	.word	0x40023800

08004efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0cc      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f10:	4b68      	ldr	r3, [pc, #416]	@ (80050b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d90c      	bls.n	8004f38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1e:	4b65      	ldr	r3, [pc, #404]	@ (80050b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f26:	4b63      	ldr	r3, [pc, #396]	@ (80050b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e0b8      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d020      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d005      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f50:	4b59      	ldr	r3, [pc, #356]	@ (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	4a58      	ldr	r2, [pc, #352]	@ (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d005      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f68:	4b53      	ldr	r3, [pc, #332]	@ (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	4a52      	ldr	r2, [pc, #328]	@ (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f74:	4b50      	ldr	r3, [pc, #320]	@ (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	494d      	ldr	r1, [pc, #308]	@ (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d044      	beq.n	800501c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d107      	bne.n	8004faa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9a:	4b47      	ldr	r3, [pc, #284]	@ (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d119      	bne.n	8004fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e07f      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d003      	beq.n	8004fba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d107      	bne.n	8004fca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fba:	4b3f      	ldr	r3, [pc, #252]	@ (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e06f      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fca:	4b3b      	ldr	r3, [pc, #236]	@ (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e067      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fda:	4b37      	ldr	r3, [pc, #220]	@ (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f023 0203 	bic.w	r2, r3, #3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	4934      	ldr	r1, [pc, #208]	@ (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fec:	f7fd f94c 	bl	8002288 <HAL_GetTick>
 8004ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff2:	e00a      	b.n	800500a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff4:	f7fd f948 	bl	8002288 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005002:	4293      	cmp	r3, r2
 8005004:	d901      	bls.n	800500a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e04f      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500a:	4b2b      	ldr	r3, [pc, #172]	@ (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 020c 	and.w	r2, r3, #12
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	429a      	cmp	r2, r3
 800501a:	d1eb      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800501c:	4b25      	ldr	r3, [pc, #148]	@ (80050b4 <HAL_RCC_ClockConfig+0x1b8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d20c      	bcs.n	8005044 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502a:	4b22      	ldr	r3, [pc, #136]	@ (80050b4 <HAL_RCC_ClockConfig+0x1b8>)
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005032:	4b20      	ldr	r3, [pc, #128]	@ (80050b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	429a      	cmp	r2, r3
 800503e:	d001      	beq.n	8005044 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e032      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d008      	beq.n	8005062 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005050:	4b19      	ldr	r3, [pc, #100]	@ (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	4916      	ldr	r1, [pc, #88]	@ (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	4313      	orrs	r3, r2
 8005060:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d009      	beq.n	8005082 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800506e:	4b12      	ldr	r3, [pc, #72]	@ (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	490e      	ldr	r1, [pc, #56]	@ (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 800507e:	4313      	orrs	r3, r2
 8005080:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005082:	f000 f821 	bl	80050c8 <HAL_RCC_GetSysClockFreq>
 8005086:	4602      	mov	r2, r0
 8005088:	4b0b      	ldr	r3, [pc, #44]	@ (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	490a      	ldr	r1, [pc, #40]	@ (80050bc <HAL_RCC_ClockConfig+0x1c0>)
 8005094:	5ccb      	ldrb	r3, [r1, r3]
 8005096:	fa22 f303 	lsr.w	r3, r2, r3
 800509a:	4a09      	ldr	r2, [pc, #36]	@ (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 800509c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800509e:	4b09      	ldr	r3, [pc, #36]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fc fed0 	bl	8001e48 <HAL_InitTick>

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40023c00 	.word	0x40023c00
 80050b8:	40023800 	.word	0x40023800
 80050bc:	0800b964 	.word	0x0800b964
 80050c0:	20000000 	.word	0x20000000
 80050c4:	20000004 	.word	0x20000004

080050c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050cc:	b094      	sub	sp, #80	@ 0x50
 80050ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80050d4:	2300      	movs	r3, #0
 80050d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050d8:	2300      	movs	r3, #0
 80050da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050e0:	4b79      	ldr	r3, [pc, #484]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f003 030c 	and.w	r3, r3, #12
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d00d      	beq.n	8005108 <HAL_RCC_GetSysClockFreq+0x40>
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	f200 80e1 	bhi.w	80052b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <HAL_RCC_GetSysClockFreq+0x34>
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d003      	beq.n	8005102 <HAL_RCC_GetSysClockFreq+0x3a>
 80050fa:	e0db      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050fc:	4b73      	ldr	r3, [pc, #460]	@ (80052cc <HAL_RCC_GetSysClockFreq+0x204>)
 80050fe:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005100:	e0db      	b.n	80052ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005102:	4b73      	ldr	r3, [pc, #460]	@ (80052d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005104:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005106:	e0d8      	b.n	80052ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005108:	4b6f      	ldr	r3, [pc, #444]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005110:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005112:	4b6d      	ldr	r3, [pc, #436]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d063      	beq.n	80051e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800511e:	4b6a      	ldr	r3, [pc, #424]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	099b      	lsrs	r3, r3, #6
 8005124:	2200      	movs	r2, #0
 8005126:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005128:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005130:	633b      	str	r3, [r7, #48]	@ 0x30
 8005132:	2300      	movs	r3, #0
 8005134:	637b      	str	r3, [r7, #52]	@ 0x34
 8005136:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800513a:	4622      	mov	r2, r4
 800513c:	462b      	mov	r3, r5
 800513e:	f04f 0000 	mov.w	r0, #0
 8005142:	f04f 0100 	mov.w	r1, #0
 8005146:	0159      	lsls	r1, r3, #5
 8005148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800514c:	0150      	lsls	r0, r2, #5
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	4621      	mov	r1, r4
 8005154:	1a51      	subs	r1, r2, r1
 8005156:	6139      	str	r1, [r7, #16]
 8005158:	4629      	mov	r1, r5
 800515a:	eb63 0301 	sbc.w	r3, r3, r1
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800516c:	4659      	mov	r1, fp
 800516e:	018b      	lsls	r3, r1, #6
 8005170:	4651      	mov	r1, sl
 8005172:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005176:	4651      	mov	r1, sl
 8005178:	018a      	lsls	r2, r1, #6
 800517a:	4651      	mov	r1, sl
 800517c:	ebb2 0801 	subs.w	r8, r2, r1
 8005180:	4659      	mov	r1, fp
 8005182:	eb63 0901 	sbc.w	r9, r3, r1
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	f04f 0300 	mov.w	r3, #0
 800518e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800519a:	4690      	mov	r8, r2
 800519c:	4699      	mov	r9, r3
 800519e:	4623      	mov	r3, r4
 80051a0:	eb18 0303 	adds.w	r3, r8, r3
 80051a4:	60bb      	str	r3, [r7, #8]
 80051a6:	462b      	mov	r3, r5
 80051a8:	eb49 0303 	adc.w	r3, r9, r3
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051ba:	4629      	mov	r1, r5
 80051bc:	024b      	lsls	r3, r1, #9
 80051be:	4621      	mov	r1, r4
 80051c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051c4:	4621      	mov	r1, r4
 80051c6:	024a      	lsls	r2, r1, #9
 80051c8:	4610      	mov	r0, r2
 80051ca:	4619      	mov	r1, r3
 80051cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ce:	2200      	movs	r2, #0
 80051d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051d8:	f7fb fcee 	bl	8000bb8 <__aeabi_uldivmod>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4613      	mov	r3, r2
 80051e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051e4:	e058      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e6:	4b38      	ldr	r3, [pc, #224]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	099b      	lsrs	r3, r3, #6
 80051ec:	2200      	movs	r2, #0
 80051ee:	4618      	mov	r0, r3
 80051f0:	4611      	mov	r1, r2
 80051f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051f6:	623b      	str	r3, [r7, #32]
 80051f8:	2300      	movs	r3, #0
 80051fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80051fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005200:	4642      	mov	r2, r8
 8005202:	464b      	mov	r3, r9
 8005204:	f04f 0000 	mov.w	r0, #0
 8005208:	f04f 0100 	mov.w	r1, #0
 800520c:	0159      	lsls	r1, r3, #5
 800520e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005212:	0150      	lsls	r0, r2, #5
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4641      	mov	r1, r8
 800521a:	ebb2 0a01 	subs.w	sl, r2, r1
 800521e:	4649      	mov	r1, r9
 8005220:	eb63 0b01 	sbc.w	fp, r3, r1
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005230:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005234:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005238:	ebb2 040a 	subs.w	r4, r2, sl
 800523c:	eb63 050b 	sbc.w	r5, r3, fp
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	00eb      	lsls	r3, r5, #3
 800524a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800524e:	00e2      	lsls	r2, r4, #3
 8005250:	4614      	mov	r4, r2
 8005252:	461d      	mov	r5, r3
 8005254:	4643      	mov	r3, r8
 8005256:	18e3      	adds	r3, r4, r3
 8005258:	603b      	str	r3, [r7, #0]
 800525a:	464b      	mov	r3, r9
 800525c:	eb45 0303 	adc.w	r3, r5, r3
 8005260:	607b      	str	r3, [r7, #4]
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800526e:	4629      	mov	r1, r5
 8005270:	028b      	lsls	r3, r1, #10
 8005272:	4621      	mov	r1, r4
 8005274:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005278:	4621      	mov	r1, r4
 800527a:	028a      	lsls	r2, r1, #10
 800527c:	4610      	mov	r0, r2
 800527e:	4619      	mov	r1, r3
 8005280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005282:	2200      	movs	r2, #0
 8005284:	61bb      	str	r3, [r7, #24]
 8005286:	61fa      	str	r2, [r7, #28]
 8005288:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800528c:	f7fb fc94 	bl	8000bb8 <__aeabi_uldivmod>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4613      	mov	r3, r2
 8005296:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005298:	4b0b      	ldr	r3, [pc, #44]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	0c1b      	lsrs	r3, r3, #16
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	3301      	adds	r3, #1
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80052a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052b2:	e002      	b.n	80052ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052b4:	4b05      	ldr	r3, [pc, #20]	@ (80052cc <HAL_RCC_GetSysClockFreq+0x204>)
 80052b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3750      	adds	r7, #80	@ 0x50
 80052c0:	46bd      	mov	sp, r7
 80052c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052c6:	bf00      	nop
 80052c8:	40023800 	.word	0x40023800
 80052cc:	00f42400 	.word	0x00f42400
 80052d0:	007a1200 	.word	0x007a1200

080052d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052d8:	4b03      	ldr	r3, [pc, #12]	@ (80052e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052da:	681b      	ldr	r3, [r3, #0]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	20000000 	.word	0x20000000

080052ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052f0:	f7ff fff0 	bl	80052d4 <HAL_RCC_GetHCLKFreq>
 80052f4:	4602      	mov	r2, r0
 80052f6:	4b05      	ldr	r3, [pc, #20]	@ (800530c <HAL_RCC_GetPCLK1Freq+0x20>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	0a9b      	lsrs	r3, r3, #10
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	4903      	ldr	r1, [pc, #12]	@ (8005310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005302:	5ccb      	ldrb	r3, [r1, r3]
 8005304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005308:	4618      	mov	r0, r3
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40023800 	.word	0x40023800
 8005310:	0800b974 	.word	0x0800b974

08005314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005318:	f7ff ffdc 	bl	80052d4 <HAL_RCC_GetHCLKFreq>
 800531c:	4602      	mov	r2, r0
 800531e:	4b05      	ldr	r3, [pc, #20]	@ (8005334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	0b5b      	lsrs	r3, r3, #13
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	4903      	ldr	r1, [pc, #12]	@ (8005338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800532a:	5ccb      	ldrb	r3, [r1, r3]
 800532c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005330:	4618      	mov	r0, r3
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40023800 	.word	0x40023800
 8005338:	0800b974 	.word	0x0800b974

0800533c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	220f      	movs	r2, #15
 800534a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800534c:	4b12      	ldr	r3, [pc, #72]	@ (8005398 <HAL_RCC_GetClockConfig+0x5c>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 0203 	and.w	r2, r3, #3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005358:	4b0f      	ldr	r3, [pc, #60]	@ (8005398 <HAL_RCC_GetClockConfig+0x5c>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005364:	4b0c      	ldr	r3, [pc, #48]	@ (8005398 <HAL_RCC_GetClockConfig+0x5c>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005370:	4b09      	ldr	r3, [pc, #36]	@ (8005398 <HAL_RCC_GetClockConfig+0x5c>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	08db      	lsrs	r3, r3, #3
 8005376:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800537e:	4b07      	ldr	r3, [pc, #28]	@ (800539c <HAL_RCC_GetClockConfig+0x60>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0207 	and.w	r2, r3, #7
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	601a      	str	r2, [r3, #0]
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40023800 	.word	0x40023800
 800539c:	40023c00 	.word	0x40023c00

080053a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e041      	b.n	8005436 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f839 	bl	800543e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3304      	adds	r3, #4
 80053dc:	4619      	mov	r1, r3
 80053de:	4610      	mov	r0, r2
 80053e0:	f000 f9b2 	bl	8005748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
	...

08005454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b01      	cmp	r3, #1
 8005466:	d001      	beq.n	800546c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e044      	b.n	80054f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1e      	ldr	r2, [pc, #120]	@ (8005504 <HAL_TIM_Base_Start_IT+0xb0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d018      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x6c>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005496:	d013      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x6c>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a1a      	ldr	r2, [pc, #104]	@ (8005508 <HAL_TIM_Base_Start_IT+0xb4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00e      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x6c>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a19      	ldr	r2, [pc, #100]	@ (800550c <HAL_TIM_Base_Start_IT+0xb8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d009      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x6c>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a17      	ldr	r2, [pc, #92]	@ (8005510 <HAL_TIM_Base_Start_IT+0xbc>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d004      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x6c>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a16      	ldr	r2, [pc, #88]	@ (8005514 <HAL_TIM_Base_Start_IT+0xc0>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d111      	bne.n	80054e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b06      	cmp	r3, #6
 80054d0:	d010      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f042 0201 	orr.w	r2, r2, #1
 80054e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e2:	e007      	b.n	80054f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0201 	orr.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40010000 	.word	0x40010000
 8005508:	40000400 	.word	0x40000400
 800550c:	40000800 	.word	0x40000800
 8005510:	40000c00 	.word	0x40000c00
 8005514:	40014000 	.word	0x40014000

08005518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d020      	beq.n	800557c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d01b      	beq.n	800557c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0202 	mvn.w	r2, #2
 800554c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f8d2 	bl	800570c <HAL_TIM_IC_CaptureCallback>
 8005568:	e005      	b.n	8005576 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f8c4 	bl	80056f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f8d5 	bl	8005720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	d020      	beq.n	80055c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01b      	beq.n	80055c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0204 	mvn.w	r2, #4
 8005598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2202      	movs	r2, #2
 800559e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f8ac 	bl	800570c <HAL_TIM_IC_CaptureCallback>
 80055b4:	e005      	b.n	80055c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f89e 	bl	80056f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f8af 	bl	8005720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 0308 	and.w	r3, r3, #8
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d020      	beq.n	8005614 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d01b      	beq.n	8005614 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0208 	mvn.w	r2, #8
 80055e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2204      	movs	r2, #4
 80055ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f886 	bl	800570c <HAL_TIM_IC_CaptureCallback>
 8005600:	e005      	b.n	800560e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f878 	bl	80056f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f889 	bl	8005720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f003 0310 	and.w	r3, r3, #16
 800561a:	2b00      	cmp	r3, #0
 800561c:	d020      	beq.n	8005660 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f003 0310 	and.w	r3, r3, #16
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01b      	beq.n	8005660 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f06f 0210 	mvn.w	r2, #16
 8005630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2208      	movs	r2, #8
 8005636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f860 	bl	800570c <HAL_TIM_IC_CaptureCallback>
 800564c:	e005      	b.n	800565a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f852 	bl	80056f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f863 	bl	8005720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00c      	beq.n	8005684 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d007      	beq.n	8005684 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f06f 0201 	mvn.w	r2, #1
 800567c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fc f926 	bl	80018d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00c      	beq.n	80056a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005694:	2b00      	cmp	r3, #0
 8005696:	d007      	beq.n	80056a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80056a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f8e6 	bl	8005874 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00c      	beq.n	80056cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d007      	beq.n	80056cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f834 	bl	8005734 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00c      	beq.n	80056f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d007      	beq.n	80056f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f06f 0220 	mvn.w	r2, #32
 80056e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f8b8 	bl	8005860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056f0:	bf00      	nop
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a3a      	ldr	r2, [pc, #232]	@ (8005844 <TIM_Base_SetConfig+0xfc>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00f      	beq.n	8005780 <TIM_Base_SetConfig+0x38>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005766:	d00b      	beq.n	8005780 <TIM_Base_SetConfig+0x38>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a37      	ldr	r2, [pc, #220]	@ (8005848 <TIM_Base_SetConfig+0x100>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d007      	beq.n	8005780 <TIM_Base_SetConfig+0x38>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a36      	ldr	r2, [pc, #216]	@ (800584c <TIM_Base_SetConfig+0x104>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d003      	beq.n	8005780 <TIM_Base_SetConfig+0x38>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a35      	ldr	r2, [pc, #212]	@ (8005850 <TIM_Base_SetConfig+0x108>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d108      	bne.n	8005792 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a2b      	ldr	r2, [pc, #172]	@ (8005844 <TIM_Base_SetConfig+0xfc>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d01b      	beq.n	80057d2 <TIM_Base_SetConfig+0x8a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057a0:	d017      	beq.n	80057d2 <TIM_Base_SetConfig+0x8a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a28      	ldr	r2, [pc, #160]	@ (8005848 <TIM_Base_SetConfig+0x100>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <TIM_Base_SetConfig+0x8a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a27      	ldr	r2, [pc, #156]	@ (800584c <TIM_Base_SetConfig+0x104>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00f      	beq.n	80057d2 <TIM_Base_SetConfig+0x8a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a26      	ldr	r2, [pc, #152]	@ (8005850 <TIM_Base_SetConfig+0x108>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00b      	beq.n	80057d2 <TIM_Base_SetConfig+0x8a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a25      	ldr	r2, [pc, #148]	@ (8005854 <TIM_Base_SetConfig+0x10c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d007      	beq.n	80057d2 <TIM_Base_SetConfig+0x8a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a24      	ldr	r2, [pc, #144]	@ (8005858 <TIM_Base_SetConfig+0x110>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d003      	beq.n	80057d2 <TIM_Base_SetConfig+0x8a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a23      	ldr	r2, [pc, #140]	@ (800585c <TIM_Base_SetConfig+0x114>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d108      	bne.n	80057e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a0e      	ldr	r2, [pc, #56]	@ (8005844 <TIM_Base_SetConfig+0xfc>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d103      	bne.n	8005818 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b01      	cmp	r3, #1
 8005828:	d105      	bne.n	8005836 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f023 0201 	bic.w	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	611a      	str	r2, [r3, #16]
  }
}
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40010000 	.word	0x40010000
 8005848:	40000400 	.word	0x40000400
 800584c:	40000800 	.word	0x40000800
 8005850:	40000c00 	.word	0x40000c00
 8005854:	40014000 	.word	0x40014000
 8005858:	40014400 	.word	0x40014400
 800585c:	40014800 	.word	0x40014800

08005860 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e042      	b.n	8005920 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fc f972 	bl	8001b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2224      	movs	r2, #36	@ 0x24
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 ff4f 	bl	8006770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	695a      	ldr	r2, [r3, #20]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005900:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2220      	movs	r2, #32
 800590c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b08a      	sub	sp, #40	@ 0x28
 800592c:	af02      	add	r7, sp, #8
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	4613      	mov	r3, r2
 8005936:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b20      	cmp	r3, #32
 8005946:	d175      	bne.n	8005a34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <HAL_UART_Transmit+0x2c>
 800594e:	88fb      	ldrh	r3, [r7, #6]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e06e      	b.n	8005a36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2221      	movs	r2, #33	@ 0x21
 8005962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005966:	f7fc fc8f 	bl	8002288 <HAL_GetTick>
 800596a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	88fa      	ldrh	r2, [r7, #6]
 8005970:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	88fa      	ldrh	r2, [r7, #6]
 8005976:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005980:	d108      	bne.n	8005994 <HAL_UART_Transmit+0x6c>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d104      	bne.n	8005994 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800598a:	2300      	movs	r3, #0
 800598c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	61bb      	str	r3, [r7, #24]
 8005992:	e003      	b.n	800599c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005998:	2300      	movs	r3, #0
 800599a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800599c:	e02e      	b.n	80059fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2200      	movs	r2, #0
 80059a6:	2180      	movs	r1, #128	@ 0x80
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 fc27 	bl	80061fc <UART_WaitOnFlagUntilTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d005      	beq.n	80059c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e03a      	b.n	8005a36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10b      	bne.n	80059de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	3302      	adds	r3, #2
 80059da:	61bb      	str	r3, [r7, #24]
 80059dc:	e007      	b.n	80059ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	781a      	ldrb	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	3301      	adds	r3, #1
 80059ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1cb      	bne.n	800599e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2140      	movs	r1, #64	@ 0x40
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fbf3 	bl	80061fc <UART_WaitOnFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d005      	beq.n	8005a28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e006      	b.n	8005a36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	e000      	b.n	8005a36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a34:	2302      	movs	r3, #2
  }
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3720      	adds	r7, #32
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b20      	cmp	r3, #32
 8005a56:	d112      	bne.n	8005a7e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <HAL_UART_Receive_DMA+0x26>
 8005a5e:	88fb      	ldrh	r3, [r7, #6]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e00b      	b.n	8005a80 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005a6e:	88fb      	ldrh	r3, [r7, #6]
 8005a70:	461a      	mov	r2, r3
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 fc1b 	bl	80062b0 <UART_Start_Receive_DMA>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	e000      	b.n	8005a80 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005a7e:	2302      	movs	r3, #2
  }
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b0ba      	sub	sp, #232	@ 0xe8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10f      	bne.n	8005aee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d009      	beq.n	8005aee <HAL_UART_IRQHandler+0x66>
 8005ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fd83 	bl	80065f2 <UART_Receive_IT>
      return;
 8005aec:	e25b      	b.n	8005fa6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005aee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 80de 	beq.w	8005cb4 <HAL_UART_IRQHandler+0x22c>
 8005af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d106      	bne.n	8005b12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b08:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 80d1 	beq.w	8005cb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00b      	beq.n	8005b36 <HAL_UART_IRQHandler+0xae>
 8005b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b2e:	f043 0201 	orr.w	r2, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b3a:	f003 0304 	and.w	r3, r3, #4
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00b      	beq.n	8005b5a <HAL_UART_IRQHandler+0xd2>
 8005b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d005      	beq.n	8005b5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b52:	f043 0202 	orr.w	r2, r3, #2
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00b      	beq.n	8005b7e <HAL_UART_IRQHandler+0xf6>
 8005b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b76:	f043 0204 	orr.w	r2, r3, #4
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d011      	beq.n	8005bae <HAL_UART_IRQHandler+0x126>
 8005b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b8e:	f003 0320 	and.w	r3, r3, #32
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d105      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d005      	beq.n	8005bae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ba6:	f043 0208 	orr.w	r2, r3, #8
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 81f2 	beq.w	8005f9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bbc:	f003 0320 	and.w	r3, r3, #32
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d008      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x14e>
 8005bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fd0e 	bl	80065f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be0:	2b40      	cmp	r3, #64	@ 0x40
 8005be2:	bf0c      	ite	eq
 8005be4:	2301      	moveq	r3, #1
 8005be6:	2300      	movne	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d103      	bne.n	8005c02 <HAL_UART_IRQHandler+0x17a>
 8005bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d04f      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fc16 	bl	8006434 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c12:	2b40      	cmp	r3, #64	@ 0x40
 8005c14:	d141      	bne.n	8005c9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3314      	adds	r3, #20
 8005c1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c24:	e853 3f00 	ldrex	r3, [r3]
 8005c28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3314      	adds	r3, #20
 8005c3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1d9      	bne.n	8005c16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d013      	beq.n	8005c92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c6e:	4a7e      	ldr	r2, [pc, #504]	@ (8005e68 <HAL_UART_IRQHandler+0x3e0>)
 8005c70:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fd faa4 	bl	80031c4 <HAL_DMA_Abort_IT>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d016      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c90:	e00e      	b.n	8005cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f99e 	bl	8005fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c98:	e00a      	b.n	8005cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f99a 	bl	8005fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca0:	e006      	b.n	8005cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f996 	bl	8005fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005cae:	e175      	b.n	8005f9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb0:	bf00      	nop
    return;
 8005cb2:	e173      	b.n	8005f9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	f040 814f 	bne.w	8005f5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cc2:	f003 0310 	and.w	r3, r3, #16
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 8148 	beq.w	8005f5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cd0:	f003 0310 	and.w	r3, r3, #16
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 8141 	beq.w	8005f5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60bb      	str	r3, [r7, #8]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60bb      	str	r3, [r7, #8]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	60bb      	str	r3, [r7, #8]
 8005cee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfa:	2b40      	cmp	r3, #64	@ 0x40
 8005cfc:	f040 80b6 	bne.w	8005e6c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 8145 	beq.w	8005fa0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	f080 813e 	bcs.w	8005fa0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d36:	f000 8088 	beq.w	8005e4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	330c      	adds	r3, #12
 8005d40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	330c      	adds	r3, #12
 8005d62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005d66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1d9      	bne.n	8005d3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3314      	adds	r3, #20
 8005d8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d98:	f023 0301 	bic.w	r3, r3, #1
 8005d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3314      	adds	r3, #20
 8005da6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005daa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005dae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005db2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005dbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e1      	bne.n	8005d86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3314      	adds	r3, #20
 8005dc8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005dd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3314      	adds	r3, #20
 8005de2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005de6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005de8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005dec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005df4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e3      	bne.n	8005dc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e1a:	f023 0310 	bic.w	r3, r3, #16
 8005e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	330c      	adds	r3, #12
 8005e28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005e2c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005e2e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e3      	bne.n	8005e08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fd f94d 	bl	80030e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f8c1 	bl	8005fe8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e66:	e09b      	b.n	8005fa0 <HAL_UART_IRQHandler+0x518>
 8005e68:	080064fb 	.word	0x080064fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 808e 	beq.w	8005fa4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005e88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 8089 	beq.w	8005fa4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	330c      	adds	r3, #12
 8005e98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ea4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ea8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005eb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005eb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ebc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e3      	bne.n	8005e92 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3314      	adds	r3, #20
 8005ed0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	623b      	str	r3, [r7, #32]
   return(result);
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	f023 0301 	bic.w	r3, r3, #1
 8005ee0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3314      	adds	r3, #20
 8005eea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005eee:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e3      	bne.n	8005eca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	330c      	adds	r3, #12
 8005f16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0310 	bic.w	r3, r3, #16
 8005f26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	330c      	adds	r3, #12
 8005f30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005f34:	61fa      	str	r2, [r7, #28]
 8005f36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f38:	69b9      	ldr	r1, [r7, #24]
 8005f3a:	69fa      	ldr	r2, [r7, #28]
 8005f3c:	e841 2300 	strex	r3, r2, [r1]
 8005f40:	617b      	str	r3, [r7, #20]
   return(result);
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e3      	bne.n	8005f10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f52:	4619      	mov	r1, r3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f847 	bl	8005fe8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f5a:	e023      	b.n	8005fa4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d009      	beq.n	8005f7c <HAL_UART_IRQHandler+0x4f4>
 8005f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fad4 	bl	8006522 <UART_Transmit_IT>
    return;
 8005f7a:	e014      	b.n	8005fa6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00e      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x51e>
 8005f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d008      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fb14 	bl	80065c2 <UART_EndTransmit_IT>
    return;
 8005f9a:	e004      	b.n	8005fa6 <HAL_UART_IRQHandler+0x51e>
    return;
 8005f9c:	bf00      	nop
 8005f9e:	e002      	b.n	8005fa6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005fa0:	bf00      	nop
 8005fa2:	e000      	b.n	8005fa6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005fa4:	bf00      	nop
  }
}
 8005fa6:	37e8      	adds	r7, #232	@ 0xe8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b09c      	sub	sp, #112	@ 0x70
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006018:	2b00      	cmp	r3, #0
 800601a:	d172      	bne.n	8006102 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800601c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800601e:	2200      	movs	r2, #0
 8006020:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006022:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	330c      	adds	r3, #12
 8006028:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006032:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006038:	66bb      	str	r3, [r7, #104]	@ 0x68
 800603a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	330c      	adds	r3, #12
 8006040:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006042:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006044:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006046:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006048:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800604a:	e841 2300 	strex	r3, r2, [r1]
 800604e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1e5      	bne.n	8006022 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3314      	adds	r3, #20
 800605c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006068:	f023 0301 	bic.w	r3, r3, #1
 800606c:	667b      	str	r3, [r7, #100]	@ 0x64
 800606e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3314      	adds	r3, #20
 8006074:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006076:	647a      	str	r2, [r7, #68]	@ 0x44
 8006078:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800607c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e5      	bne.n	8006056 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800608a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3314      	adds	r3, #20
 8006090:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	623b      	str	r3, [r7, #32]
   return(result);
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80060a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3314      	adds	r3, #20
 80060a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80060aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80060ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e5      	bne.n	800608a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060c0:	2220      	movs	r2, #32
 80060c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d119      	bne.n	8006102 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	330c      	adds	r3, #12
 80060d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f023 0310 	bic.w	r3, r3, #16
 80060e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	330c      	adds	r3, #12
 80060ec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80060ee:	61fa      	str	r2, [r7, #28]
 80060f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	69b9      	ldr	r1, [r7, #24]
 80060f4:	69fa      	ldr	r2, [r7, #28]
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	617b      	str	r3, [r7, #20]
   return(result);
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e5      	bne.n	80060ce <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006104:	2200      	movs	r2, #0
 8006106:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006108:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800610a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800610c:	2b01      	cmp	r3, #1
 800610e:	d106      	bne.n	800611e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006110:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006112:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006114:	4619      	mov	r1, r3
 8006116:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006118:	f7ff ff66 	bl	8005fe8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800611c:	e002      	b.n	8006124 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800611e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006120:	f7fb fab6 	bl	8001690 <HAL_UART_RxCpltCallback>
}
 8006124:	bf00      	nop
 8006126:	3770      	adds	r7, #112	@ 0x70
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006138:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006144:	2b01      	cmp	r3, #1
 8006146:	d108      	bne.n	800615a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800614c:	085b      	lsrs	r3, r3, #1
 800614e:	b29b      	uxth	r3, r3
 8006150:	4619      	mov	r1, r3
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f7ff ff48 	bl	8005fe8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006158:	e002      	b.n	8006160 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f7ff ff30 	bl	8005fc0 <HAL_UART_RxHalfCpltCallback>
}
 8006160:	bf00      	nop
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006170:	2300      	movs	r3, #0
 8006172:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006178:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006184:	2b80      	cmp	r3, #128	@ 0x80
 8006186:	bf0c      	ite	eq
 8006188:	2301      	moveq	r3, #1
 800618a:	2300      	movne	r3, #0
 800618c:	b2db      	uxtb	r3, r3
 800618e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b21      	cmp	r3, #33	@ 0x21
 800619a:	d108      	bne.n	80061ae <UART_DMAError+0x46>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2200      	movs	r2, #0
 80061a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80061a8:	68b8      	ldr	r0, [r7, #8]
 80061aa:	f000 f91b 	bl	80063e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b8:	2b40      	cmp	r3, #64	@ 0x40
 80061ba:	bf0c      	ite	eq
 80061bc:	2301      	moveq	r3, #1
 80061be:	2300      	movne	r3, #0
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b22      	cmp	r3, #34	@ 0x22
 80061ce:	d108      	bne.n	80061e2 <UART_DMAError+0x7a>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d005      	beq.n	80061e2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2200      	movs	r2, #0
 80061da:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80061dc:	68b8      	ldr	r0, [r7, #8]
 80061de:	f000 f929 	bl	8006434 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e6:	f043 0210 	orr.w	r2, r3, #16
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061ee:	68b8      	ldr	r0, [r7, #8]
 80061f0:	f7ff fef0 	bl	8005fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061f4:	bf00      	nop
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	603b      	str	r3, [r7, #0]
 8006208:	4613      	mov	r3, r2
 800620a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800620c:	e03b      	b.n	8006286 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006214:	d037      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006216:	f7fc f837 	bl	8002288 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	6a3a      	ldr	r2, [r7, #32]
 8006222:	429a      	cmp	r2, r3
 8006224:	d302      	bcc.n	800622c <UART_WaitOnFlagUntilTimeout+0x30>
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e03a      	b.n	80062a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	2b00      	cmp	r3, #0
 800623c:	d023      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0x8a>
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b80      	cmp	r3, #128	@ 0x80
 8006242:	d020      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2b40      	cmp	r3, #64	@ 0x40
 8006248:	d01d      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0308 	and.w	r3, r3, #8
 8006254:	2b08      	cmp	r3, #8
 8006256:	d116      	bne.n	8006286 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006258:	2300      	movs	r3, #0
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 f8e0 	bl	8006434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2208      	movs	r2, #8
 8006278:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e00f      	b.n	80062a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4013      	ands	r3, r2
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	429a      	cmp	r2, r3
 8006294:	bf0c      	ite	eq
 8006296:	2301      	moveq	r3, #1
 8006298:	2300      	movne	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	461a      	mov	r2, r3
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d0b4      	beq.n	800620e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b098      	sub	sp, #96	@ 0x60
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	4613      	mov	r3, r2
 80062bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	88fa      	ldrh	r2, [r7, #6]
 80062c8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2222      	movs	r2, #34	@ 0x22
 80062d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062dc:	4a3e      	ldr	r2, [pc, #248]	@ (80063d8 <UART_Start_Receive_DMA+0x128>)
 80062de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e4:	4a3d      	ldr	r2, [pc, #244]	@ (80063dc <UART_Start_Receive_DMA+0x12c>)
 80062e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ec:	4a3c      	ldr	r2, [pc, #240]	@ (80063e0 <UART_Start_Receive_DMA+0x130>)
 80062ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f4:	2200      	movs	r2, #0
 80062f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80062f8:	f107 0308 	add.w	r3, r7, #8
 80062fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3304      	adds	r3, #4
 8006308:	4619      	mov	r1, r3
 800630a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	88fb      	ldrh	r3, [r7, #6]
 8006310:	f7fc fe90 	bl	8003034 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006314:	2300      	movs	r3, #0
 8006316:	613b      	str	r3, [r7, #16]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	613b      	str	r3, [r7, #16]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	613b      	str	r3, [r7, #16]
 8006328:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d019      	beq.n	8006366 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	330c      	adds	r3, #12
 8006338:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006348:	65bb      	str	r3, [r7, #88]	@ 0x58
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	330c      	adds	r3, #12
 8006350:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006352:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006354:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006358:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800635a:	e841 2300 	strex	r3, r2, [r1]
 800635e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1e5      	bne.n	8006332 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3314      	adds	r3, #20
 800636c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006378:	f043 0301 	orr.w	r3, r3, #1
 800637c:	657b      	str	r3, [r7, #84]	@ 0x54
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3314      	adds	r3, #20
 8006384:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006386:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006388:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800638c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e5      	bne.n	8006366 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3314      	adds	r3, #20
 80063a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	617b      	str	r3, [r7, #20]
   return(result);
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3314      	adds	r3, #20
 80063b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80063ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80063bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	6a39      	ldr	r1, [r7, #32]
 80063c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e5      	bne.n	800639a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3760      	adds	r7, #96	@ 0x60
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	08006001 	.word	0x08006001
 80063dc:	0800612d 	.word	0x0800612d
 80063e0:	08006169 	.word	0x08006169

080063e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b089      	sub	sp, #36	@ 0x24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	330c      	adds	r3, #12
 80063f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006402:	61fb      	str	r3, [r7, #28]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	330c      	adds	r3, #12
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	61ba      	str	r2, [r7, #24]
 800640e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	6979      	ldr	r1, [r7, #20]
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	613b      	str	r3, [r7, #16]
   return(result);
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e5      	bne.n	80063ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2220      	movs	r2, #32
 8006424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006428:	bf00      	nop
 800642a:	3724      	adds	r7, #36	@ 0x24
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006434:	b480      	push	{r7}
 8006436:	b095      	sub	sp, #84	@ 0x54
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	330c      	adds	r3, #12
 8006442:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006446:	e853 3f00 	ldrex	r3, [r3]
 800644a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800644c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	330c      	adds	r3, #12
 800645a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800645c:	643a      	str	r2, [r7, #64]	@ 0x40
 800645e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006462:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800646a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e5      	bne.n	800643c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3314      	adds	r3, #20
 8006476:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	f023 0301 	bic.w	r3, r3, #1
 8006486:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3314      	adds	r3, #20
 800648e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006490:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006492:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e5      	bne.n	8006470 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d119      	bne.n	80064e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	330c      	adds	r3, #12
 80064b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f023 0310 	bic.w	r3, r3, #16
 80064c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	330c      	adds	r3, #12
 80064ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064cc:	61ba      	str	r2, [r7, #24]
 80064ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	6979      	ldr	r1, [r7, #20]
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	613b      	str	r3, [r7, #16]
   return(result);
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e5      	bne.n	80064ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80064ee:	bf00      	nop
 80064f0:	3754      	adds	r7, #84	@ 0x54
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006506:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f7ff fd5d 	bl	8005fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800651a:	bf00      	nop
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006522:	b480      	push	{r7}
 8006524:	b085      	sub	sp, #20
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b21      	cmp	r3, #33	@ 0x21
 8006534:	d13e      	bne.n	80065b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800653e:	d114      	bne.n	800656a <UART_Transmit_IT+0x48>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d110      	bne.n	800656a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800655c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	1c9a      	adds	r2, r3, #2
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	621a      	str	r2, [r3, #32]
 8006568:	e008      	b.n	800657c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	1c59      	adds	r1, r3, #1
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6211      	str	r1, [r2, #32]
 8006574:	781a      	ldrb	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006580:	b29b      	uxth	r3, r3
 8006582:	3b01      	subs	r3, #1
 8006584:	b29b      	uxth	r3, r3
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	4619      	mov	r1, r3
 800658a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10f      	bne.n	80065b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800659e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065b0:	2300      	movs	r3, #0
 80065b2:	e000      	b.n	80065b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065b4:	2302      	movs	r3, #2
  }
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b082      	sub	sp, #8
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2220      	movs	r2, #32
 80065de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff fce2 	bl	8005fac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b08c      	sub	sp, #48	@ 0x30
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b22      	cmp	r3, #34	@ 0x22
 8006604:	f040 80ae 	bne.w	8006764 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006610:	d117      	bne.n	8006642 <UART_Receive_IT+0x50>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d113      	bne.n	8006642 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800661a:	2300      	movs	r3, #0
 800661c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006622:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	b29b      	uxth	r3, r3
 800662c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006630:	b29a      	uxth	r2, r3
 8006632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006634:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800663a:	1c9a      	adds	r2, r3, #2
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006640:	e026      	b.n	8006690 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006646:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006648:	2300      	movs	r3, #0
 800664a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006654:	d007      	beq.n	8006666 <UART_Receive_IT+0x74>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10a      	bne.n	8006674 <UART_Receive_IT+0x82>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	b2da      	uxtb	r2, r3
 800666e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	e008      	b.n	8006686 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	b2db      	uxtb	r3, r3
 800667c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006680:	b2da      	uxtb	r2, r3
 8006682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006684:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006694:	b29b      	uxth	r3, r3
 8006696:	3b01      	subs	r3, #1
 8006698:	b29b      	uxth	r3, r3
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	4619      	mov	r1, r3
 800669e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d15d      	bne.n	8006760 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 0220 	bic.w	r2, r2, #32
 80066b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	695a      	ldr	r2, [r3, #20]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0201 	bic.w	r2, r2, #1
 80066d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d135      	bne.n	8006756 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	330c      	adds	r3, #12
 80066f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	e853 3f00 	ldrex	r3, [r3]
 80066fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	f023 0310 	bic.w	r3, r3, #16
 8006706:	627b      	str	r3, [r7, #36]	@ 0x24
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	330c      	adds	r3, #12
 800670e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006710:	623a      	str	r2, [r7, #32]
 8006712:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006714:	69f9      	ldr	r1, [r7, #28]
 8006716:	6a3a      	ldr	r2, [r7, #32]
 8006718:	e841 2300 	strex	r3, r2, [r1]
 800671c:	61bb      	str	r3, [r7, #24]
   return(result);
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1e5      	bne.n	80066f0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0310 	and.w	r3, r3, #16
 800672e:	2b10      	cmp	r3, #16
 8006730:	d10a      	bne.n	8006748 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff fc4a 	bl	8005fe8 <HAL_UARTEx_RxEventCallback>
 8006754:	e002      	b.n	800675c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7fa ff9a 	bl	8001690 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	e002      	b.n	8006766 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006760:	2300      	movs	r3, #0
 8006762:	e000      	b.n	8006766 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006764:	2302      	movs	r3, #2
  }
}
 8006766:	4618      	mov	r0, r3
 8006768:	3730      	adds	r7, #48	@ 0x30
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006774:	b0c0      	sub	sp, #256	@ 0x100
 8006776:	af00      	add	r7, sp, #0
 8006778:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800677c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800678c:	68d9      	ldr	r1, [r3, #12]
 800678e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	ea40 0301 	orr.w	r3, r0, r1
 8006798:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800679a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	431a      	orrs	r2, r3
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	431a      	orrs	r2, r3
 80067b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80067c8:	f021 010c 	bic.w	r1, r1, #12
 80067cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80067d6:	430b      	orrs	r3, r1
 80067d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80067e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ea:	6999      	ldr	r1, [r3, #24]
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	ea40 0301 	orr.w	r3, r0, r1
 80067f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	4b8f      	ldr	r3, [pc, #572]	@ (8006a3c <UART_SetConfig+0x2cc>)
 8006800:	429a      	cmp	r2, r3
 8006802:	d005      	beq.n	8006810 <UART_SetConfig+0xa0>
 8006804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	4b8d      	ldr	r3, [pc, #564]	@ (8006a40 <UART_SetConfig+0x2d0>)
 800680c:	429a      	cmp	r2, r3
 800680e:	d104      	bne.n	800681a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006810:	f7fe fd80 	bl	8005314 <HAL_RCC_GetPCLK2Freq>
 8006814:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006818:	e003      	b.n	8006822 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800681a:	f7fe fd67 	bl	80052ec <HAL_RCC_GetPCLK1Freq>
 800681e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800682c:	f040 810c 	bne.w	8006a48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006834:	2200      	movs	r2, #0
 8006836:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800683a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800683e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006842:	4622      	mov	r2, r4
 8006844:	462b      	mov	r3, r5
 8006846:	1891      	adds	r1, r2, r2
 8006848:	65b9      	str	r1, [r7, #88]	@ 0x58
 800684a:	415b      	adcs	r3, r3
 800684c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800684e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006852:	4621      	mov	r1, r4
 8006854:	eb12 0801 	adds.w	r8, r2, r1
 8006858:	4629      	mov	r1, r5
 800685a:	eb43 0901 	adc.w	r9, r3, r1
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	f04f 0300 	mov.w	r3, #0
 8006866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800686a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800686e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006872:	4690      	mov	r8, r2
 8006874:	4699      	mov	r9, r3
 8006876:	4623      	mov	r3, r4
 8006878:	eb18 0303 	adds.w	r3, r8, r3
 800687c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006880:	462b      	mov	r3, r5
 8006882:	eb49 0303 	adc.w	r3, r9, r3
 8006886:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800688a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006896:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800689a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800689e:	460b      	mov	r3, r1
 80068a0:	18db      	adds	r3, r3, r3
 80068a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80068a4:	4613      	mov	r3, r2
 80068a6:	eb42 0303 	adc.w	r3, r2, r3
 80068aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80068ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80068b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80068b4:	f7fa f980 	bl	8000bb8 <__aeabi_uldivmod>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4b61      	ldr	r3, [pc, #388]	@ (8006a44 <UART_SetConfig+0x2d4>)
 80068be:	fba3 2302 	umull	r2, r3, r3, r2
 80068c2:	095b      	lsrs	r3, r3, #5
 80068c4:	011c      	lsls	r4, r3, #4
 80068c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80068d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80068d8:	4642      	mov	r2, r8
 80068da:	464b      	mov	r3, r9
 80068dc:	1891      	adds	r1, r2, r2
 80068de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80068e0:	415b      	adcs	r3, r3
 80068e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80068e8:	4641      	mov	r1, r8
 80068ea:	eb12 0a01 	adds.w	sl, r2, r1
 80068ee:	4649      	mov	r1, r9
 80068f0:	eb43 0b01 	adc.w	fp, r3, r1
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	f04f 0300 	mov.w	r3, #0
 80068fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006900:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006904:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006908:	4692      	mov	sl, r2
 800690a:	469b      	mov	fp, r3
 800690c:	4643      	mov	r3, r8
 800690e:	eb1a 0303 	adds.w	r3, sl, r3
 8006912:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006916:	464b      	mov	r3, r9
 8006918:	eb4b 0303 	adc.w	r3, fp, r3
 800691c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800692c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006930:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006934:	460b      	mov	r3, r1
 8006936:	18db      	adds	r3, r3, r3
 8006938:	643b      	str	r3, [r7, #64]	@ 0x40
 800693a:	4613      	mov	r3, r2
 800693c:	eb42 0303 	adc.w	r3, r2, r3
 8006940:	647b      	str	r3, [r7, #68]	@ 0x44
 8006942:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006946:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800694a:	f7fa f935 	bl	8000bb8 <__aeabi_uldivmod>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	4611      	mov	r1, r2
 8006954:	4b3b      	ldr	r3, [pc, #236]	@ (8006a44 <UART_SetConfig+0x2d4>)
 8006956:	fba3 2301 	umull	r2, r3, r3, r1
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	2264      	movs	r2, #100	@ 0x64
 800695e:	fb02 f303 	mul.w	r3, r2, r3
 8006962:	1acb      	subs	r3, r1, r3
 8006964:	00db      	lsls	r3, r3, #3
 8006966:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800696a:	4b36      	ldr	r3, [pc, #216]	@ (8006a44 <UART_SetConfig+0x2d4>)
 800696c:	fba3 2302 	umull	r2, r3, r3, r2
 8006970:	095b      	lsrs	r3, r3, #5
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006978:	441c      	add	r4, r3
 800697a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800697e:	2200      	movs	r2, #0
 8006980:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006984:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006988:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800698c:	4642      	mov	r2, r8
 800698e:	464b      	mov	r3, r9
 8006990:	1891      	adds	r1, r2, r2
 8006992:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006994:	415b      	adcs	r3, r3
 8006996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006998:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800699c:	4641      	mov	r1, r8
 800699e:	1851      	adds	r1, r2, r1
 80069a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80069a2:	4649      	mov	r1, r9
 80069a4:	414b      	adcs	r3, r1
 80069a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	f04f 0300 	mov.w	r3, #0
 80069b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80069b4:	4659      	mov	r1, fp
 80069b6:	00cb      	lsls	r3, r1, #3
 80069b8:	4651      	mov	r1, sl
 80069ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069be:	4651      	mov	r1, sl
 80069c0:	00ca      	lsls	r2, r1, #3
 80069c2:	4610      	mov	r0, r2
 80069c4:	4619      	mov	r1, r3
 80069c6:	4603      	mov	r3, r0
 80069c8:	4642      	mov	r2, r8
 80069ca:	189b      	adds	r3, r3, r2
 80069cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069d0:	464b      	mov	r3, r9
 80069d2:	460a      	mov	r2, r1
 80069d4:	eb42 0303 	adc.w	r3, r2, r3
 80069d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80069e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80069ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80069f0:	460b      	mov	r3, r1
 80069f2:	18db      	adds	r3, r3, r3
 80069f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069f6:	4613      	mov	r3, r2
 80069f8:	eb42 0303 	adc.w	r3, r2, r3
 80069fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006a06:	f7fa f8d7 	bl	8000bb8 <__aeabi_uldivmod>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a44 <UART_SetConfig+0x2d4>)
 8006a10:	fba3 1302 	umull	r1, r3, r3, r2
 8006a14:	095b      	lsrs	r3, r3, #5
 8006a16:	2164      	movs	r1, #100	@ 0x64
 8006a18:	fb01 f303 	mul.w	r3, r1, r3
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	3332      	adds	r3, #50	@ 0x32
 8006a22:	4a08      	ldr	r2, [pc, #32]	@ (8006a44 <UART_SetConfig+0x2d4>)
 8006a24:	fba2 2303 	umull	r2, r3, r2, r3
 8006a28:	095b      	lsrs	r3, r3, #5
 8006a2a:	f003 0207 	and.w	r2, r3, #7
 8006a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4422      	add	r2, r4
 8006a36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a38:	e106      	b.n	8006c48 <UART_SetConfig+0x4d8>
 8006a3a:	bf00      	nop
 8006a3c:	40011000 	.word	0x40011000
 8006a40:	40011400 	.word	0x40011400
 8006a44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006a56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006a5a:	4642      	mov	r2, r8
 8006a5c:	464b      	mov	r3, r9
 8006a5e:	1891      	adds	r1, r2, r2
 8006a60:	6239      	str	r1, [r7, #32]
 8006a62:	415b      	adcs	r3, r3
 8006a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a6a:	4641      	mov	r1, r8
 8006a6c:	1854      	adds	r4, r2, r1
 8006a6e:	4649      	mov	r1, r9
 8006a70:	eb43 0501 	adc.w	r5, r3, r1
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	f04f 0300 	mov.w	r3, #0
 8006a7c:	00eb      	lsls	r3, r5, #3
 8006a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a82:	00e2      	lsls	r2, r4, #3
 8006a84:	4614      	mov	r4, r2
 8006a86:	461d      	mov	r5, r3
 8006a88:	4643      	mov	r3, r8
 8006a8a:	18e3      	adds	r3, r4, r3
 8006a8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a90:	464b      	mov	r3, r9
 8006a92:	eb45 0303 	adc.w	r3, r5, r3
 8006a96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006aa6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006aaa:	f04f 0200 	mov.w	r2, #0
 8006aae:	f04f 0300 	mov.w	r3, #0
 8006ab2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	008b      	lsls	r3, r1, #2
 8006aba:	4621      	mov	r1, r4
 8006abc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ac0:	4621      	mov	r1, r4
 8006ac2:	008a      	lsls	r2, r1, #2
 8006ac4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006ac8:	f7fa f876 	bl	8000bb8 <__aeabi_uldivmod>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4b60      	ldr	r3, [pc, #384]	@ (8006c54 <UART_SetConfig+0x4e4>)
 8006ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ad6:	095b      	lsrs	r3, r3, #5
 8006ad8:	011c      	lsls	r4, r3, #4
 8006ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ae4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ae8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006aec:	4642      	mov	r2, r8
 8006aee:	464b      	mov	r3, r9
 8006af0:	1891      	adds	r1, r2, r2
 8006af2:	61b9      	str	r1, [r7, #24]
 8006af4:	415b      	adcs	r3, r3
 8006af6:	61fb      	str	r3, [r7, #28]
 8006af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006afc:	4641      	mov	r1, r8
 8006afe:	1851      	adds	r1, r2, r1
 8006b00:	6139      	str	r1, [r7, #16]
 8006b02:	4649      	mov	r1, r9
 8006b04:	414b      	adcs	r3, r1
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	f04f 0200 	mov.w	r2, #0
 8006b0c:	f04f 0300 	mov.w	r3, #0
 8006b10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b14:	4659      	mov	r1, fp
 8006b16:	00cb      	lsls	r3, r1, #3
 8006b18:	4651      	mov	r1, sl
 8006b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b1e:	4651      	mov	r1, sl
 8006b20:	00ca      	lsls	r2, r1, #3
 8006b22:	4610      	mov	r0, r2
 8006b24:	4619      	mov	r1, r3
 8006b26:	4603      	mov	r3, r0
 8006b28:	4642      	mov	r2, r8
 8006b2a:	189b      	adds	r3, r3, r2
 8006b2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b30:	464b      	mov	r3, r9
 8006b32:	460a      	mov	r2, r1
 8006b34:	eb42 0303 	adc.w	r3, r2, r3
 8006b38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006b48:	f04f 0200 	mov.w	r2, #0
 8006b4c:	f04f 0300 	mov.w	r3, #0
 8006b50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006b54:	4649      	mov	r1, r9
 8006b56:	008b      	lsls	r3, r1, #2
 8006b58:	4641      	mov	r1, r8
 8006b5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b5e:	4641      	mov	r1, r8
 8006b60:	008a      	lsls	r2, r1, #2
 8006b62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006b66:	f7fa f827 	bl	8000bb8 <__aeabi_uldivmod>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4611      	mov	r1, r2
 8006b70:	4b38      	ldr	r3, [pc, #224]	@ (8006c54 <UART_SetConfig+0x4e4>)
 8006b72:	fba3 2301 	umull	r2, r3, r3, r1
 8006b76:	095b      	lsrs	r3, r3, #5
 8006b78:	2264      	movs	r2, #100	@ 0x64
 8006b7a:	fb02 f303 	mul.w	r3, r2, r3
 8006b7e:	1acb      	subs	r3, r1, r3
 8006b80:	011b      	lsls	r3, r3, #4
 8006b82:	3332      	adds	r3, #50	@ 0x32
 8006b84:	4a33      	ldr	r2, [pc, #204]	@ (8006c54 <UART_SetConfig+0x4e4>)
 8006b86:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8a:	095b      	lsrs	r3, r3, #5
 8006b8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b90:	441c      	add	r4, r3
 8006b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b96:	2200      	movs	r2, #0
 8006b98:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006b9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ba0:	4642      	mov	r2, r8
 8006ba2:	464b      	mov	r3, r9
 8006ba4:	1891      	adds	r1, r2, r2
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	415b      	adcs	r3, r3
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bb0:	4641      	mov	r1, r8
 8006bb2:	1851      	adds	r1, r2, r1
 8006bb4:	6039      	str	r1, [r7, #0]
 8006bb6:	4649      	mov	r1, r9
 8006bb8:	414b      	adcs	r3, r1
 8006bba:	607b      	str	r3, [r7, #4]
 8006bbc:	f04f 0200 	mov.w	r2, #0
 8006bc0:	f04f 0300 	mov.w	r3, #0
 8006bc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bc8:	4659      	mov	r1, fp
 8006bca:	00cb      	lsls	r3, r1, #3
 8006bcc:	4651      	mov	r1, sl
 8006bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bd2:	4651      	mov	r1, sl
 8006bd4:	00ca      	lsls	r2, r1, #3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	4619      	mov	r1, r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	4642      	mov	r2, r8
 8006bde:	189b      	adds	r3, r3, r2
 8006be0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006be2:	464b      	mov	r3, r9
 8006be4:	460a      	mov	r2, r1
 8006be6:	eb42 0303 	adc.w	r3, r2, r3
 8006bea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bf6:	667a      	str	r2, [r7, #100]	@ 0x64
 8006bf8:	f04f 0200 	mov.w	r2, #0
 8006bfc:	f04f 0300 	mov.w	r3, #0
 8006c00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006c04:	4649      	mov	r1, r9
 8006c06:	008b      	lsls	r3, r1, #2
 8006c08:	4641      	mov	r1, r8
 8006c0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c0e:	4641      	mov	r1, r8
 8006c10:	008a      	lsls	r2, r1, #2
 8006c12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006c16:	f7f9 ffcf 	bl	8000bb8 <__aeabi_uldivmod>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c54 <UART_SetConfig+0x4e4>)
 8006c20:	fba3 1302 	umull	r1, r3, r3, r2
 8006c24:	095b      	lsrs	r3, r3, #5
 8006c26:	2164      	movs	r1, #100	@ 0x64
 8006c28:	fb01 f303 	mul.w	r3, r1, r3
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	011b      	lsls	r3, r3, #4
 8006c30:	3332      	adds	r3, #50	@ 0x32
 8006c32:	4a08      	ldr	r2, [pc, #32]	@ (8006c54 <UART_SetConfig+0x4e4>)
 8006c34:	fba2 2303 	umull	r2, r3, r2, r3
 8006c38:	095b      	lsrs	r3, r3, #5
 8006c3a:	f003 020f 	and.w	r2, r3, #15
 8006c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4422      	add	r2, r4
 8006c46:	609a      	str	r2, [r3, #8]
}
 8006c48:	bf00      	nop
 8006c4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c54:	51eb851f 	.word	0x51eb851f

08006c58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	4603      	mov	r3, r0
 8006c60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006c62:	2300      	movs	r3, #0
 8006c64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c6a:	2b84      	cmp	r3, #132	@ 0x84
 8006c6c:	d005      	beq.n	8006c7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006c6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4413      	add	r3, r2
 8006c76:	3303      	adds	r3, #3
 8006c78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006c8c:	f000 fafc 	bl	8007288 <vTaskStartScheduler>
  
  return osOK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006c96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c98:	b089      	sub	sp, #36	@ 0x24
 8006c9a:	af04      	add	r7, sp, #16
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d020      	beq.n	8006cea <osThreadCreate+0x54>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01c      	beq.n	8006cea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685c      	ldr	r4, [r3, #4]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691e      	ldr	r6, [r3, #16]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff ffc8 	bl	8006c58 <makeFreeRtosPriority>
 8006cc8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cd2:	9202      	str	r2, [sp, #8]
 8006cd4:	9301      	str	r3, [sp, #4]
 8006cd6:	9100      	str	r1, [sp, #0]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	4632      	mov	r2, r6
 8006cdc:	4629      	mov	r1, r5
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f000 f8ed 	bl	8006ebe <xTaskCreateStatic>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	e01c      	b.n	8006d24 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685c      	ldr	r4, [r3, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cf6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff ffaa 	bl	8006c58 <makeFreeRtosPriority>
 8006d04:	4602      	mov	r2, r0
 8006d06:	f107 030c 	add.w	r3, r7, #12
 8006d0a:	9301      	str	r3, [sp, #4]
 8006d0c:	9200      	str	r2, [sp, #0]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	4632      	mov	r2, r6
 8006d12:	4629      	mov	r1, r5
 8006d14:	4620      	mov	r0, r4
 8006d16:	f000 f932 	bl	8006f7e <xTaskCreate>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d001      	beq.n	8006d24 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006d20:	2300      	movs	r3, #0
 8006d22:	e000      	b.n	8006d26 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006d24:	68fb      	ldr	r3, [r7, #12]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d2e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <osDelay+0x16>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	e000      	b.n	8006d46 <osDelay+0x18>
 8006d44:	2301      	movs	r3, #1
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 fa68 	bl	800721c <vTaskDelay>
  
  return osOK;
 8006d4c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f103 0208 	add.w	r2, r3, #8
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d6e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f103 0208 	add.w	r2, r3, #8
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f103 0208 	add.w	r2, r3, #8
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d8a:	bf00      	nop
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	689a      	ldr	r2, [r3, #8]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	601a      	str	r2, [r3, #0]
}
 8006dec:	bf00      	nop
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0e:	d103      	bne.n	8006e18 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	e00c      	b.n	8006e32 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	60fb      	str	r3, [r7, #12]
 8006e1e:	e002      	b.n	8006e26 <vListInsert+0x2e>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	60fb      	str	r3, [r7, #12]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d2f6      	bcs.n	8006e20 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	601a      	str	r2, [r3, #0]
}
 8006e5e:	bf00      	nop
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b085      	sub	sp, #20
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6892      	ldr	r2, [r2, #8]
 8006e80:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6852      	ldr	r2, [r2, #4]
 8006e8a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d103      	bne.n	8006e9e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	1e5a      	subs	r2, r3, #1
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b08e      	sub	sp, #56	@ 0x38
 8006ec2:	af04      	add	r7, sp, #16
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	607a      	str	r2, [r7, #4]
 8006eca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10b      	bne.n	8006eea <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
 8006ee8:	e7fd      	b.n	8006ee6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10b      	bne.n	8006f08 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	61fb      	str	r3, [r7, #28]
}
 8006f02:	bf00      	nop
 8006f04:	bf00      	nop
 8006f06:	e7fd      	b.n	8006f04 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f08:	23a0      	movs	r3, #160	@ 0xa0
 8006f0a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006f10:	d00b      	beq.n	8006f2a <xTaskCreateStatic+0x6c>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	61bb      	str	r3, [r7, #24]
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop
 8006f28:	e7fd      	b.n	8006f26 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01e      	beq.n	8006f70 <xTaskCreateStatic+0xb2>
 8006f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d01b      	beq.n	8006f70 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f40:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f44:	2202      	movs	r2, #2
 8006f46:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	9303      	str	r3, [sp, #12]
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	9302      	str	r3, [sp, #8]
 8006f52:	f107 0314 	add.w	r3, r7, #20
 8006f56:	9301      	str	r3, [sp, #4]
 8006f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	68b9      	ldr	r1, [r7, #8]
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f000 f850 	bl	8007008 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f6a:	f000 f8ed 	bl	8007148 <prvAddNewTaskToReadyList>
 8006f6e:	e001      	b.n	8006f74 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f74:	697b      	ldr	r3, [r7, #20]
	}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3728      	adds	r7, #40	@ 0x28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b08c      	sub	sp, #48	@ 0x30
 8006f82:	af04      	add	r7, sp, #16
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	603b      	str	r3, [r7, #0]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 ff00 	bl	8007d98 <pvPortMalloc>
 8006f98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00e      	beq.n	8006fbe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006fa0:	20a0      	movs	r0, #160	@ 0xa0
 8006fa2:	f000 fef9 	bl	8007d98 <pvPortMalloc>
 8006fa6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8006fb4:	e005      	b.n	8006fc2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006fb6:	6978      	ldr	r0, [r7, #20]
 8006fb8:	f000 ffbc 	bl	8007f34 <vPortFree>
 8006fbc:	e001      	b.n	8006fc2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d017      	beq.n	8006ff8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006fd0:	88fa      	ldrh	r2, [r7, #6]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	9303      	str	r3, [sp, #12]
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	9302      	str	r3, [sp, #8]
 8006fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fdc:	9301      	str	r3, [sp, #4]
 8006fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68b9      	ldr	r1, [r7, #8]
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 f80e 	bl	8007008 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fec:	69f8      	ldr	r0, [r7, #28]
 8006fee:	f000 f8ab 	bl	8007148 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	61bb      	str	r3, [r7, #24]
 8006ff6:	e002      	b.n	8006ffe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ffc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ffe:	69bb      	ldr	r3, [r7, #24]
	}
 8007000:	4618      	mov	r0, r3
 8007002:	3720      	adds	r7, #32
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b088      	sub	sp, #32
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007018:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007020:	3b01      	subs	r3, #1
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	f023 0307 	bic.w	r3, r3, #7
 800702e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	f003 0307 	and.w	r3, r3, #7
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00b      	beq.n	8007052 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	617b      	str	r3, [r7, #20]
}
 800704c:	bf00      	nop
 800704e:	bf00      	nop
 8007050:	e7fd      	b.n	800704e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d01f      	beq.n	8007098 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007058:	2300      	movs	r3, #0
 800705a:	61fb      	str	r3, [r7, #28]
 800705c:	e012      	b.n	8007084 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	4413      	add	r3, r2
 8007064:	7819      	ldrb	r1, [r3, #0]
 8007066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	4413      	add	r3, r2
 800706c:	3334      	adds	r3, #52	@ 0x34
 800706e:	460a      	mov	r2, r1
 8007070:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	4413      	add	r3, r2
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d006      	beq.n	800708c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	3301      	adds	r3, #1
 8007082:	61fb      	str	r3, [r7, #28]
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	2b0f      	cmp	r3, #15
 8007088:	d9e9      	bls.n	800705e <prvInitialiseNewTask+0x56>
 800708a:	e000      	b.n	800708e <prvInitialiseNewTask+0x86>
			{
				break;
 800708c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007096:	e003      	b.n	80070a0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80070a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a2:	2b06      	cmp	r3, #6
 80070a4:	d901      	bls.n	80070aa <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80070a6:	2306      	movs	r3, #6
 80070a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80070aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070b4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80070b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b8:	2200      	movs	r2, #0
 80070ba:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070be:	3304      	adds	r3, #4
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff fe68 	bl	8006d96 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c8:	3318      	adds	r3, #24
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7ff fe63 	bl	8006d96 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80070d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d8:	f1c3 0207 	rsb	r2, r3, #7
 80070dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070e4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e8:	2200      	movs	r2, #0
 80070ea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80070f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f8:	334c      	adds	r3, #76	@ 0x4c
 80070fa:	224c      	movs	r2, #76	@ 0x4c
 80070fc:	2100      	movs	r1, #0
 80070fe:	4618      	mov	r0, r3
 8007100:	f001 fdf5 	bl	8008cee <memset>
 8007104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007106:	4a0d      	ldr	r2, [pc, #52]	@ (800713c <prvInitialiseNewTask+0x134>)
 8007108:	651a      	str	r2, [r3, #80]	@ 0x50
 800710a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710c:	4a0c      	ldr	r2, [pc, #48]	@ (8007140 <prvInitialiseNewTask+0x138>)
 800710e:	655a      	str	r2, [r3, #84]	@ 0x54
 8007110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007112:	4a0c      	ldr	r2, [pc, #48]	@ (8007144 <prvInitialiseNewTask+0x13c>)
 8007114:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	68f9      	ldr	r1, [r7, #12]
 800711a:	69b8      	ldr	r0, [r7, #24]
 800711c:	f000 fc2a 	bl	8007974 <pxPortInitialiseStack>
 8007120:	4602      	mov	r2, r0
 8007122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007124:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800712c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800712e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007130:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007132:	bf00      	nop
 8007134:	3720      	adds	r7, #32
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	20004fa0 	.word	0x20004fa0
 8007140:	20005008 	.word	0x20005008
 8007144:	20005070 	.word	0x20005070

08007148 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007150:	f000 fd42 	bl	8007bd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007154:	4b2a      	ldr	r3, [pc, #168]	@ (8007200 <prvAddNewTaskToReadyList+0xb8>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3301      	adds	r3, #1
 800715a:	4a29      	ldr	r2, [pc, #164]	@ (8007200 <prvAddNewTaskToReadyList+0xb8>)
 800715c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800715e:	4b29      	ldr	r3, [pc, #164]	@ (8007204 <prvAddNewTaskToReadyList+0xbc>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d109      	bne.n	800717a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007166:	4a27      	ldr	r2, [pc, #156]	@ (8007204 <prvAddNewTaskToReadyList+0xbc>)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800716c:	4b24      	ldr	r3, [pc, #144]	@ (8007200 <prvAddNewTaskToReadyList+0xb8>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d110      	bne.n	8007196 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007174:	f000 fad4 	bl	8007720 <prvInitialiseTaskLists>
 8007178:	e00d      	b.n	8007196 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800717a:	4b23      	ldr	r3, [pc, #140]	@ (8007208 <prvAddNewTaskToReadyList+0xc0>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d109      	bne.n	8007196 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007182:	4b20      	ldr	r3, [pc, #128]	@ (8007204 <prvAddNewTaskToReadyList+0xbc>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718c:	429a      	cmp	r2, r3
 800718e:	d802      	bhi.n	8007196 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007190:	4a1c      	ldr	r2, [pc, #112]	@ (8007204 <prvAddNewTaskToReadyList+0xbc>)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007196:	4b1d      	ldr	r3, [pc, #116]	@ (800720c <prvAddNewTaskToReadyList+0xc4>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3301      	adds	r3, #1
 800719c:	4a1b      	ldr	r2, [pc, #108]	@ (800720c <prvAddNewTaskToReadyList+0xc4>)
 800719e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a4:	2201      	movs	r2, #1
 80071a6:	409a      	lsls	r2, r3
 80071a8:	4b19      	ldr	r3, [pc, #100]	@ (8007210 <prvAddNewTaskToReadyList+0xc8>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	4a18      	ldr	r2, [pc, #96]	@ (8007210 <prvAddNewTaskToReadyList+0xc8>)
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071b6:	4613      	mov	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4a15      	ldr	r2, [pc, #84]	@ (8007214 <prvAddNewTaskToReadyList+0xcc>)
 80071c0:	441a      	add	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	3304      	adds	r3, #4
 80071c6:	4619      	mov	r1, r3
 80071c8:	4610      	mov	r0, r2
 80071ca:	f7ff fdf1 	bl	8006db0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071ce:	f000 fd35 	bl	8007c3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007208 <prvAddNewTaskToReadyList+0xc0>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00e      	beq.n	80071f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071da:	4b0a      	ldr	r3, [pc, #40]	@ (8007204 <prvAddNewTaskToReadyList+0xbc>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d207      	bcs.n	80071f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80071e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007218 <prvAddNewTaskToReadyList+0xd0>)
 80071ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071f8:	bf00      	nop
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	2000134c 	.word	0x2000134c
 8007204:	2000124c 	.word	0x2000124c
 8007208:	20001358 	.word	0x20001358
 800720c:	20001368 	.word	0x20001368
 8007210:	20001354 	.word	0x20001354
 8007214:	20001250 	.word	0x20001250
 8007218:	e000ed04 	.word	0xe000ed04

0800721c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007224:	2300      	movs	r3, #0
 8007226:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d018      	beq.n	8007260 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800722e:	4b14      	ldr	r3, [pc, #80]	@ (8007280 <vTaskDelay+0x64>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00b      	beq.n	800724e <vTaskDelay+0x32>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	60bb      	str	r3, [r7, #8]
}
 8007248:	bf00      	nop
 800724a:	bf00      	nop
 800724c:	e7fd      	b.n	800724a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800724e:	f000 f885 	bl	800735c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007252:	2100      	movs	r1, #0
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fb27 	bl	80078a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800725a:	f000 f88d 	bl	8007378 <xTaskResumeAll>
 800725e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d107      	bne.n	8007276 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007266:	4b07      	ldr	r3, [pc, #28]	@ (8007284 <vTaskDelay+0x68>)
 8007268:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007276:	bf00      	nop
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20001374 	.word	0x20001374
 8007284:	e000ed04 	.word	0xe000ed04

08007288 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b08a      	sub	sp, #40	@ 0x28
 800728c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800728e:	2300      	movs	r3, #0
 8007290:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007292:	2300      	movs	r3, #0
 8007294:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007296:	463a      	mov	r2, r7
 8007298:	1d39      	adds	r1, r7, #4
 800729a:	f107 0308 	add.w	r3, r7, #8
 800729e:	4618      	mov	r0, r3
 80072a0:	f7f9 fe6e 	bl	8000f80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072a4:	6839      	ldr	r1, [r7, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	9202      	str	r2, [sp, #8]
 80072ac:	9301      	str	r3, [sp, #4]
 80072ae:	2300      	movs	r3, #0
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	2300      	movs	r3, #0
 80072b4:	460a      	mov	r2, r1
 80072b6:	4921      	ldr	r1, [pc, #132]	@ (800733c <vTaskStartScheduler+0xb4>)
 80072b8:	4821      	ldr	r0, [pc, #132]	@ (8007340 <vTaskStartScheduler+0xb8>)
 80072ba:	f7ff fe00 	bl	8006ebe <xTaskCreateStatic>
 80072be:	4603      	mov	r3, r0
 80072c0:	4a20      	ldr	r2, [pc, #128]	@ (8007344 <vTaskStartScheduler+0xbc>)
 80072c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072c4:	4b1f      	ldr	r3, [pc, #124]	@ (8007344 <vTaskStartScheduler+0xbc>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072cc:	2301      	movs	r3, #1
 80072ce:	617b      	str	r3, [r7, #20]
 80072d0:	e001      	b.n	80072d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d11b      	bne.n	8007314 <vTaskStartScheduler+0x8c>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	613b      	str	r3, [r7, #16]
}
 80072ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80072f0:	4b15      	ldr	r3, [pc, #84]	@ (8007348 <vTaskStartScheduler+0xc0>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	334c      	adds	r3, #76	@ 0x4c
 80072f6:	4a15      	ldr	r2, [pc, #84]	@ (800734c <vTaskStartScheduler+0xc4>)
 80072f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80072fa:	4b15      	ldr	r3, [pc, #84]	@ (8007350 <vTaskStartScheduler+0xc8>)
 80072fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007300:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007302:	4b14      	ldr	r3, [pc, #80]	@ (8007354 <vTaskStartScheduler+0xcc>)
 8007304:	2201      	movs	r2, #1
 8007306:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007308:	4b13      	ldr	r3, [pc, #76]	@ (8007358 <vTaskStartScheduler+0xd0>)
 800730a:	2200      	movs	r2, #0
 800730c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800730e:	f000 fbbf 	bl	8007a90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007312:	e00f      	b.n	8007334 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731a:	d10b      	bne.n	8007334 <vTaskStartScheduler+0xac>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	60fb      	str	r3, [r7, #12]
}
 800732e:	bf00      	nop
 8007330:	bf00      	nop
 8007332:	e7fd      	b.n	8007330 <vTaskStartScheduler+0xa8>
}
 8007334:	bf00      	nop
 8007336:	3718      	adds	r7, #24
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	0800b950 	.word	0x0800b950
 8007340:	080076f1 	.word	0x080076f1
 8007344:	20001370 	.word	0x20001370
 8007348:	2000124c 	.word	0x2000124c
 800734c:	2000001c 	.word	0x2000001c
 8007350:	2000136c 	.word	0x2000136c
 8007354:	20001358 	.word	0x20001358
 8007358:	20001350 	.word	0x20001350

0800735c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800735c:	b480      	push	{r7}
 800735e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007360:	4b04      	ldr	r3, [pc, #16]	@ (8007374 <vTaskSuspendAll+0x18>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3301      	adds	r3, #1
 8007366:	4a03      	ldr	r2, [pc, #12]	@ (8007374 <vTaskSuspendAll+0x18>)
 8007368:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800736a:	bf00      	nop
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	20001374 	.word	0x20001374

08007378 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800737e:	2300      	movs	r3, #0
 8007380:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007382:	2300      	movs	r3, #0
 8007384:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007386:	4b42      	ldr	r3, [pc, #264]	@ (8007490 <xTaskResumeAll+0x118>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10b      	bne.n	80073a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	603b      	str	r3, [r7, #0]
}
 80073a0:	bf00      	nop
 80073a2:	bf00      	nop
 80073a4:	e7fd      	b.n	80073a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073a6:	f000 fc17 	bl	8007bd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073aa:	4b39      	ldr	r3, [pc, #228]	@ (8007490 <xTaskResumeAll+0x118>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	4a37      	ldr	r2, [pc, #220]	@ (8007490 <xTaskResumeAll+0x118>)
 80073b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073b4:	4b36      	ldr	r3, [pc, #216]	@ (8007490 <xTaskResumeAll+0x118>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d161      	bne.n	8007480 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073bc:	4b35      	ldr	r3, [pc, #212]	@ (8007494 <xTaskResumeAll+0x11c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d05d      	beq.n	8007480 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073c4:	e02e      	b.n	8007424 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073c6:	4b34      	ldr	r3, [pc, #208]	@ (8007498 <xTaskResumeAll+0x120>)
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3318      	adds	r3, #24
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7ff fd49 	bl	8006e6a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3304      	adds	r3, #4
 80073dc:	4618      	mov	r0, r3
 80073de:	f7ff fd44 	bl	8006e6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e6:	2201      	movs	r2, #1
 80073e8:	409a      	lsls	r2, r3
 80073ea:	4b2c      	ldr	r3, [pc, #176]	@ (800749c <xTaskResumeAll+0x124>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	4a2a      	ldr	r2, [pc, #168]	@ (800749c <xTaskResumeAll+0x124>)
 80073f2:	6013      	str	r3, [r2, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4a27      	ldr	r2, [pc, #156]	@ (80074a0 <xTaskResumeAll+0x128>)
 8007402:	441a      	add	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	3304      	adds	r3, #4
 8007408:	4619      	mov	r1, r3
 800740a:	4610      	mov	r0, r2
 800740c:	f7ff fcd0 	bl	8006db0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007414:	4b23      	ldr	r3, [pc, #140]	@ (80074a4 <xTaskResumeAll+0x12c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741a:	429a      	cmp	r2, r3
 800741c:	d302      	bcc.n	8007424 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800741e:	4b22      	ldr	r3, [pc, #136]	@ (80074a8 <xTaskResumeAll+0x130>)
 8007420:	2201      	movs	r2, #1
 8007422:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007424:	4b1c      	ldr	r3, [pc, #112]	@ (8007498 <xTaskResumeAll+0x120>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1cc      	bne.n	80073c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007432:	f000 fa19 	bl	8007868 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007436:	4b1d      	ldr	r3, [pc, #116]	@ (80074ac <xTaskResumeAll+0x134>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d010      	beq.n	8007464 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007442:	f000 f837 	bl	80074b4 <xTaskIncrementTick>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800744c:	4b16      	ldr	r3, [pc, #88]	@ (80074a8 <xTaskResumeAll+0x130>)
 800744e:	2201      	movs	r2, #1
 8007450:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3b01      	subs	r3, #1
 8007456:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1f1      	bne.n	8007442 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800745e:	4b13      	ldr	r3, [pc, #76]	@ (80074ac <xTaskResumeAll+0x134>)
 8007460:	2200      	movs	r2, #0
 8007462:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007464:	4b10      	ldr	r3, [pc, #64]	@ (80074a8 <xTaskResumeAll+0x130>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d009      	beq.n	8007480 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800746c:	2301      	movs	r3, #1
 800746e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007470:	4b0f      	ldr	r3, [pc, #60]	@ (80074b0 <xTaskResumeAll+0x138>)
 8007472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007480:	f000 fbdc 	bl	8007c3c <vPortExitCritical>

	return xAlreadyYielded;
 8007484:	68bb      	ldr	r3, [r7, #8]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	20001374 	.word	0x20001374
 8007494:	2000134c 	.word	0x2000134c
 8007498:	2000130c 	.word	0x2000130c
 800749c:	20001354 	.word	0x20001354
 80074a0:	20001250 	.word	0x20001250
 80074a4:	2000124c 	.word	0x2000124c
 80074a8:	20001360 	.word	0x20001360
 80074ac:	2000135c 	.word	0x2000135c
 80074b0:	e000ed04 	.word	0xe000ed04

080074b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074ba:	2300      	movs	r3, #0
 80074bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074be:	4b4f      	ldr	r3, [pc, #316]	@ (80075fc <xTaskIncrementTick+0x148>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f040 808f 	bne.w	80075e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074c8:	4b4d      	ldr	r3, [pc, #308]	@ (8007600 <xTaskIncrementTick+0x14c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3301      	adds	r3, #1
 80074ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80074d0:	4a4b      	ldr	r2, [pc, #300]	@ (8007600 <xTaskIncrementTick+0x14c>)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d121      	bne.n	8007520 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80074dc:	4b49      	ldr	r3, [pc, #292]	@ (8007604 <xTaskIncrementTick+0x150>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00b      	beq.n	80074fe <xTaskIncrementTick+0x4a>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	603b      	str	r3, [r7, #0]
}
 80074f8:	bf00      	nop
 80074fa:	bf00      	nop
 80074fc:	e7fd      	b.n	80074fa <xTaskIncrementTick+0x46>
 80074fe:	4b41      	ldr	r3, [pc, #260]	@ (8007604 <xTaskIncrementTick+0x150>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	4b40      	ldr	r3, [pc, #256]	@ (8007608 <xTaskIncrementTick+0x154>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a3e      	ldr	r2, [pc, #248]	@ (8007604 <xTaskIncrementTick+0x150>)
 800750a:	6013      	str	r3, [r2, #0]
 800750c:	4a3e      	ldr	r2, [pc, #248]	@ (8007608 <xTaskIncrementTick+0x154>)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6013      	str	r3, [r2, #0]
 8007512:	4b3e      	ldr	r3, [pc, #248]	@ (800760c <xTaskIncrementTick+0x158>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3301      	adds	r3, #1
 8007518:	4a3c      	ldr	r2, [pc, #240]	@ (800760c <xTaskIncrementTick+0x158>)
 800751a:	6013      	str	r3, [r2, #0]
 800751c:	f000 f9a4 	bl	8007868 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007520:	4b3b      	ldr	r3, [pc, #236]	@ (8007610 <xTaskIncrementTick+0x15c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	429a      	cmp	r2, r3
 8007528:	d348      	bcc.n	80075bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800752a:	4b36      	ldr	r3, [pc, #216]	@ (8007604 <xTaskIncrementTick+0x150>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d104      	bne.n	800753e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007534:	4b36      	ldr	r3, [pc, #216]	@ (8007610 <xTaskIncrementTick+0x15c>)
 8007536:	f04f 32ff 	mov.w	r2, #4294967295
 800753a:	601a      	str	r2, [r3, #0]
					break;
 800753c:	e03e      	b.n	80075bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800753e:	4b31      	ldr	r3, [pc, #196]	@ (8007604 <xTaskIncrementTick+0x150>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	429a      	cmp	r2, r3
 8007554:	d203      	bcs.n	800755e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007556:	4a2e      	ldr	r2, [pc, #184]	@ (8007610 <xTaskIncrementTick+0x15c>)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800755c:	e02e      	b.n	80075bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	3304      	adds	r3, #4
 8007562:	4618      	mov	r0, r3
 8007564:	f7ff fc81 	bl	8006e6a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756c:	2b00      	cmp	r3, #0
 800756e:	d004      	beq.n	800757a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	3318      	adds	r3, #24
 8007574:	4618      	mov	r0, r3
 8007576:	f7ff fc78 	bl	8006e6a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800757e:	2201      	movs	r2, #1
 8007580:	409a      	lsls	r2, r3
 8007582:	4b24      	ldr	r3, [pc, #144]	@ (8007614 <xTaskIncrementTick+0x160>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4313      	orrs	r3, r2
 8007588:	4a22      	ldr	r2, [pc, #136]	@ (8007614 <xTaskIncrementTick+0x160>)
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007590:	4613      	mov	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4a1f      	ldr	r2, [pc, #124]	@ (8007618 <xTaskIncrementTick+0x164>)
 800759a:	441a      	add	r2, r3
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	3304      	adds	r3, #4
 80075a0:	4619      	mov	r1, r3
 80075a2:	4610      	mov	r0, r2
 80075a4:	f7ff fc04 	bl	8006db0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ac:	4b1b      	ldr	r3, [pc, #108]	@ (800761c <xTaskIncrementTick+0x168>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d3b9      	bcc.n	800752a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80075b6:	2301      	movs	r3, #1
 80075b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075ba:	e7b6      	b.n	800752a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075bc:	4b17      	ldr	r3, [pc, #92]	@ (800761c <xTaskIncrementTick+0x168>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c2:	4915      	ldr	r1, [pc, #84]	@ (8007618 <xTaskIncrementTick+0x164>)
 80075c4:	4613      	mov	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	440b      	add	r3, r1
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d901      	bls.n	80075d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80075d4:	2301      	movs	r3, #1
 80075d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80075d8:	4b11      	ldr	r3, [pc, #68]	@ (8007620 <xTaskIncrementTick+0x16c>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d007      	beq.n	80075f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80075e0:	2301      	movs	r3, #1
 80075e2:	617b      	str	r3, [r7, #20]
 80075e4:	e004      	b.n	80075f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80075e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007624 <xTaskIncrementTick+0x170>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3301      	adds	r3, #1
 80075ec:	4a0d      	ldr	r2, [pc, #52]	@ (8007624 <xTaskIncrementTick+0x170>)
 80075ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80075f0:	697b      	ldr	r3, [r7, #20]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3718      	adds	r7, #24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	20001374 	.word	0x20001374
 8007600:	20001350 	.word	0x20001350
 8007604:	20001304 	.word	0x20001304
 8007608:	20001308 	.word	0x20001308
 800760c:	20001364 	.word	0x20001364
 8007610:	2000136c 	.word	0x2000136c
 8007614:	20001354 	.word	0x20001354
 8007618:	20001250 	.word	0x20001250
 800761c:	2000124c 	.word	0x2000124c
 8007620:	20001360 	.word	0x20001360
 8007624:	2000135c 	.word	0x2000135c

08007628 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800762e:	4b2a      	ldr	r3, [pc, #168]	@ (80076d8 <vTaskSwitchContext+0xb0>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d003      	beq.n	800763e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007636:	4b29      	ldr	r3, [pc, #164]	@ (80076dc <vTaskSwitchContext+0xb4>)
 8007638:	2201      	movs	r2, #1
 800763a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800763c:	e045      	b.n	80076ca <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800763e:	4b27      	ldr	r3, [pc, #156]	@ (80076dc <vTaskSwitchContext+0xb4>)
 8007640:	2200      	movs	r2, #0
 8007642:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007644:	4b26      	ldr	r3, [pc, #152]	@ (80076e0 <vTaskSwitchContext+0xb8>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	fab3 f383 	clz	r3, r3
 8007650:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007652:	7afb      	ldrb	r3, [r7, #11]
 8007654:	f1c3 031f 	rsb	r3, r3, #31
 8007658:	617b      	str	r3, [r7, #20]
 800765a:	4922      	ldr	r1, [pc, #136]	@ (80076e4 <vTaskSwitchContext+0xbc>)
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	4613      	mov	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	440b      	add	r3, r1
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10b      	bne.n	8007686 <vTaskSwitchContext+0x5e>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	607b      	str	r3, [r7, #4]
}
 8007680:	bf00      	nop
 8007682:	bf00      	nop
 8007684:	e7fd      	b.n	8007682 <vTaskSwitchContext+0x5a>
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	4613      	mov	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4a14      	ldr	r2, [pc, #80]	@ (80076e4 <vTaskSwitchContext+0xbc>)
 8007692:	4413      	add	r3, r2
 8007694:	613b      	str	r3, [r7, #16]
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	605a      	str	r2, [r3, #4]
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	3308      	adds	r3, #8
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d104      	bne.n	80076b6 <vTaskSwitchContext+0x8e>
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	605a      	str	r2, [r3, #4]
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	4a0a      	ldr	r2, [pc, #40]	@ (80076e8 <vTaskSwitchContext+0xc0>)
 80076be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076c0:	4b09      	ldr	r3, [pc, #36]	@ (80076e8 <vTaskSwitchContext+0xc0>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	334c      	adds	r3, #76	@ 0x4c
 80076c6:	4a09      	ldr	r2, [pc, #36]	@ (80076ec <vTaskSwitchContext+0xc4>)
 80076c8:	6013      	str	r3, [r2, #0]
}
 80076ca:	bf00      	nop
 80076cc:	371c      	adds	r7, #28
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	20001374 	.word	0x20001374
 80076dc:	20001360 	.word	0x20001360
 80076e0:	20001354 	.word	0x20001354
 80076e4:	20001250 	.word	0x20001250
 80076e8:	2000124c 	.word	0x2000124c
 80076ec:	2000001c 	.word	0x2000001c

080076f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076f8:	f000 f852 	bl	80077a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076fc:	4b06      	ldr	r3, [pc, #24]	@ (8007718 <prvIdleTask+0x28>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d9f9      	bls.n	80076f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007704:	4b05      	ldr	r3, [pc, #20]	@ (800771c <prvIdleTask+0x2c>)
 8007706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007714:	e7f0      	b.n	80076f8 <prvIdleTask+0x8>
 8007716:	bf00      	nop
 8007718:	20001250 	.word	0x20001250
 800771c:	e000ed04 	.word	0xe000ed04

08007720 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007726:	2300      	movs	r3, #0
 8007728:	607b      	str	r3, [r7, #4]
 800772a:	e00c      	b.n	8007746 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	4613      	mov	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4a12      	ldr	r2, [pc, #72]	@ (8007780 <prvInitialiseTaskLists+0x60>)
 8007738:	4413      	add	r3, r2
 800773a:	4618      	mov	r0, r3
 800773c:	f7ff fb0b 	bl	8006d56 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3301      	adds	r3, #1
 8007744:	607b      	str	r3, [r7, #4]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b06      	cmp	r3, #6
 800774a:	d9ef      	bls.n	800772c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800774c:	480d      	ldr	r0, [pc, #52]	@ (8007784 <prvInitialiseTaskLists+0x64>)
 800774e:	f7ff fb02 	bl	8006d56 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007752:	480d      	ldr	r0, [pc, #52]	@ (8007788 <prvInitialiseTaskLists+0x68>)
 8007754:	f7ff faff 	bl	8006d56 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007758:	480c      	ldr	r0, [pc, #48]	@ (800778c <prvInitialiseTaskLists+0x6c>)
 800775a:	f7ff fafc 	bl	8006d56 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800775e:	480c      	ldr	r0, [pc, #48]	@ (8007790 <prvInitialiseTaskLists+0x70>)
 8007760:	f7ff faf9 	bl	8006d56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007764:	480b      	ldr	r0, [pc, #44]	@ (8007794 <prvInitialiseTaskLists+0x74>)
 8007766:	f7ff faf6 	bl	8006d56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800776a:	4b0b      	ldr	r3, [pc, #44]	@ (8007798 <prvInitialiseTaskLists+0x78>)
 800776c:	4a05      	ldr	r2, [pc, #20]	@ (8007784 <prvInitialiseTaskLists+0x64>)
 800776e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007770:	4b0a      	ldr	r3, [pc, #40]	@ (800779c <prvInitialiseTaskLists+0x7c>)
 8007772:	4a05      	ldr	r2, [pc, #20]	@ (8007788 <prvInitialiseTaskLists+0x68>)
 8007774:	601a      	str	r2, [r3, #0]
}
 8007776:	bf00      	nop
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	20001250 	.word	0x20001250
 8007784:	200012dc 	.word	0x200012dc
 8007788:	200012f0 	.word	0x200012f0
 800778c:	2000130c 	.word	0x2000130c
 8007790:	20001320 	.word	0x20001320
 8007794:	20001338 	.word	0x20001338
 8007798:	20001304 	.word	0x20001304
 800779c:	20001308 	.word	0x20001308

080077a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077a6:	e019      	b.n	80077dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077a8:	f000 fa16 	bl	8007bd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077ac:	4b10      	ldr	r3, [pc, #64]	@ (80077f0 <prvCheckTasksWaitingTermination+0x50>)
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	3304      	adds	r3, #4
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7ff fb56 	bl	8006e6a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077be:	4b0d      	ldr	r3, [pc, #52]	@ (80077f4 <prvCheckTasksWaitingTermination+0x54>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	4a0b      	ldr	r2, [pc, #44]	@ (80077f4 <prvCheckTasksWaitingTermination+0x54>)
 80077c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077c8:	4b0b      	ldr	r3, [pc, #44]	@ (80077f8 <prvCheckTasksWaitingTermination+0x58>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3b01      	subs	r3, #1
 80077ce:	4a0a      	ldr	r2, [pc, #40]	@ (80077f8 <prvCheckTasksWaitingTermination+0x58>)
 80077d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077d2:	f000 fa33 	bl	8007c3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f810 	bl	80077fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077dc:	4b06      	ldr	r3, [pc, #24]	@ (80077f8 <prvCheckTasksWaitingTermination+0x58>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e1      	bne.n	80077a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20001320 	.word	0x20001320
 80077f4:	2000134c 	.word	0x2000134c
 80077f8:	20001334 	.word	0x20001334

080077fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	334c      	adds	r3, #76	@ 0x4c
 8007808:	4618      	mov	r0, r3
 800780a:	f001 fa9f 	bl	8008d4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007814:	2b00      	cmp	r3, #0
 8007816:	d108      	bne.n	800782a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800781c:	4618      	mov	r0, r3
 800781e:	f000 fb89 	bl	8007f34 <vPortFree>
				vPortFree( pxTCB );
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fb86 	bl	8007f34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007828:	e019      	b.n	800785e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007830:	2b01      	cmp	r3, #1
 8007832:	d103      	bne.n	800783c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fb7d 	bl	8007f34 <vPortFree>
	}
 800783a:	e010      	b.n	800785e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007842:	2b02      	cmp	r3, #2
 8007844:	d00b      	beq.n	800785e <prvDeleteTCB+0x62>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	60fb      	str	r3, [r7, #12]
}
 8007858:	bf00      	nop
 800785a:	bf00      	nop
 800785c:	e7fd      	b.n	800785a <prvDeleteTCB+0x5e>
	}
 800785e:	bf00      	nop
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
	...

08007868 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800786e:	4b0c      	ldr	r3, [pc, #48]	@ (80078a0 <prvResetNextTaskUnblockTime+0x38>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d104      	bne.n	8007882 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007878:	4b0a      	ldr	r3, [pc, #40]	@ (80078a4 <prvResetNextTaskUnblockTime+0x3c>)
 800787a:	f04f 32ff 	mov.w	r2, #4294967295
 800787e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007880:	e008      	b.n	8007894 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007882:	4b07      	ldr	r3, [pc, #28]	@ (80078a0 <prvResetNextTaskUnblockTime+0x38>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	4a04      	ldr	r2, [pc, #16]	@ (80078a4 <prvResetNextTaskUnblockTime+0x3c>)
 8007892:	6013      	str	r3, [r2, #0]
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	20001304 	.word	0x20001304
 80078a4:	2000136c 	.word	0x2000136c

080078a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078b2:	4b29      	ldr	r3, [pc, #164]	@ (8007958 <prvAddCurrentTaskToDelayedList+0xb0>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078b8:	4b28      	ldr	r3, [pc, #160]	@ (800795c <prvAddCurrentTaskToDelayedList+0xb4>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3304      	adds	r3, #4
 80078be:	4618      	mov	r0, r3
 80078c0:	f7ff fad3 	bl	8006e6a <uxListRemove>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10b      	bne.n	80078e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80078ca:	4b24      	ldr	r3, [pc, #144]	@ (800795c <prvAddCurrentTaskToDelayedList+0xb4>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d0:	2201      	movs	r2, #1
 80078d2:	fa02 f303 	lsl.w	r3, r2, r3
 80078d6:	43da      	mvns	r2, r3
 80078d8:	4b21      	ldr	r3, [pc, #132]	@ (8007960 <prvAddCurrentTaskToDelayedList+0xb8>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4013      	ands	r3, r2
 80078de:	4a20      	ldr	r2, [pc, #128]	@ (8007960 <prvAddCurrentTaskToDelayedList+0xb8>)
 80078e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e8:	d10a      	bne.n	8007900 <prvAddCurrentTaskToDelayedList+0x58>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d007      	beq.n	8007900 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078f0:	4b1a      	ldr	r3, [pc, #104]	@ (800795c <prvAddCurrentTaskToDelayedList+0xb4>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3304      	adds	r3, #4
 80078f6:	4619      	mov	r1, r3
 80078f8:	481a      	ldr	r0, [pc, #104]	@ (8007964 <prvAddCurrentTaskToDelayedList+0xbc>)
 80078fa:	f7ff fa59 	bl	8006db0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078fe:	e026      	b.n	800794e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4413      	add	r3, r2
 8007906:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007908:	4b14      	ldr	r3, [pc, #80]	@ (800795c <prvAddCurrentTaskToDelayedList+0xb4>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	429a      	cmp	r2, r3
 8007916:	d209      	bcs.n	800792c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007918:	4b13      	ldr	r3, [pc, #76]	@ (8007968 <prvAddCurrentTaskToDelayedList+0xc0>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	4b0f      	ldr	r3, [pc, #60]	@ (800795c <prvAddCurrentTaskToDelayedList+0xb4>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3304      	adds	r3, #4
 8007922:	4619      	mov	r1, r3
 8007924:	4610      	mov	r0, r2
 8007926:	f7ff fa67 	bl	8006df8 <vListInsert>
}
 800792a:	e010      	b.n	800794e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800792c:	4b0f      	ldr	r3, [pc, #60]	@ (800796c <prvAddCurrentTaskToDelayedList+0xc4>)
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	4b0a      	ldr	r3, [pc, #40]	@ (800795c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3304      	adds	r3, #4
 8007936:	4619      	mov	r1, r3
 8007938:	4610      	mov	r0, r2
 800793a:	f7ff fa5d 	bl	8006df8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800793e:	4b0c      	ldr	r3, [pc, #48]	@ (8007970 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	429a      	cmp	r2, r3
 8007946:	d202      	bcs.n	800794e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007948:	4a09      	ldr	r2, [pc, #36]	@ (8007970 <prvAddCurrentTaskToDelayedList+0xc8>)
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	6013      	str	r3, [r2, #0]
}
 800794e:	bf00      	nop
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	20001350 	.word	0x20001350
 800795c:	2000124c 	.word	0x2000124c
 8007960:	20001354 	.word	0x20001354
 8007964:	20001338 	.word	0x20001338
 8007968:	20001308 	.word	0x20001308
 800796c:	20001304 	.word	0x20001304
 8007970:	2000136c 	.word	0x2000136c

08007974 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	3b04      	subs	r3, #4
 8007984:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800798c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3b04      	subs	r3, #4
 8007992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	f023 0201 	bic.w	r2, r3, #1
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	3b04      	subs	r3, #4
 80079a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079a4:	4a0c      	ldr	r2, [pc, #48]	@ (80079d8 <pxPortInitialiseStack+0x64>)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3b14      	subs	r3, #20
 80079ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	3b04      	subs	r3, #4
 80079ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f06f 0202 	mvn.w	r2, #2
 80079c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3b20      	subs	r3, #32
 80079c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079ca:	68fb      	ldr	r3, [r7, #12]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	080079dd 	.word	0x080079dd

080079dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079e2:	2300      	movs	r3, #0
 80079e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079e6:	4b13      	ldr	r3, [pc, #76]	@ (8007a34 <prvTaskExitError+0x58>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ee:	d00b      	beq.n	8007a08 <prvTaskExitError+0x2c>
	__asm volatile
 80079f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	60fb      	str	r3, [r7, #12]
}
 8007a02:	bf00      	nop
 8007a04:	bf00      	nop
 8007a06:	e7fd      	b.n	8007a04 <prvTaskExitError+0x28>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	60bb      	str	r3, [r7, #8]
}
 8007a1a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a1c:	bf00      	nop
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d0fc      	beq.n	8007a1e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	2000000c 	.word	0x2000000c
	...

08007a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a40:	4b07      	ldr	r3, [pc, #28]	@ (8007a60 <pxCurrentTCBConst2>)
 8007a42:	6819      	ldr	r1, [r3, #0]
 8007a44:	6808      	ldr	r0, [r1, #0]
 8007a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4a:	f380 8809 	msr	PSP, r0
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f04f 0000 	mov.w	r0, #0
 8007a56:	f380 8811 	msr	BASEPRI, r0
 8007a5a:	4770      	bx	lr
 8007a5c:	f3af 8000 	nop.w

08007a60 <pxCurrentTCBConst2>:
 8007a60:	2000124c 	.word	0x2000124c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a64:	bf00      	nop
 8007a66:	bf00      	nop

08007a68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a68:	4808      	ldr	r0, [pc, #32]	@ (8007a8c <prvPortStartFirstTask+0x24>)
 8007a6a:	6800      	ldr	r0, [r0, #0]
 8007a6c:	6800      	ldr	r0, [r0, #0]
 8007a6e:	f380 8808 	msr	MSP, r0
 8007a72:	f04f 0000 	mov.w	r0, #0
 8007a76:	f380 8814 	msr	CONTROL, r0
 8007a7a:	b662      	cpsie	i
 8007a7c:	b661      	cpsie	f
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	df00      	svc	0
 8007a88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a8a:	bf00      	nop
 8007a8c:	e000ed08 	.word	0xe000ed08

08007a90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a96:	4b47      	ldr	r3, [pc, #284]	@ (8007bb4 <xPortStartScheduler+0x124>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a47      	ldr	r2, [pc, #284]	@ (8007bb8 <xPortStartScheduler+0x128>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d10b      	bne.n	8007ab8 <xPortStartScheduler+0x28>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	613b      	str	r3, [r7, #16]
}
 8007ab2:	bf00      	nop
 8007ab4:	bf00      	nop
 8007ab6:	e7fd      	b.n	8007ab4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ab8:	4b3e      	ldr	r3, [pc, #248]	@ (8007bb4 <xPortStartScheduler+0x124>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a3f      	ldr	r2, [pc, #252]	@ (8007bbc <xPortStartScheduler+0x12c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d10b      	bne.n	8007ada <xPortStartScheduler+0x4a>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	60fb      	str	r3, [r7, #12]
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop
 8007ad8:	e7fd      	b.n	8007ad6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ada:	4b39      	ldr	r3, [pc, #228]	@ (8007bc0 <xPortStartScheduler+0x130>)
 8007adc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	22ff      	movs	r2, #255	@ 0xff
 8007aea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007af4:	78fb      	ldrb	r3, [r7, #3]
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	4b31      	ldr	r3, [pc, #196]	@ (8007bc4 <xPortStartScheduler+0x134>)
 8007b00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b02:	4b31      	ldr	r3, [pc, #196]	@ (8007bc8 <xPortStartScheduler+0x138>)
 8007b04:	2207      	movs	r2, #7
 8007b06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b08:	e009      	b.n	8007b1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8007bc8 <xPortStartScheduler+0x138>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	4a2d      	ldr	r2, [pc, #180]	@ (8007bc8 <xPortStartScheduler+0x138>)
 8007b12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b14:	78fb      	ldrb	r3, [r7, #3]
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b1e:	78fb      	ldrb	r3, [r7, #3]
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b26:	2b80      	cmp	r3, #128	@ 0x80
 8007b28:	d0ef      	beq.n	8007b0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b2a:	4b27      	ldr	r3, [pc, #156]	@ (8007bc8 <xPortStartScheduler+0x138>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f1c3 0307 	rsb	r3, r3, #7
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d00b      	beq.n	8007b4e <xPortStartScheduler+0xbe>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	60bb      	str	r3, [r7, #8]
}
 8007b48:	bf00      	nop
 8007b4a:	bf00      	nop
 8007b4c:	e7fd      	b.n	8007b4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8007bc8 <xPortStartScheduler+0x138>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	021b      	lsls	r3, r3, #8
 8007b54:	4a1c      	ldr	r2, [pc, #112]	@ (8007bc8 <xPortStartScheduler+0x138>)
 8007b56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b58:	4b1b      	ldr	r3, [pc, #108]	@ (8007bc8 <xPortStartScheduler+0x138>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b60:	4a19      	ldr	r2, [pc, #100]	@ (8007bc8 <xPortStartScheduler+0x138>)
 8007b62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b6c:	4b17      	ldr	r3, [pc, #92]	@ (8007bcc <xPortStartScheduler+0x13c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a16      	ldr	r2, [pc, #88]	@ (8007bcc <xPortStartScheduler+0x13c>)
 8007b72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007b76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b78:	4b14      	ldr	r3, [pc, #80]	@ (8007bcc <xPortStartScheduler+0x13c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a13      	ldr	r2, [pc, #76]	@ (8007bcc <xPortStartScheduler+0x13c>)
 8007b7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007b82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b84:	f000 f8da 	bl	8007d3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b88:	4b11      	ldr	r3, [pc, #68]	@ (8007bd0 <xPortStartScheduler+0x140>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b8e:	f000 f8f9 	bl	8007d84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b92:	4b10      	ldr	r3, [pc, #64]	@ (8007bd4 <xPortStartScheduler+0x144>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a0f      	ldr	r2, [pc, #60]	@ (8007bd4 <xPortStartScheduler+0x144>)
 8007b98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007b9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b9e:	f7ff ff63 	bl	8007a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ba2:	f7ff fd41 	bl	8007628 <vTaskSwitchContext>
	prvTaskExitError();
 8007ba6:	f7ff ff19 	bl	80079dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3718      	adds	r7, #24
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	e000ed00 	.word	0xe000ed00
 8007bb8:	410fc271 	.word	0x410fc271
 8007bbc:	410fc270 	.word	0x410fc270
 8007bc0:	e000e400 	.word	0xe000e400
 8007bc4:	20001378 	.word	0x20001378
 8007bc8:	2000137c 	.word	0x2000137c
 8007bcc:	e000ed20 	.word	0xe000ed20
 8007bd0:	2000000c 	.word	0x2000000c
 8007bd4:	e000ef34 	.word	0xe000ef34

08007bd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	607b      	str	r3, [r7, #4]
}
 8007bf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007bf2:	4b10      	ldr	r3, [pc, #64]	@ (8007c34 <vPortEnterCritical+0x5c>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	4a0e      	ldr	r2, [pc, #56]	@ (8007c34 <vPortEnterCritical+0x5c>)
 8007bfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8007c34 <vPortEnterCritical+0x5c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d110      	bne.n	8007c26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c04:	4b0c      	ldr	r3, [pc, #48]	@ (8007c38 <vPortEnterCritical+0x60>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00b      	beq.n	8007c26 <vPortEnterCritical+0x4e>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	603b      	str	r3, [r7, #0]
}
 8007c20:	bf00      	nop
 8007c22:	bf00      	nop
 8007c24:	e7fd      	b.n	8007c22 <vPortEnterCritical+0x4a>
	}
}
 8007c26:	bf00      	nop
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	2000000c 	.word	0x2000000c
 8007c38:	e000ed04 	.word	0xe000ed04

08007c3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c42:	4b12      	ldr	r3, [pc, #72]	@ (8007c8c <vPortExitCritical+0x50>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10b      	bne.n	8007c62 <vPortExitCritical+0x26>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	607b      	str	r3, [r7, #4]
}
 8007c5c:	bf00      	nop
 8007c5e:	bf00      	nop
 8007c60:	e7fd      	b.n	8007c5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c62:	4b0a      	ldr	r3, [pc, #40]	@ (8007c8c <vPortExitCritical+0x50>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3b01      	subs	r3, #1
 8007c68:	4a08      	ldr	r2, [pc, #32]	@ (8007c8c <vPortExitCritical+0x50>)
 8007c6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c6c:	4b07      	ldr	r3, [pc, #28]	@ (8007c8c <vPortExitCritical+0x50>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d105      	bne.n	8007c80 <vPortExitCritical+0x44>
 8007c74:	2300      	movs	r3, #0
 8007c76:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	2000000c 	.word	0x2000000c

08007c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c90:	f3ef 8009 	mrs	r0, PSP
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	4b15      	ldr	r3, [pc, #84]	@ (8007cf0 <pxCurrentTCBConst>)
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	f01e 0f10 	tst.w	lr, #16
 8007ca0:	bf08      	it	eq
 8007ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007caa:	6010      	str	r0, [r2, #0]
 8007cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007cb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007cb4:	f380 8811 	msr	BASEPRI, r0
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f7ff fcb2 	bl	8007628 <vTaskSwitchContext>
 8007cc4:	f04f 0000 	mov.w	r0, #0
 8007cc8:	f380 8811 	msr	BASEPRI, r0
 8007ccc:	bc09      	pop	{r0, r3}
 8007cce:	6819      	ldr	r1, [r3, #0]
 8007cd0:	6808      	ldr	r0, [r1, #0]
 8007cd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd6:	f01e 0f10 	tst.w	lr, #16
 8007cda:	bf08      	it	eq
 8007cdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ce0:	f380 8809 	msr	PSP, r0
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	f3af 8000 	nop.w

08007cf0 <pxCurrentTCBConst>:
 8007cf0:	2000124c 	.word	0x2000124c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007cf4:	bf00      	nop
 8007cf6:	bf00      	nop

08007cf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	607b      	str	r3, [r7, #4]
}
 8007d10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d12:	f7ff fbcf 	bl	80074b4 <xTaskIncrementTick>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d003      	beq.n	8007d24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d1c:	4b06      	ldr	r3, [pc, #24]	@ (8007d38 <SysTick_Handler+0x40>)
 8007d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	2300      	movs	r3, #0
 8007d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	f383 8811 	msr	BASEPRI, r3
}
 8007d2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	e000ed04 	.word	0xe000ed04

08007d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d40:	4b0b      	ldr	r3, [pc, #44]	@ (8007d70 <vPortSetupTimerInterrupt+0x34>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d46:	4b0b      	ldr	r3, [pc, #44]	@ (8007d74 <vPortSetupTimerInterrupt+0x38>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d78 <vPortSetupTimerInterrupt+0x3c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a0a      	ldr	r2, [pc, #40]	@ (8007d7c <vPortSetupTimerInterrupt+0x40>)
 8007d52:	fba2 2303 	umull	r2, r3, r2, r3
 8007d56:	099b      	lsrs	r3, r3, #6
 8007d58:	4a09      	ldr	r2, [pc, #36]	@ (8007d80 <vPortSetupTimerInterrupt+0x44>)
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d5e:	4b04      	ldr	r3, [pc, #16]	@ (8007d70 <vPortSetupTimerInterrupt+0x34>)
 8007d60:	2207      	movs	r2, #7
 8007d62:	601a      	str	r2, [r3, #0]
}
 8007d64:	bf00      	nop
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	e000e010 	.word	0xe000e010
 8007d74:	e000e018 	.word	0xe000e018
 8007d78:	20000000 	.word	0x20000000
 8007d7c:	10624dd3 	.word	0x10624dd3
 8007d80:	e000e014 	.word	0xe000e014

08007d84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007d94 <vPortEnableVFP+0x10>
 8007d88:	6801      	ldr	r1, [r0, #0]
 8007d8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007d8e:	6001      	str	r1, [r0, #0]
 8007d90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d92:	bf00      	nop
 8007d94:	e000ed88 	.word	0xe000ed88

08007d98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b08a      	sub	sp, #40	@ 0x28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007da0:	2300      	movs	r3, #0
 8007da2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007da4:	f7ff fada 	bl	800735c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007da8:	4b5c      	ldr	r3, [pc, #368]	@ (8007f1c <pvPortMalloc+0x184>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007db0:	f000 f924 	bl	8007ffc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007db4:	4b5a      	ldr	r3, [pc, #360]	@ (8007f20 <pvPortMalloc+0x188>)
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4013      	ands	r3, r2
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f040 8095 	bne.w	8007eec <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d01e      	beq.n	8007e06 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007dc8:	2208      	movs	r2, #8
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4413      	add	r3, r2
 8007dce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d015      	beq.n	8007e06 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f023 0307 	bic.w	r3, r3, #7
 8007de0:	3308      	adds	r3, #8
 8007de2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f003 0307 	and.w	r3, r3, #7
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00b      	beq.n	8007e06 <pvPortMalloc+0x6e>
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	617b      	str	r3, [r7, #20]
}
 8007e00:	bf00      	nop
 8007e02:	bf00      	nop
 8007e04:	e7fd      	b.n	8007e02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d06f      	beq.n	8007eec <pvPortMalloc+0x154>
 8007e0c:	4b45      	ldr	r3, [pc, #276]	@ (8007f24 <pvPortMalloc+0x18c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d86a      	bhi.n	8007eec <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e16:	4b44      	ldr	r3, [pc, #272]	@ (8007f28 <pvPortMalloc+0x190>)
 8007e18:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e1a:	4b43      	ldr	r3, [pc, #268]	@ (8007f28 <pvPortMalloc+0x190>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e20:	e004      	b.n	8007e2c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e24:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d903      	bls.n	8007e3e <pvPortMalloc+0xa6>
 8007e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1f1      	bne.n	8007e22 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e3e:	4b37      	ldr	r3, [pc, #220]	@ (8007f1c <pvPortMalloc+0x184>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d051      	beq.n	8007eec <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2208      	movs	r2, #8
 8007e4e:	4413      	add	r3, r2
 8007e50:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	1ad2      	subs	r2, r2, r3
 8007e62:	2308      	movs	r3, #8
 8007e64:	005b      	lsls	r3, r3, #1
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d920      	bls.n	8007eac <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4413      	add	r3, r2
 8007e70:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	f003 0307 	and.w	r3, r3, #7
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00b      	beq.n	8007e94 <pvPortMalloc+0xfc>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	613b      	str	r3, [r7, #16]
}
 8007e8e:	bf00      	nop
 8007e90:	bf00      	nop
 8007e92:	e7fd      	b.n	8007e90 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	1ad2      	subs	r2, r2, r3
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ea6:	69b8      	ldr	r0, [r7, #24]
 8007ea8:	f000 f90a 	bl	80080c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007eac:	4b1d      	ldr	r3, [pc, #116]	@ (8007f24 <pvPortMalloc+0x18c>)
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8007f24 <pvPortMalloc+0x18c>)
 8007eb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007eba:	4b1a      	ldr	r3, [pc, #104]	@ (8007f24 <pvPortMalloc+0x18c>)
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8007f2c <pvPortMalloc+0x194>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d203      	bcs.n	8007ece <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ec6:	4b17      	ldr	r3, [pc, #92]	@ (8007f24 <pvPortMalloc+0x18c>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a18      	ldr	r2, [pc, #96]	@ (8007f2c <pvPortMalloc+0x194>)
 8007ecc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	4b13      	ldr	r3, [pc, #76]	@ (8007f20 <pvPortMalloc+0x188>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ede:	2200      	movs	r2, #0
 8007ee0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007ee2:	4b13      	ldr	r3, [pc, #76]	@ (8007f30 <pvPortMalloc+0x198>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	4a11      	ldr	r2, [pc, #68]	@ (8007f30 <pvPortMalloc+0x198>)
 8007eea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007eec:	f7ff fa44 	bl	8007378 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	f003 0307 	and.w	r3, r3, #7
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00b      	beq.n	8007f12 <pvPortMalloc+0x17a>
	__asm volatile
 8007efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	60fb      	str	r3, [r7, #12]
}
 8007f0c:	bf00      	nop
 8007f0e:	bf00      	nop
 8007f10:	e7fd      	b.n	8007f0e <pvPortMalloc+0x176>
	return pvReturn;
 8007f12:	69fb      	ldr	r3, [r7, #28]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3728      	adds	r7, #40	@ 0x28
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	20004f88 	.word	0x20004f88
 8007f20:	20004f9c 	.word	0x20004f9c
 8007f24:	20004f8c 	.word	0x20004f8c
 8007f28:	20004f80 	.word	0x20004f80
 8007f2c:	20004f90 	.word	0x20004f90
 8007f30:	20004f94 	.word	0x20004f94

08007f34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d04f      	beq.n	8007fe6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f46:	2308      	movs	r3, #8
 8007f48:	425b      	negs	r3, r3
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	4b25      	ldr	r3, [pc, #148]	@ (8007ff0 <vPortFree+0xbc>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10b      	bne.n	8007f7a <vPortFree+0x46>
	__asm volatile
 8007f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f66:	f383 8811 	msr	BASEPRI, r3
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	60fb      	str	r3, [r7, #12]
}
 8007f74:	bf00      	nop
 8007f76:	bf00      	nop
 8007f78:	e7fd      	b.n	8007f76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00b      	beq.n	8007f9a <vPortFree+0x66>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	60bb      	str	r3, [r7, #8]
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	e7fd      	b.n	8007f96 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	4b14      	ldr	r3, [pc, #80]	@ (8007ff0 <vPortFree+0xbc>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d01e      	beq.n	8007fe6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d11a      	bne.n	8007fe6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8007ff0 <vPortFree+0xbc>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	43db      	mvns	r3, r3
 8007fba:	401a      	ands	r2, r3
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007fc0:	f7ff f9cc 	bl	800735c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ff4 <vPortFree+0xc0>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4413      	add	r3, r2
 8007fce:	4a09      	ldr	r2, [pc, #36]	@ (8007ff4 <vPortFree+0xc0>)
 8007fd0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007fd2:	6938      	ldr	r0, [r7, #16]
 8007fd4:	f000 f874 	bl	80080c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007fd8:	4b07      	ldr	r3, [pc, #28]	@ (8007ff8 <vPortFree+0xc4>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	4a06      	ldr	r2, [pc, #24]	@ (8007ff8 <vPortFree+0xc4>)
 8007fe0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007fe2:	f7ff f9c9 	bl	8007378 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007fe6:	bf00      	nop
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	20004f9c 	.word	0x20004f9c
 8007ff4:	20004f8c 	.word	0x20004f8c
 8007ff8:	20004f98 	.word	0x20004f98

08007ffc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008002:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008006:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008008:	4b27      	ldr	r3, [pc, #156]	@ (80080a8 <prvHeapInit+0xac>)
 800800a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f003 0307 	and.w	r3, r3, #7
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00c      	beq.n	8008030 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3307      	adds	r3, #7
 800801a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0307 	bic.w	r3, r3, #7
 8008022:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	4a1f      	ldr	r2, [pc, #124]	@ (80080a8 <prvHeapInit+0xac>)
 800802c:	4413      	add	r3, r2
 800802e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008034:	4a1d      	ldr	r2, [pc, #116]	@ (80080ac <prvHeapInit+0xb0>)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800803a:	4b1c      	ldr	r3, [pc, #112]	@ (80080ac <prvHeapInit+0xb0>)
 800803c:	2200      	movs	r2, #0
 800803e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	4413      	add	r3, r2
 8008046:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008048:	2208      	movs	r2, #8
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	1a9b      	subs	r3, r3, r2
 800804e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f023 0307 	bic.w	r3, r3, #7
 8008056:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4a15      	ldr	r2, [pc, #84]	@ (80080b0 <prvHeapInit+0xb4>)
 800805c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800805e:	4b14      	ldr	r3, [pc, #80]	@ (80080b0 <prvHeapInit+0xb4>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2200      	movs	r2, #0
 8008064:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008066:	4b12      	ldr	r3, [pc, #72]	@ (80080b0 <prvHeapInit+0xb4>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2200      	movs	r2, #0
 800806c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	1ad2      	subs	r2, r2, r3
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800807c:	4b0c      	ldr	r3, [pc, #48]	@ (80080b0 <prvHeapInit+0xb4>)
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	4a0a      	ldr	r2, [pc, #40]	@ (80080b4 <prvHeapInit+0xb8>)
 800808a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	4a09      	ldr	r2, [pc, #36]	@ (80080b8 <prvHeapInit+0xbc>)
 8008092:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008094:	4b09      	ldr	r3, [pc, #36]	@ (80080bc <prvHeapInit+0xc0>)
 8008096:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800809a:	601a      	str	r2, [r3, #0]
}
 800809c:	bf00      	nop
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	20001380 	.word	0x20001380
 80080ac:	20004f80 	.word	0x20004f80
 80080b0:	20004f88 	.word	0x20004f88
 80080b4:	20004f90 	.word	0x20004f90
 80080b8:	20004f8c 	.word	0x20004f8c
 80080bc:	20004f9c 	.word	0x20004f9c

080080c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080c8:	4b28      	ldr	r3, [pc, #160]	@ (800816c <prvInsertBlockIntoFreeList+0xac>)
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	e002      	b.n	80080d4 <prvInsertBlockIntoFreeList+0x14>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	60fb      	str	r3, [r7, #12]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d8f7      	bhi.n	80080ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	4413      	add	r3, r2
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d108      	bne.n	8008102 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	441a      	add	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	441a      	add	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	429a      	cmp	r2, r3
 8008114:	d118      	bne.n	8008148 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	4b15      	ldr	r3, [pc, #84]	@ (8008170 <prvInsertBlockIntoFreeList+0xb0>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	429a      	cmp	r2, r3
 8008120:	d00d      	beq.n	800813e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	441a      	add	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	601a      	str	r2, [r3, #0]
 800813c:	e008      	b.n	8008150 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800813e:	4b0c      	ldr	r3, [pc, #48]	@ (8008170 <prvInsertBlockIntoFreeList+0xb0>)
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	601a      	str	r2, [r3, #0]
 8008146:	e003      	b.n	8008150 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	429a      	cmp	r2, r3
 8008156:	d002      	beq.n	800815e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800815e:	bf00      	nop
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	20004f80 	.word	0x20004f80
 8008170:	20004f88 	.word	0x20004f88

08008174 <__cvt>:
 8008174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008178:	ec57 6b10 	vmov	r6, r7, d0
 800817c:	2f00      	cmp	r7, #0
 800817e:	460c      	mov	r4, r1
 8008180:	4619      	mov	r1, r3
 8008182:	463b      	mov	r3, r7
 8008184:	bfbb      	ittet	lt
 8008186:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800818a:	461f      	movlt	r7, r3
 800818c:	2300      	movge	r3, #0
 800818e:	232d      	movlt	r3, #45	@ 0x2d
 8008190:	700b      	strb	r3, [r1, #0]
 8008192:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008194:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008198:	4691      	mov	r9, r2
 800819a:	f023 0820 	bic.w	r8, r3, #32
 800819e:	bfbc      	itt	lt
 80081a0:	4632      	movlt	r2, r6
 80081a2:	4616      	movlt	r6, r2
 80081a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80081a8:	d005      	beq.n	80081b6 <__cvt+0x42>
 80081aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80081ae:	d100      	bne.n	80081b2 <__cvt+0x3e>
 80081b0:	3401      	adds	r4, #1
 80081b2:	2102      	movs	r1, #2
 80081b4:	e000      	b.n	80081b8 <__cvt+0x44>
 80081b6:	2103      	movs	r1, #3
 80081b8:	ab03      	add	r3, sp, #12
 80081ba:	9301      	str	r3, [sp, #4]
 80081bc:	ab02      	add	r3, sp, #8
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	ec47 6b10 	vmov	d0, r6, r7
 80081c4:	4653      	mov	r3, sl
 80081c6:	4622      	mov	r2, r4
 80081c8:	f000 ff12 	bl	8008ff0 <_dtoa_r>
 80081cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80081d0:	4605      	mov	r5, r0
 80081d2:	d119      	bne.n	8008208 <__cvt+0x94>
 80081d4:	f019 0f01 	tst.w	r9, #1
 80081d8:	d00e      	beq.n	80081f8 <__cvt+0x84>
 80081da:	eb00 0904 	add.w	r9, r0, r4
 80081de:	2200      	movs	r2, #0
 80081e0:	2300      	movs	r3, #0
 80081e2:	4630      	mov	r0, r6
 80081e4:	4639      	mov	r1, r7
 80081e6:	f7f8 fc77 	bl	8000ad8 <__aeabi_dcmpeq>
 80081ea:	b108      	cbz	r0, 80081f0 <__cvt+0x7c>
 80081ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80081f0:	2230      	movs	r2, #48	@ 0x30
 80081f2:	9b03      	ldr	r3, [sp, #12]
 80081f4:	454b      	cmp	r3, r9
 80081f6:	d31e      	bcc.n	8008236 <__cvt+0xc2>
 80081f8:	9b03      	ldr	r3, [sp, #12]
 80081fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081fc:	1b5b      	subs	r3, r3, r5
 80081fe:	4628      	mov	r0, r5
 8008200:	6013      	str	r3, [r2, #0]
 8008202:	b004      	add	sp, #16
 8008204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008208:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800820c:	eb00 0904 	add.w	r9, r0, r4
 8008210:	d1e5      	bne.n	80081de <__cvt+0x6a>
 8008212:	7803      	ldrb	r3, [r0, #0]
 8008214:	2b30      	cmp	r3, #48	@ 0x30
 8008216:	d10a      	bne.n	800822e <__cvt+0xba>
 8008218:	2200      	movs	r2, #0
 800821a:	2300      	movs	r3, #0
 800821c:	4630      	mov	r0, r6
 800821e:	4639      	mov	r1, r7
 8008220:	f7f8 fc5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008224:	b918      	cbnz	r0, 800822e <__cvt+0xba>
 8008226:	f1c4 0401 	rsb	r4, r4, #1
 800822a:	f8ca 4000 	str.w	r4, [sl]
 800822e:	f8da 3000 	ldr.w	r3, [sl]
 8008232:	4499      	add	r9, r3
 8008234:	e7d3      	b.n	80081de <__cvt+0x6a>
 8008236:	1c59      	adds	r1, r3, #1
 8008238:	9103      	str	r1, [sp, #12]
 800823a:	701a      	strb	r2, [r3, #0]
 800823c:	e7d9      	b.n	80081f2 <__cvt+0x7e>

0800823e <__exponent>:
 800823e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008240:	2900      	cmp	r1, #0
 8008242:	bfba      	itte	lt
 8008244:	4249      	neglt	r1, r1
 8008246:	232d      	movlt	r3, #45	@ 0x2d
 8008248:	232b      	movge	r3, #43	@ 0x2b
 800824a:	2909      	cmp	r1, #9
 800824c:	7002      	strb	r2, [r0, #0]
 800824e:	7043      	strb	r3, [r0, #1]
 8008250:	dd29      	ble.n	80082a6 <__exponent+0x68>
 8008252:	f10d 0307 	add.w	r3, sp, #7
 8008256:	461d      	mov	r5, r3
 8008258:	270a      	movs	r7, #10
 800825a:	461a      	mov	r2, r3
 800825c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008260:	fb07 1416 	mls	r4, r7, r6, r1
 8008264:	3430      	adds	r4, #48	@ 0x30
 8008266:	f802 4c01 	strb.w	r4, [r2, #-1]
 800826a:	460c      	mov	r4, r1
 800826c:	2c63      	cmp	r4, #99	@ 0x63
 800826e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008272:	4631      	mov	r1, r6
 8008274:	dcf1      	bgt.n	800825a <__exponent+0x1c>
 8008276:	3130      	adds	r1, #48	@ 0x30
 8008278:	1e94      	subs	r4, r2, #2
 800827a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800827e:	1c41      	adds	r1, r0, #1
 8008280:	4623      	mov	r3, r4
 8008282:	42ab      	cmp	r3, r5
 8008284:	d30a      	bcc.n	800829c <__exponent+0x5e>
 8008286:	f10d 0309 	add.w	r3, sp, #9
 800828a:	1a9b      	subs	r3, r3, r2
 800828c:	42ac      	cmp	r4, r5
 800828e:	bf88      	it	hi
 8008290:	2300      	movhi	r3, #0
 8008292:	3302      	adds	r3, #2
 8008294:	4403      	add	r3, r0
 8008296:	1a18      	subs	r0, r3, r0
 8008298:	b003      	add	sp, #12
 800829a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800829c:	f813 6b01 	ldrb.w	r6, [r3], #1
 80082a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80082a4:	e7ed      	b.n	8008282 <__exponent+0x44>
 80082a6:	2330      	movs	r3, #48	@ 0x30
 80082a8:	3130      	adds	r1, #48	@ 0x30
 80082aa:	7083      	strb	r3, [r0, #2]
 80082ac:	70c1      	strb	r1, [r0, #3]
 80082ae:	1d03      	adds	r3, r0, #4
 80082b0:	e7f1      	b.n	8008296 <__exponent+0x58>
	...

080082b4 <_printf_float>:
 80082b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b8:	b08d      	sub	sp, #52	@ 0x34
 80082ba:	460c      	mov	r4, r1
 80082bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80082c0:	4616      	mov	r6, r2
 80082c2:	461f      	mov	r7, r3
 80082c4:	4605      	mov	r5, r0
 80082c6:	f000 fd2d 	bl	8008d24 <_localeconv_r>
 80082ca:	6803      	ldr	r3, [r0, #0]
 80082cc:	9304      	str	r3, [sp, #16]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7f7 ffd6 	bl	8000280 <strlen>
 80082d4:	2300      	movs	r3, #0
 80082d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80082d8:	f8d8 3000 	ldr.w	r3, [r8]
 80082dc:	9005      	str	r0, [sp, #20]
 80082de:	3307      	adds	r3, #7
 80082e0:	f023 0307 	bic.w	r3, r3, #7
 80082e4:	f103 0208 	add.w	r2, r3, #8
 80082e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80082ec:	f8d4 b000 	ldr.w	fp, [r4]
 80082f0:	f8c8 2000 	str.w	r2, [r8]
 80082f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80082fc:	9307      	str	r3, [sp, #28]
 80082fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8008302:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008306:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800830a:	4b9c      	ldr	r3, [pc, #624]	@ (800857c <_printf_float+0x2c8>)
 800830c:	f04f 32ff 	mov.w	r2, #4294967295
 8008310:	f7f8 fc14 	bl	8000b3c <__aeabi_dcmpun>
 8008314:	bb70      	cbnz	r0, 8008374 <_printf_float+0xc0>
 8008316:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800831a:	4b98      	ldr	r3, [pc, #608]	@ (800857c <_printf_float+0x2c8>)
 800831c:	f04f 32ff 	mov.w	r2, #4294967295
 8008320:	f7f8 fbee 	bl	8000b00 <__aeabi_dcmple>
 8008324:	bb30      	cbnz	r0, 8008374 <_printf_float+0xc0>
 8008326:	2200      	movs	r2, #0
 8008328:	2300      	movs	r3, #0
 800832a:	4640      	mov	r0, r8
 800832c:	4649      	mov	r1, r9
 800832e:	f7f8 fbdd 	bl	8000aec <__aeabi_dcmplt>
 8008332:	b110      	cbz	r0, 800833a <_printf_float+0x86>
 8008334:	232d      	movs	r3, #45	@ 0x2d
 8008336:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800833a:	4a91      	ldr	r2, [pc, #580]	@ (8008580 <_printf_float+0x2cc>)
 800833c:	4b91      	ldr	r3, [pc, #580]	@ (8008584 <_printf_float+0x2d0>)
 800833e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008342:	bf94      	ite	ls
 8008344:	4690      	movls	r8, r2
 8008346:	4698      	movhi	r8, r3
 8008348:	2303      	movs	r3, #3
 800834a:	6123      	str	r3, [r4, #16]
 800834c:	f02b 0304 	bic.w	r3, fp, #4
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	f04f 0900 	mov.w	r9, #0
 8008356:	9700      	str	r7, [sp, #0]
 8008358:	4633      	mov	r3, r6
 800835a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800835c:	4621      	mov	r1, r4
 800835e:	4628      	mov	r0, r5
 8008360:	f000 f9d2 	bl	8008708 <_printf_common>
 8008364:	3001      	adds	r0, #1
 8008366:	f040 808d 	bne.w	8008484 <_printf_float+0x1d0>
 800836a:	f04f 30ff 	mov.w	r0, #4294967295
 800836e:	b00d      	add	sp, #52	@ 0x34
 8008370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008374:	4642      	mov	r2, r8
 8008376:	464b      	mov	r3, r9
 8008378:	4640      	mov	r0, r8
 800837a:	4649      	mov	r1, r9
 800837c:	f7f8 fbde 	bl	8000b3c <__aeabi_dcmpun>
 8008380:	b140      	cbz	r0, 8008394 <_printf_float+0xe0>
 8008382:	464b      	mov	r3, r9
 8008384:	2b00      	cmp	r3, #0
 8008386:	bfbc      	itt	lt
 8008388:	232d      	movlt	r3, #45	@ 0x2d
 800838a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800838e:	4a7e      	ldr	r2, [pc, #504]	@ (8008588 <_printf_float+0x2d4>)
 8008390:	4b7e      	ldr	r3, [pc, #504]	@ (800858c <_printf_float+0x2d8>)
 8008392:	e7d4      	b.n	800833e <_printf_float+0x8a>
 8008394:	6863      	ldr	r3, [r4, #4]
 8008396:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800839a:	9206      	str	r2, [sp, #24]
 800839c:	1c5a      	adds	r2, r3, #1
 800839e:	d13b      	bne.n	8008418 <_printf_float+0x164>
 80083a0:	2306      	movs	r3, #6
 80083a2:	6063      	str	r3, [r4, #4]
 80083a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80083a8:	2300      	movs	r3, #0
 80083aa:	6022      	str	r2, [r4, #0]
 80083ac:	9303      	str	r3, [sp, #12]
 80083ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80083b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80083b4:	ab09      	add	r3, sp, #36	@ 0x24
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	6861      	ldr	r1, [r4, #4]
 80083ba:	ec49 8b10 	vmov	d0, r8, r9
 80083be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80083c2:	4628      	mov	r0, r5
 80083c4:	f7ff fed6 	bl	8008174 <__cvt>
 80083c8:	9b06      	ldr	r3, [sp, #24]
 80083ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083cc:	2b47      	cmp	r3, #71	@ 0x47
 80083ce:	4680      	mov	r8, r0
 80083d0:	d129      	bne.n	8008426 <_printf_float+0x172>
 80083d2:	1cc8      	adds	r0, r1, #3
 80083d4:	db02      	blt.n	80083dc <_printf_float+0x128>
 80083d6:	6863      	ldr	r3, [r4, #4]
 80083d8:	4299      	cmp	r1, r3
 80083da:	dd41      	ble.n	8008460 <_printf_float+0x1ac>
 80083dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80083e0:	fa5f fa8a 	uxtb.w	sl, sl
 80083e4:	3901      	subs	r1, #1
 80083e6:	4652      	mov	r2, sl
 80083e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80083ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80083ee:	f7ff ff26 	bl	800823e <__exponent>
 80083f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083f4:	1813      	adds	r3, r2, r0
 80083f6:	2a01      	cmp	r2, #1
 80083f8:	4681      	mov	r9, r0
 80083fa:	6123      	str	r3, [r4, #16]
 80083fc:	dc02      	bgt.n	8008404 <_printf_float+0x150>
 80083fe:	6822      	ldr	r2, [r4, #0]
 8008400:	07d2      	lsls	r2, r2, #31
 8008402:	d501      	bpl.n	8008408 <_printf_float+0x154>
 8008404:	3301      	adds	r3, #1
 8008406:	6123      	str	r3, [r4, #16]
 8008408:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0a2      	beq.n	8008356 <_printf_float+0xa2>
 8008410:	232d      	movs	r3, #45	@ 0x2d
 8008412:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008416:	e79e      	b.n	8008356 <_printf_float+0xa2>
 8008418:	9a06      	ldr	r2, [sp, #24]
 800841a:	2a47      	cmp	r2, #71	@ 0x47
 800841c:	d1c2      	bne.n	80083a4 <_printf_float+0xf0>
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1c0      	bne.n	80083a4 <_printf_float+0xf0>
 8008422:	2301      	movs	r3, #1
 8008424:	e7bd      	b.n	80083a2 <_printf_float+0xee>
 8008426:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800842a:	d9db      	bls.n	80083e4 <_printf_float+0x130>
 800842c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008430:	d118      	bne.n	8008464 <_printf_float+0x1b0>
 8008432:	2900      	cmp	r1, #0
 8008434:	6863      	ldr	r3, [r4, #4]
 8008436:	dd0b      	ble.n	8008450 <_printf_float+0x19c>
 8008438:	6121      	str	r1, [r4, #16]
 800843a:	b913      	cbnz	r3, 8008442 <_printf_float+0x18e>
 800843c:	6822      	ldr	r2, [r4, #0]
 800843e:	07d0      	lsls	r0, r2, #31
 8008440:	d502      	bpl.n	8008448 <_printf_float+0x194>
 8008442:	3301      	adds	r3, #1
 8008444:	440b      	add	r3, r1
 8008446:	6123      	str	r3, [r4, #16]
 8008448:	65a1      	str	r1, [r4, #88]	@ 0x58
 800844a:	f04f 0900 	mov.w	r9, #0
 800844e:	e7db      	b.n	8008408 <_printf_float+0x154>
 8008450:	b913      	cbnz	r3, 8008458 <_printf_float+0x1a4>
 8008452:	6822      	ldr	r2, [r4, #0]
 8008454:	07d2      	lsls	r2, r2, #31
 8008456:	d501      	bpl.n	800845c <_printf_float+0x1a8>
 8008458:	3302      	adds	r3, #2
 800845a:	e7f4      	b.n	8008446 <_printf_float+0x192>
 800845c:	2301      	movs	r3, #1
 800845e:	e7f2      	b.n	8008446 <_printf_float+0x192>
 8008460:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008464:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008466:	4299      	cmp	r1, r3
 8008468:	db05      	blt.n	8008476 <_printf_float+0x1c2>
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	6121      	str	r1, [r4, #16]
 800846e:	07d8      	lsls	r0, r3, #31
 8008470:	d5ea      	bpl.n	8008448 <_printf_float+0x194>
 8008472:	1c4b      	adds	r3, r1, #1
 8008474:	e7e7      	b.n	8008446 <_printf_float+0x192>
 8008476:	2900      	cmp	r1, #0
 8008478:	bfd4      	ite	le
 800847a:	f1c1 0202 	rsble	r2, r1, #2
 800847e:	2201      	movgt	r2, #1
 8008480:	4413      	add	r3, r2
 8008482:	e7e0      	b.n	8008446 <_printf_float+0x192>
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	055a      	lsls	r2, r3, #21
 8008488:	d407      	bmi.n	800849a <_printf_float+0x1e6>
 800848a:	6923      	ldr	r3, [r4, #16]
 800848c:	4642      	mov	r2, r8
 800848e:	4631      	mov	r1, r6
 8008490:	4628      	mov	r0, r5
 8008492:	47b8      	blx	r7
 8008494:	3001      	adds	r0, #1
 8008496:	d12b      	bne.n	80084f0 <_printf_float+0x23c>
 8008498:	e767      	b.n	800836a <_printf_float+0xb6>
 800849a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800849e:	f240 80dd 	bls.w	800865c <_printf_float+0x3a8>
 80084a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80084a6:	2200      	movs	r2, #0
 80084a8:	2300      	movs	r3, #0
 80084aa:	f7f8 fb15 	bl	8000ad8 <__aeabi_dcmpeq>
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d033      	beq.n	800851a <_printf_float+0x266>
 80084b2:	4a37      	ldr	r2, [pc, #220]	@ (8008590 <_printf_float+0x2dc>)
 80084b4:	2301      	movs	r3, #1
 80084b6:	4631      	mov	r1, r6
 80084b8:	4628      	mov	r0, r5
 80084ba:	47b8      	blx	r7
 80084bc:	3001      	adds	r0, #1
 80084be:	f43f af54 	beq.w	800836a <_printf_float+0xb6>
 80084c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80084c6:	4543      	cmp	r3, r8
 80084c8:	db02      	blt.n	80084d0 <_printf_float+0x21c>
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	07d8      	lsls	r0, r3, #31
 80084ce:	d50f      	bpl.n	80084f0 <_printf_float+0x23c>
 80084d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084d4:	4631      	mov	r1, r6
 80084d6:	4628      	mov	r0, r5
 80084d8:	47b8      	blx	r7
 80084da:	3001      	adds	r0, #1
 80084dc:	f43f af45 	beq.w	800836a <_printf_float+0xb6>
 80084e0:	f04f 0900 	mov.w	r9, #0
 80084e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80084e8:	f104 0a1a 	add.w	sl, r4, #26
 80084ec:	45c8      	cmp	r8, r9
 80084ee:	dc09      	bgt.n	8008504 <_printf_float+0x250>
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	079b      	lsls	r3, r3, #30
 80084f4:	f100 8103 	bmi.w	80086fe <_printf_float+0x44a>
 80084f8:	68e0      	ldr	r0, [r4, #12]
 80084fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084fc:	4298      	cmp	r0, r3
 80084fe:	bfb8      	it	lt
 8008500:	4618      	movlt	r0, r3
 8008502:	e734      	b.n	800836e <_printf_float+0xba>
 8008504:	2301      	movs	r3, #1
 8008506:	4652      	mov	r2, sl
 8008508:	4631      	mov	r1, r6
 800850a:	4628      	mov	r0, r5
 800850c:	47b8      	blx	r7
 800850e:	3001      	adds	r0, #1
 8008510:	f43f af2b 	beq.w	800836a <_printf_float+0xb6>
 8008514:	f109 0901 	add.w	r9, r9, #1
 8008518:	e7e8      	b.n	80084ec <_printf_float+0x238>
 800851a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800851c:	2b00      	cmp	r3, #0
 800851e:	dc39      	bgt.n	8008594 <_printf_float+0x2e0>
 8008520:	4a1b      	ldr	r2, [pc, #108]	@ (8008590 <_printf_float+0x2dc>)
 8008522:	2301      	movs	r3, #1
 8008524:	4631      	mov	r1, r6
 8008526:	4628      	mov	r0, r5
 8008528:	47b8      	blx	r7
 800852a:	3001      	adds	r0, #1
 800852c:	f43f af1d 	beq.w	800836a <_printf_float+0xb6>
 8008530:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008534:	ea59 0303 	orrs.w	r3, r9, r3
 8008538:	d102      	bne.n	8008540 <_printf_float+0x28c>
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	07d9      	lsls	r1, r3, #31
 800853e:	d5d7      	bpl.n	80084f0 <_printf_float+0x23c>
 8008540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008544:	4631      	mov	r1, r6
 8008546:	4628      	mov	r0, r5
 8008548:	47b8      	blx	r7
 800854a:	3001      	adds	r0, #1
 800854c:	f43f af0d 	beq.w	800836a <_printf_float+0xb6>
 8008550:	f04f 0a00 	mov.w	sl, #0
 8008554:	f104 0b1a 	add.w	fp, r4, #26
 8008558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800855a:	425b      	negs	r3, r3
 800855c:	4553      	cmp	r3, sl
 800855e:	dc01      	bgt.n	8008564 <_printf_float+0x2b0>
 8008560:	464b      	mov	r3, r9
 8008562:	e793      	b.n	800848c <_printf_float+0x1d8>
 8008564:	2301      	movs	r3, #1
 8008566:	465a      	mov	r2, fp
 8008568:	4631      	mov	r1, r6
 800856a:	4628      	mov	r0, r5
 800856c:	47b8      	blx	r7
 800856e:	3001      	adds	r0, #1
 8008570:	f43f aefb 	beq.w	800836a <_printf_float+0xb6>
 8008574:	f10a 0a01 	add.w	sl, sl, #1
 8008578:	e7ee      	b.n	8008558 <_printf_float+0x2a4>
 800857a:	bf00      	nop
 800857c:	7fefffff 	.word	0x7fefffff
 8008580:	0800b984 	.word	0x0800b984
 8008584:	0800b988 	.word	0x0800b988
 8008588:	0800b98c 	.word	0x0800b98c
 800858c:	0800b990 	.word	0x0800b990
 8008590:	0800bbbf 	.word	0x0800bbbf
 8008594:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008596:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800859a:	4553      	cmp	r3, sl
 800859c:	bfa8      	it	ge
 800859e:	4653      	movge	r3, sl
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	4699      	mov	r9, r3
 80085a4:	dc36      	bgt.n	8008614 <_printf_float+0x360>
 80085a6:	f04f 0b00 	mov.w	fp, #0
 80085aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085ae:	f104 021a 	add.w	r2, r4, #26
 80085b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085b4:	9306      	str	r3, [sp, #24]
 80085b6:	eba3 0309 	sub.w	r3, r3, r9
 80085ba:	455b      	cmp	r3, fp
 80085bc:	dc31      	bgt.n	8008622 <_printf_float+0x36e>
 80085be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c0:	459a      	cmp	sl, r3
 80085c2:	dc3a      	bgt.n	800863a <_printf_float+0x386>
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	07da      	lsls	r2, r3, #31
 80085c8:	d437      	bmi.n	800863a <_printf_float+0x386>
 80085ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085cc:	ebaa 0903 	sub.w	r9, sl, r3
 80085d0:	9b06      	ldr	r3, [sp, #24]
 80085d2:	ebaa 0303 	sub.w	r3, sl, r3
 80085d6:	4599      	cmp	r9, r3
 80085d8:	bfa8      	it	ge
 80085da:	4699      	movge	r9, r3
 80085dc:	f1b9 0f00 	cmp.w	r9, #0
 80085e0:	dc33      	bgt.n	800864a <_printf_float+0x396>
 80085e2:	f04f 0800 	mov.w	r8, #0
 80085e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085ea:	f104 0b1a 	add.w	fp, r4, #26
 80085ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085f0:	ebaa 0303 	sub.w	r3, sl, r3
 80085f4:	eba3 0309 	sub.w	r3, r3, r9
 80085f8:	4543      	cmp	r3, r8
 80085fa:	f77f af79 	ble.w	80084f0 <_printf_float+0x23c>
 80085fe:	2301      	movs	r3, #1
 8008600:	465a      	mov	r2, fp
 8008602:	4631      	mov	r1, r6
 8008604:	4628      	mov	r0, r5
 8008606:	47b8      	blx	r7
 8008608:	3001      	adds	r0, #1
 800860a:	f43f aeae 	beq.w	800836a <_printf_float+0xb6>
 800860e:	f108 0801 	add.w	r8, r8, #1
 8008612:	e7ec      	b.n	80085ee <_printf_float+0x33a>
 8008614:	4642      	mov	r2, r8
 8008616:	4631      	mov	r1, r6
 8008618:	4628      	mov	r0, r5
 800861a:	47b8      	blx	r7
 800861c:	3001      	adds	r0, #1
 800861e:	d1c2      	bne.n	80085a6 <_printf_float+0x2f2>
 8008620:	e6a3      	b.n	800836a <_printf_float+0xb6>
 8008622:	2301      	movs	r3, #1
 8008624:	4631      	mov	r1, r6
 8008626:	4628      	mov	r0, r5
 8008628:	9206      	str	r2, [sp, #24]
 800862a:	47b8      	blx	r7
 800862c:	3001      	adds	r0, #1
 800862e:	f43f ae9c 	beq.w	800836a <_printf_float+0xb6>
 8008632:	9a06      	ldr	r2, [sp, #24]
 8008634:	f10b 0b01 	add.w	fp, fp, #1
 8008638:	e7bb      	b.n	80085b2 <_printf_float+0x2fe>
 800863a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800863e:	4631      	mov	r1, r6
 8008640:	4628      	mov	r0, r5
 8008642:	47b8      	blx	r7
 8008644:	3001      	adds	r0, #1
 8008646:	d1c0      	bne.n	80085ca <_printf_float+0x316>
 8008648:	e68f      	b.n	800836a <_printf_float+0xb6>
 800864a:	9a06      	ldr	r2, [sp, #24]
 800864c:	464b      	mov	r3, r9
 800864e:	4442      	add	r2, r8
 8008650:	4631      	mov	r1, r6
 8008652:	4628      	mov	r0, r5
 8008654:	47b8      	blx	r7
 8008656:	3001      	adds	r0, #1
 8008658:	d1c3      	bne.n	80085e2 <_printf_float+0x32e>
 800865a:	e686      	b.n	800836a <_printf_float+0xb6>
 800865c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008660:	f1ba 0f01 	cmp.w	sl, #1
 8008664:	dc01      	bgt.n	800866a <_printf_float+0x3b6>
 8008666:	07db      	lsls	r3, r3, #31
 8008668:	d536      	bpl.n	80086d8 <_printf_float+0x424>
 800866a:	2301      	movs	r3, #1
 800866c:	4642      	mov	r2, r8
 800866e:	4631      	mov	r1, r6
 8008670:	4628      	mov	r0, r5
 8008672:	47b8      	blx	r7
 8008674:	3001      	adds	r0, #1
 8008676:	f43f ae78 	beq.w	800836a <_printf_float+0xb6>
 800867a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800867e:	4631      	mov	r1, r6
 8008680:	4628      	mov	r0, r5
 8008682:	47b8      	blx	r7
 8008684:	3001      	adds	r0, #1
 8008686:	f43f ae70 	beq.w	800836a <_printf_float+0xb6>
 800868a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800868e:	2200      	movs	r2, #0
 8008690:	2300      	movs	r3, #0
 8008692:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008696:	f7f8 fa1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800869a:	b9c0      	cbnz	r0, 80086ce <_printf_float+0x41a>
 800869c:	4653      	mov	r3, sl
 800869e:	f108 0201 	add.w	r2, r8, #1
 80086a2:	4631      	mov	r1, r6
 80086a4:	4628      	mov	r0, r5
 80086a6:	47b8      	blx	r7
 80086a8:	3001      	adds	r0, #1
 80086aa:	d10c      	bne.n	80086c6 <_printf_float+0x412>
 80086ac:	e65d      	b.n	800836a <_printf_float+0xb6>
 80086ae:	2301      	movs	r3, #1
 80086b0:	465a      	mov	r2, fp
 80086b2:	4631      	mov	r1, r6
 80086b4:	4628      	mov	r0, r5
 80086b6:	47b8      	blx	r7
 80086b8:	3001      	adds	r0, #1
 80086ba:	f43f ae56 	beq.w	800836a <_printf_float+0xb6>
 80086be:	f108 0801 	add.w	r8, r8, #1
 80086c2:	45d0      	cmp	r8, sl
 80086c4:	dbf3      	blt.n	80086ae <_printf_float+0x3fa>
 80086c6:	464b      	mov	r3, r9
 80086c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80086cc:	e6df      	b.n	800848e <_printf_float+0x1da>
 80086ce:	f04f 0800 	mov.w	r8, #0
 80086d2:	f104 0b1a 	add.w	fp, r4, #26
 80086d6:	e7f4      	b.n	80086c2 <_printf_float+0x40e>
 80086d8:	2301      	movs	r3, #1
 80086da:	4642      	mov	r2, r8
 80086dc:	e7e1      	b.n	80086a2 <_printf_float+0x3ee>
 80086de:	2301      	movs	r3, #1
 80086e0:	464a      	mov	r2, r9
 80086e2:	4631      	mov	r1, r6
 80086e4:	4628      	mov	r0, r5
 80086e6:	47b8      	blx	r7
 80086e8:	3001      	adds	r0, #1
 80086ea:	f43f ae3e 	beq.w	800836a <_printf_float+0xb6>
 80086ee:	f108 0801 	add.w	r8, r8, #1
 80086f2:	68e3      	ldr	r3, [r4, #12]
 80086f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80086f6:	1a5b      	subs	r3, r3, r1
 80086f8:	4543      	cmp	r3, r8
 80086fa:	dcf0      	bgt.n	80086de <_printf_float+0x42a>
 80086fc:	e6fc      	b.n	80084f8 <_printf_float+0x244>
 80086fe:	f04f 0800 	mov.w	r8, #0
 8008702:	f104 0919 	add.w	r9, r4, #25
 8008706:	e7f4      	b.n	80086f2 <_printf_float+0x43e>

08008708 <_printf_common>:
 8008708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800870c:	4616      	mov	r6, r2
 800870e:	4698      	mov	r8, r3
 8008710:	688a      	ldr	r2, [r1, #8]
 8008712:	690b      	ldr	r3, [r1, #16]
 8008714:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008718:	4293      	cmp	r3, r2
 800871a:	bfb8      	it	lt
 800871c:	4613      	movlt	r3, r2
 800871e:	6033      	str	r3, [r6, #0]
 8008720:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008724:	4607      	mov	r7, r0
 8008726:	460c      	mov	r4, r1
 8008728:	b10a      	cbz	r2, 800872e <_printf_common+0x26>
 800872a:	3301      	adds	r3, #1
 800872c:	6033      	str	r3, [r6, #0]
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	0699      	lsls	r1, r3, #26
 8008732:	bf42      	ittt	mi
 8008734:	6833      	ldrmi	r3, [r6, #0]
 8008736:	3302      	addmi	r3, #2
 8008738:	6033      	strmi	r3, [r6, #0]
 800873a:	6825      	ldr	r5, [r4, #0]
 800873c:	f015 0506 	ands.w	r5, r5, #6
 8008740:	d106      	bne.n	8008750 <_printf_common+0x48>
 8008742:	f104 0a19 	add.w	sl, r4, #25
 8008746:	68e3      	ldr	r3, [r4, #12]
 8008748:	6832      	ldr	r2, [r6, #0]
 800874a:	1a9b      	subs	r3, r3, r2
 800874c:	42ab      	cmp	r3, r5
 800874e:	dc26      	bgt.n	800879e <_printf_common+0x96>
 8008750:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008754:	6822      	ldr	r2, [r4, #0]
 8008756:	3b00      	subs	r3, #0
 8008758:	bf18      	it	ne
 800875a:	2301      	movne	r3, #1
 800875c:	0692      	lsls	r2, r2, #26
 800875e:	d42b      	bmi.n	80087b8 <_printf_common+0xb0>
 8008760:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008764:	4641      	mov	r1, r8
 8008766:	4638      	mov	r0, r7
 8008768:	47c8      	blx	r9
 800876a:	3001      	adds	r0, #1
 800876c:	d01e      	beq.n	80087ac <_printf_common+0xa4>
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	6922      	ldr	r2, [r4, #16]
 8008772:	f003 0306 	and.w	r3, r3, #6
 8008776:	2b04      	cmp	r3, #4
 8008778:	bf02      	ittt	eq
 800877a:	68e5      	ldreq	r5, [r4, #12]
 800877c:	6833      	ldreq	r3, [r6, #0]
 800877e:	1aed      	subeq	r5, r5, r3
 8008780:	68a3      	ldr	r3, [r4, #8]
 8008782:	bf0c      	ite	eq
 8008784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008788:	2500      	movne	r5, #0
 800878a:	4293      	cmp	r3, r2
 800878c:	bfc4      	itt	gt
 800878e:	1a9b      	subgt	r3, r3, r2
 8008790:	18ed      	addgt	r5, r5, r3
 8008792:	2600      	movs	r6, #0
 8008794:	341a      	adds	r4, #26
 8008796:	42b5      	cmp	r5, r6
 8008798:	d11a      	bne.n	80087d0 <_printf_common+0xc8>
 800879a:	2000      	movs	r0, #0
 800879c:	e008      	b.n	80087b0 <_printf_common+0xa8>
 800879e:	2301      	movs	r3, #1
 80087a0:	4652      	mov	r2, sl
 80087a2:	4641      	mov	r1, r8
 80087a4:	4638      	mov	r0, r7
 80087a6:	47c8      	blx	r9
 80087a8:	3001      	adds	r0, #1
 80087aa:	d103      	bne.n	80087b4 <_printf_common+0xac>
 80087ac:	f04f 30ff 	mov.w	r0, #4294967295
 80087b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b4:	3501      	adds	r5, #1
 80087b6:	e7c6      	b.n	8008746 <_printf_common+0x3e>
 80087b8:	18e1      	adds	r1, r4, r3
 80087ba:	1c5a      	adds	r2, r3, #1
 80087bc:	2030      	movs	r0, #48	@ 0x30
 80087be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087c2:	4422      	add	r2, r4
 80087c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80087c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80087cc:	3302      	adds	r3, #2
 80087ce:	e7c7      	b.n	8008760 <_printf_common+0x58>
 80087d0:	2301      	movs	r3, #1
 80087d2:	4622      	mov	r2, r4
 80087d4:	4641      	mov	r1, r8
 80087d6:	4638      	mov	r0, r7
 80087d8:	47c8      	blx	r9
 80087da:	3001      	adds	r0, #1
 80087dc:	d0e6      	beq.n	80087ac <_printf_common+0xa4>
 80087de:	3601      	adds	r6, #1
 80087e0:	e7d9      	b.n	8008796 <_printf_common+0x8e>
	...

080087e4 <_printf_i>:
 80087e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087e8:	7e0f      	ldrb	r7, [r1, #24]
 80087ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087ec:	2f78      	cmp	r7, #120	@ 0x78
 80087ee:	4691      	mov	r9, r2
 80087f0:	4680      	mov	r8, r0
 80087f2:	460c      	mov	r4, r1
 80087f4:	469a      	mov	sl, r3
 80087f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80087fa:	d807      	bhi.n	800880c <_printf_i+0x28>
 80087fc:	2f62      	cmp	r7, #98	@ 0x62
 80087fe:	d80a      	bhi.n	8008816 <_printf_i+0x32>
 8008800:	2f00      	cmp	r7, #0
 8008802:	f000 80d2 	beq.w	80089aa <_printf_i+0x1c6>
 8008806:	2f58      	cmp	r7, #88	@ 0x58
 8008808:	f000 80b9 	beq.w	800897e <_printf_i+0x19a>
 800880c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008810:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008814:	e03a      	b.n	800888c <_printf_i+0xa8>
 8008816:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800881a:	2b15      	cmp	r3, #21
 800881c:	d8f6      	bhi.n	800880c <_printf_i+0x28>
 800881e:	a101      	add	r1, pc, #4	@ (adr r1, 8008824 <_printf_i+0x40>)
 8008820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008824:	0800887d 	.word	0x0800887d
 8008828:	08008891 	.word	0x08008891
 800882c:	0800880d 	.word	0x0800880d
 8008830:	0800880d 	.word	0x0800880d
 8008834:	0800880d 	.word	0x0800880d
 8008838:	0800880d 	.word	0x0800880d
 800883c:	08008891 	.word	0x08008891
 8008840:	0800880d 	.word	0x0800880d
 8008844:	0800880d 	.word	0x0800880d
 8008848:	0800880d 	.word	0x0800880d
 800884c:	0800880d 	.word	0x0800880d
 8008850:	08008991 	.word	0x08008991
 8008854:	080088bb 	.word	0x080088bb
 8008858:	0800894b 	.word	0x0800894b
 800885c:	0800880d 	.word	0x0800880d
 8008860:	0800880d 	.word	0x0800880d
 8008864:	080089b3 	.word	0x080089b3
 8008868:	0800880d 	.word	0x0800880d
 800886c:	080088bb 	.word	0x080088bb
 8008870:	0800880d 	.word	0x0800880d
 8008874:	0800880d 	.word	0x0800880d
 8008878:	08008953 	.word	0x08008953
 800887c:	6833      	ldr	r3, [r6, #0]
 800887e:	1d1a      	adds	r2, r3, #4
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	6032      	str	r2, [r6, #0]
 8008884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008888:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800888c:	2301      	movs	r3, #1
 800888e:	e09d      	b.n	80089cc <_printf_i+0x1e8>
 8008890:	6833      	ldr	r3, [r6, #0]
 8008892:	6820      	ldr	r0, [r4, #0]
 8008894:	1d19      	adds	r1, r3, #4
 8008896:	6031      	str	r1, [r6, #0]
 8008898:	0606      	lsls	r6, r0, #24
 800889a:	d501      	bpl.n	80088a0 <_printf_i+0xbc>
 800889c:	681d      	ldr	r5, [r3, #0]
 800889e:	e003      	b.n	80088a8 <_printf_i+0xc4>
 80088a0:	0645      	lsls	r5, r0, #25
 80088a2:	d5fb      	bpl.n	800889c <_printf_i+0xb8>
 80088a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088a8:	2d00      	cmp	r5, #0
 80088aa:	da03      	bge.n	80088b4 <_printf_i+0xd0>
 80088ac:	232d      	movs	r3, #45	@ 0x2d
 80088ae:	426d      	negs	r5, r5
 80088b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088b4:	4859      	ldr	r0, [pc, #356]	@ (8008a1c <_printf_i+0x238>)
 80088b6:	230a      	movs	r3, #10
 80088b8:	e011      	b.n	80088de <_printf_i+0xfa>
 80088ba:	6821      	ldr	r1, [r4, #0]
 80088bc:	6833      	ldr	r3, [r6, #0]
 80088be:	0608      	lsls	r0, r1, #24
 80088c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80088c4:	d402      	bmi.n	80088cc <_printf_i+0xe8>
 80088c6:	0649      	lsls	r1, r1, #25
 80088c8:	bf48      	it	mi
 80088ca:	b2ad      	uxthmi	r5, r5
 80088cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80088ce:	4853      	ldr	r0, [pc, #332]	@ (8008a1c <_printf_i+0x238>)
 80088d0:	6033      	str	r3, [r6, #0]
 80088d2:	bf14      	ite	ne
 80088d4:	230a      	movne	r3, #10
 80088d6:	2308      	moveq	r3, #8
 80088d8:	2100      	movs	r1, #0
 80088da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80088de:	6866      	ldr	r6, [r4, #4]
 80088e0:	60a6      	str	r6, [r4, #8]
 80088e2:	2e00      	cmp	r6, #0
 80088e4:	bfa2      	ittt	ge
 80088e6:	6821      	ldrge	r1, [r4, #0]
 80088e8:	f021 0104 	bicge.w	r1, r1, #4
 80088ec:	6021      	strge	r1, [r4, #0]
 80088ee:	b90d      	cbnz	r5, 80088f4 <_printf_i+0x110>
 80088f0:	2e00      	cmp	r6, #0
 80088f2:	d04b      	beq.n	800898c <_printf_i+0x1a8>
 80088f4:	4616      	mov	r6, r2
 80088f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80088fa:	fb03 5711 	mls	r7, r3, r1, r5
 80088fe:	5dc7      	ldrb	r7, [r0, r7]
 8008900:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008904:	462f      	mov	r7, r5
 8008906:	42bb      	cmp	r3, r7
 8008908:	460d      	mov	r5, r1
 800890a:	d9f4      	bls.n	80088f6 <_printf_i+0x112>
 800890c:	2b08      	cmp	r3, #8
 800890e:	d10b      	bne.n	8008928 <_printf_i+0x144>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	07df      	lsls	r7, r3, #31
 8008914:	d508      	bpl.n	8008928 <_printf_i+0x144>
 8008916:	6923      	ldr	r3, [r4, #16]
 8008918:	6861      	ldr	r1, [r4, #4]
 800891a:	4299      	cmp	r1, r3
 800891c:	bfde      	ittt	le
 800891e:	2330      	movle	r3, #48	@ 0x30
 8008920:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008924:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008928:	1b92      	subs	r2, r2, r6
 800892a:	6122      	str	r2, [r4, #16]
 800892c:	f8cd a000 	str.w	sl, [sp]
 8008930:	464b      	mov	r3, r9
 8008932:	aa03      	add	r2, sp, #12
 8008934:	4621      	mov	r1, r4
 8008936:	4640      	mov	r0, r8
 8008938:	f7ff fee6 	bl	8008708 <_printf_common>
 800893c:	3001      	adds	r0, #1
 800893e:	d14a      	bne.n	80089d6 <_printf_i+0x1f2>
 8008940:	f04f 30ff 	mov.w	r0, #4294967295
 8008944:	b004      	add	sp, #16
 8008946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	f043 0320 	orr.w	r3, r3, #32
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	4833      	ldr	r0, [pc, #204]	@ (8008a20 <_printf_i+0x23c>)
 8008954:	2778      	movs	r7, #120	@ 0x78
 8008956:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	6831      	ldr	r1, [r6, #0]
 800895e:	061f      	lsls	r7, r3, #24
 8008960:	f851 5b04 	ldr.w	r5, [r1], #4
 8008964:	d402      	bmi.n	800896c <_printf_i+0x188>
 8008966:	065f      	lsls	r7, r3, #25
 8008968:	bf48      	it	mi
 800896a:	b2ad      	uxthmi	r5, r5
 800896c:	6031      	str	r1, [r6, #0]
 800896e:	07d9      	lsls	r1, r3, #31
 8008970:	bf44      	itt	mi
 8008972:	f043 0320 	orrmi.w	r3, r3, #32
 8008976:	6023      	strmi	r3, [r4, #0]
 8008978:	b11d      	cbz	r5, 8008982 <_printf_i+0x19e>
 800897a:	2310      	movs	r3, #16
 800897c:	e7ac      	b.n	80088d8 <_printf_i+0xf4>
 800897e:	4827      	ldr	r0, [pc, #156]	@ (8008a1c <_printf_i+0x238>)
 8008980:	e7e9      	b.n	8008956 <_printf_i+0x172>
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	f023 0320 	bic.w	r3, r3, #32
 8008988:	6023      	str	r3, [r4, #0]
 800898a:	e7f6      	b.n	800897a <_printf_i+0x196>
 800898c:	4616      	mov	r6, r2
 800898e:	e7bd      	b.n	800890c <_printf_i+0x128>
 8008990:	6833      	ldr	r3, [r6, #0]
 8008992:	6825      	ldr	r5, [r4, #0]
 8008994:	6961      	ldr	r1, [r4, #20]
 8008996:	1d18      	adds	r0, r3, #4
 8008998:	6030      	str	r0, [r6, #0]
 800899a:	062e      	lsls	r6, r5, #24
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	d501      	bpl.n	80089a4 <_printf_i+0x1c0>
 80089a0:	6019      	str	r1, [r3, #0]
 80089a2:	e002      	b.n	80089aa <_printf_i+0x1c6>
 80089a4:	0668      	lsls	r0, r5, #25
 80089a6:	d5fb      	bpl.n	80089a0 <_printf_i+0x1bc>
 80089a8:	8019      	strh	r1, [r3, #0]
 80089aa:	2300      	movs	r3, #0
 80089ac:	6123      	str	r3, [r4, #16]
 80089ae:	4616      	mov	r6, r2
 80089b0:	e7bc      	b.n	800892c <_printf_i+0x148>
 80089b2:	6833      	ldr	r3, [r6, #0]
 80089b4:	1d1a      	adds	r2, r3, #4
 80089b6:	6032      	str	r2, [r6, #0]
 80089b8:	681e      	ldr	r6, [r3, #0]
 80089ba:	6862      	ldr	r2, [r4, #4]
 80089bc:	2100      	movs	r1, #0
 80089be:	4630      	mov	r0, r6
 80089c0:	f7f7 fc0e 	bl	80001e0 <memchr>
 80089c4:	b108      	cbz	r0, 80089ca <_printf_i+0x1e6>
 80089c6:	1b80      	subs	r0, r0, r6
 80089c8:	6060      	str	r0, [r4, #4]
 80089ca:	6863      	ldr	r3, [r4, #4]
 80089cc:	6123      	str	r3, [r4, #16]
 80089ce:	2300      	movs	r3, #0
 80089d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089d4:	e7aa      	b.n	800892c <_printf_i+0x148>
 80089d6:	6923      	ldr	r3, [r4, #16]
 80089d8:	4632      	mov	r2, r6
 80089da:	4649      	mov	r1, r9
 80089dc:	4640      	mov	r0, r8
 80089de:	47d0      	blx	sl
 80089e0:	3001      	adds	r0, #1
 80089e2:	d0ad      	beq.n	8008940 <_printf_i+0x15c>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	079b      	lsls	r3, r3, #30
 80089e8:	d413      	bmi.n	8008a12 <_printf_i+0x22e>
 80089ea:	68e0      	ldr	r0, [r4, #12]
 80089ec:	9b03      	ldr	r3, [sp, #12]
 80089ee:	4298      	cmp	r0, r3
 80089f0:	bfb8      	it	lt
 80089f2:	4618      	movlt	r0, r3
 80089f4:	e7a6      	b.n	8008944 <_printf_i+0x160>
 80089f6:	2301      	movs	r3, #1
 80089f8:	4632      	mov	r2, r6
 80089fa:	4649      	mov	r1, r9
 80089fc:	4640      	mov	r0, r8
 80089fe:	47d0      	blx	sl
 8008a00:	3001      	adds	r0, #1
 8008a02:	d09d      	beq.n	8008940 <_printf_i+0x15c>
 8008a04:	3501      	adds	r5, #1
 8008a06:	68e3      	ldr	r3, [r4, #12]
 8008a08:	9903      	ldr	r1, [sp, #12]
 8008a0a:	1a5b      	subs	r3, r3, r1
 8008a0c:	42ab      	cmp	r3, r5
 8008a0e:	dcf2      	bgt.n	80089f6 <_printf_i+0x212>
 8008a10:	e7eb      	b.n	80089ea <_printf_i+0x206>
 8008a12:	2500      	movs	r5, #0
 8008a14:	f104 0619 	add.w	r6, r4, #25
 8008a18:	e7f5      	b.n	8008a06 <_printf_i+0x222>
 8008a1a:	bf00      	nop
 8008a1c:	0800b994 	.word	0x0800b994
 8008a20:	0800b9a5 	.word	0x0800b9a5

08008a24 <std>:
 8008a24:	2300      	movs	r3, #0
 8008a26:	b510      	push	{r4, lr}
 8008a28:	4604      	mov	r4, r0
 8008a2a:	e9c0 3300 	strd	r3, r3, [r0]
 8008a2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a32:	6083      	str	r3, [r0, #8]
 8008a34:	8181      	strh	r1, [r0, #12]
 8008a36:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a38:	81c2      	strh	r2, [r0, #14]
 8008a3a:	6183      	str	r3, [r0, #24]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	2208      	movs	r2, #8
 8008a40:	305c      	adds	r0, #92	@ 0x5c
 8008a42:	f000 f954 	bl	8008cee <memset>
 8008a46:	4b0d      	ldr	r3, [pc, #52]	@ (8008a7c <std+0x58>)
 8008a48:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a80 <std+0x5c>)
 8008a4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008a84 <std+0x60>)
 8008a50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a52:	4b0d      	ldr	r3, [pc, #52]	@ (8008a88 <std+0x64>)
 8008a54:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a56:	4b0d      	ldr	r3, [pc, #52]	@ (8008a8c <std+0x68>)
 8008a58:	6224      	str	r4, [r4, #32]
 8008a5a:	429c      	cmp	r4, r3
 8008a5c:	d006      	beq.n	8008a6c <std+0x48>
 8008a5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a62:	4294      	cmp	r4, r2
 8008a64:	d002      	beq.n	8008a6c <std+0x48>
 8008a66:	33d0      	adds	r3, #208	@ 0xd0
 8008a68:	429c      	cmp	r4, r3
 8008a6a:	d105      	bne.n	8008a78 <std+0x54>
 8008a6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a74:	f000 ba20 	b.w	8008eb8 <__retarget_lock_init_recursive>
 8008a78:	bd10      	pop	{r4, pc}
 8008a7a:	bf00      	nop
 8008a7c:	08008c65 	.word	0x08008c65
 8008a80:	08008c8b 	.word	0x08008c8b
 8008a84:	08008cc3 	.word	0x08008cc3
 8008a88:	08008ce7 	.word	0x08008ce7
 8008a8c:	20004fa0 	.word	0x20004fa0

08008a90 <stdio_exit_handler>:
 8008a90:	4a02      	ldr	r2, [pc, #8]	@ (8008a9c <stdio_exit_handler+0xc>)
 8008a92:	4903      	ldr	r1, [pc, #12]	@ (8008aa0 <stdio_exit_handler+0x10>)
 8008a94:	4803      	ldr	r0, [pc, #12]	@ (8008aa4 <stdio_exit_handler+0x14>)
 8008a96:	f000 b869 	b.w	8008b6c <_fwalk_sglue>
 8008a9a:	bf00      	nop
 8008a9c:	20000010 	.word	0x20000010
 8008aa0:	0800ae69 	.word	0x0800ae69
 8008aa4:	20000020 	.word	0x20000020

08008aa8 <cleanup_stdio>:
 8008aa8:	6841      	ldr	r1, [r0, #4]
 8008aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8008adc <cleanup_stdio+0x34>)
 8008aac:	4299      	cmp	r1, r3
 8008aae:	b510      	push	{r4, lr}
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	d001      	beq.n	8008ab8 <cleanup_stdio+0x10>
 8008ab4:	f002 f9d8 	bl	800ae68 <_fflush_r>
 8008ab8:	68a1      	ldr	r1, [r4, #8]
 8008aba:	4b09      	ldr	r3, [pc, #36]	@ (8008ae0 <cleanup_stdio+0x38>)
 8008abc:	4299      	cmp	r1, r3
 8008abe:	d002      	beq.n	8008ac6 <cleanup_stdio+0x1e>
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f002 f9d1 	bl	800ae68 <_fflush_r>
 8008ac6:	68e1      	ldr	r1, [r4, #12]
 8008ac8:	4b06      	ldr	r3, [pc, #24]	@ (8008ae4 <cleanup_stdio+0x3c>)
 8008aca:	4299      	cmp	r1, r3
 8008acc:	d004      	beq.n	8008ad8 <cleanup_stdio+0x30>
 8008ace:	4620      	mov	r0, r4
 8008ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ad4:	f002 b9c8 	b.w	800ae68 <_fflush_r>
 8008ad8:	bd10      	pop	{r4, pc}
 8008ada:	bf00      	nop
 8008adc:	20004fa0 	.word	0x20004fa0
 8008ae0:	20005008 	.word	0x20005008
 8008ae4:	20005070 	.word	0x20005070

08008ae8 <global_stdio_init.part.0>:
 8008ae8:	b510      	push	{r4, lr}
 8008aea:	4b0b      	ldr	r3, [pc, #44]	@ (8008b18 <global_stdio_init.part.0+0x30>)
 8008aec:	4c0b      	ldr	r4, [pc, #44]	@ (8008b1c <global_stdio_init.part.0+0x34>)
 8008aee:	4a0c      	ldr	r2, [pc, #48]	@ (8008b20 <global_stdio_init.part.0+0x38>)
 8008af0:	601a      	str	r2, [r3, #0]
 8008af2:	4620      	mov	r0, r4
 8008af4:	2200      	movs	r2, #0
 8008af6:	2104      	movs	r1, #4
 8008af8:	f7ff ff94 	bl	8008a24 <std>
 8008afc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b00:	2201      	movs	r2, #1
 8008b02:	2109      	movs	r1, #9
 8008b04:	f7ff ff8e 	bl	8008a24 <std>
 8008b08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b12:	2112      	movs	r1, #18
 8008b14:	f7ff bf86 	b.w	8008a24 <std>
 8008b18:	200050d8 	.word	0x200050d8
 8008b1c:	20004fa0 	.word	0x20004fa0
 8008b20:	08008a91 	.word	0x08008a91

08008b24 <__sfp_lock_acquire>:
 8008b24:	4801      	ldr	r0, [pc, #4]	@ (8008b2c <__sfp_lock_acquire+0x8>)
 8008b26:	f000 b9c8 	b.w	8008eba <__retarget_lock_acquire_recursive>
 8008b2a:	bf00      	nop
 8008b2c:	200050e1 	.word	0x200050e1

08008b30 <__sfp_lock_release>:
 8008b30:	4801      	ldr	r0, [pc, #4]	@ (8008b38 <__sfp_lock_release+0x8>)
 8008b32:	f000 b9c3 	b.w	8008ebc <__retarget_lock_release_recursive>
 8008b36:	bf00      	nop
 8008b38:	200050e1 	.word	0x200050e1

08008b3c <__sinit>:
 8008b3c:	b510      	push	{r4, lr}
 8008b3e:	4604      	mov	r4, r0
 8008b40:	f7ff fff0 	bl	8008b24 <__sfp_lock_acquire>
 8008b44:	6a23      	ldr	r3, [r4, #32]
 8008b46:	b11b      	cbz	r3, 8008b50 <__sinit+0x14>
 8008b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b4c:	f7ff bff0 	b.w	8008b30 <__sfp_lock_release>
 8008b50:	4b04      	ldr	r3, [pc, #16]	@ (8008b64 <__sinit+0x28>)
 8008b52:	6223      	str	r3, [r4, #32]
 8008b54:	4b04      	ldr	r3, [pc, #16]	@ (8008b68 <__sinit+0x2c>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1f5      	bne.n	8008b48 <__sinit+0xc>
 8008b5c:	f7ff ffc4 	bl	8008ae8 <global_stdio_init.part.0>
 8008b60:	e7f2      	b.n	8008b48 <__sinit+0xc>
 8008b62:	bf00      	nop
 8008b64:	08008aa9 	.word	0x08008aa9
 8008b68:	200050d8 	.word	0x200050d8

08008b6c <_fwalk_sglue>:
 8008b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b70:	4607      	mov	r7, r0
 8008b72:	4688      	mov	r8, r1
 8008b74:	4614      	mov	r4, r2
 8008b76:	2600      	movs	r6, #0
 8008b78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b7c:	f1b9 0901 	subs.w	r9, r9, #1
 8008b80:	d505      	bpl.n	8008b8e <_fwalk_sglue+0x22>
 8008b82:	6824      	ldr	r4, [r4, #0]
 8008b84:	2c00      	cmp	r4, #0
 8008b86:	d1f7      	bne.n	8008b78 <_fwalk_sglue+0xc>
 8008b88:	4630      	mov	r0, r6
 8008b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b8e:	89ab      	ldrh	r3, [r5, #12]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d907      	bls.n	8008ba4 <_fwalk_sglue+0x38>
 8008b94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	d003      	beq.n	8008ba4 <_fwalk_sglue+0x38>
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	47c0      	blx	r8
 8008ba2:	4306      	orrs	r6, r0
 8008ba4:	3568      	adds	r5, #104	@ 0x68
 8008ba6:	e7e9      	b.n	8008b7c <_fwalk_sglue+0x10>

08008ba8 <sniprintf>:
 8008ba8:	b40c      	push	{r2, r3}
 8008baa:	b530      	push	{r4, r5, lr}
 8008bac:	4b17      	ldr	r3, [pc, #92]	@ (8008c0c <sniprintf+0x64>)
 8008bae:	1e0c      	subs	r4, r1, #0
 8008bb0:	681d      	ldr	r5, [r3, #0]
 8008bb2:	b09d      	sub	sp, #116	@ 0x74
 8008bb4:	da08      	bge.n	8008bc8 <sniprintf+0x20>
 8008bb6:	238b      	movs	r3, #139	@ 0x8b
 8008bb8:	602b      	str	r3, [r5, #0]
 8008bba:	f04f 30ff 	mov.w	r0, #4294967295
 8008bbe:	b01d      	add	sp, #116	@ 0x74
 8008bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bc4:	b002      	add	sp, #8
 8008bc6:	4770      	bx	lr
 8008bc8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008bcc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008bd0:	bf14      	ite	ne
 8008bd2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008bd6:	4623      	moveq	r3, r4
 8008bd8:	9304      	str	r3, [sp, #16]
 8008bda:	9307      	str	r3, [sp, #28]
 8008bdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008be0:	9002      	str	r0, [sp, #8]
 8008be2:	9006      	str	r0, [sp, #24]
 8008be4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008be8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008bea:	ab21      	add	r3, sp, #132	@ 0x84
 8008bec:	a902      	add	r1, sp, #8
 8008bee:	4628      	mov	r0, r5
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	f001 fc9f 	bl	800a534 <_svfiprintf_r>
 8008bf6:	1c43      	adds	r3, r0, #1
 8008bf8:	bfbc      	itt	lt
 8008bfa:	238b      	movlt	r3, #139	@ 0x8b
 8008bfc:	602b      	strlt	r3, [r5, #0]
 8008bfe:	2c00      	cmp	r4, #0
 8008c00:	d0dd      	beq.n	8008bbe <sniprintf+0x16>
 8008c02:	9b02      	ldr	r3, [sp, #8]
 8008c04:	2200      	movs	r2, #0
 8008c06:	701a      	strb	r2, [r3, #0]
 8008c08:	e7d9      	b.n	8008bbe <sniprintf+0x16>
 8008c0a:	bf00      	nop
 8008c0c:	2000001c 	.word	0x2000001c

08008c10 <siscanf>:
 8008c10:	b40e      	push	{r1, r2, r3}
 8008c12:	b530      	push	{r4, r5, lr}
 8008c14:	b09c      	sub	sp, #112	@ 0x70
 8008c16:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008c18:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008c1c:	f854 5b04 	ldr.w	r5, [r4], #4
 8008c20:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008c24:	9002      	str	r0, [sp, #8]
 8008c26:	9006      	str	r0, [sp, #24]
 8008c28:	f7f7 fb2a 	bl	8000280 <strlen>
 8008c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8008c5c <siscanf+0x4c>)
 8008c2e:	9003      	str	r0, [sp, #12]
 8008c30:	9007      	str	r0, [sp, #28]
 8008c32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c34:	480a      	ldr	r0, [pc, #40]	@ (8008c60 <siscanf+0x50>)
 8008c36:	9401      	str	r4, [sp, #4]
 8008c38:	2300      	movs	r3, #0
 8008c3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c3c:	9314      	str	r3, [sp, #80]	@ 0x50
 8008c3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008c42:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008c46:	462a      	mov	r2, r5
 8008c48:	4623      	mov	r3, r4
 8008c4a:	a902      	add	r1, sp, #8
 8008c4c:	6800      	ldr	r0, [r0, #0]
 8008c4e:	f001 fdc5 	bl	800a7dc <__ssvfiscanf_r>
 8008c52:	b01c      	add	sp, #112	@ 0x70
 8008c54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c58:	b003      	add	sp, #12
 8008c5a:	4770      	bx	lr
 8008c5c:	08008c87 	.word	0x08008c87
 8008c60:	2000001c 	.word	0x2000001c

08008c64 <__sread>:
 8008c64:	b510      	push	{r4, lr}
 8008c66:	460c      	mov	r4, r1
 8008c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c6c:	f000 f8d6 	bl	8008e1c <_read_r>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	bfab      	itete	ge
 8008c74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008c76:	89a3      	ldrhlt	r3, [r4, #12]
 8008c78:	181b      	addge	r3, r3, r0
 8008c7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008c7e:	bfac      	ite	ge
 8008c80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008c82:	81a3      	strhlt	r3, [r4, #12]
 8008c84:	bd10      	pop	{r4, pc}

08008c86 <__seofread>:
 8008c86:	2000      	movs	r0, #0
 8008c88:	4770      	bx	lr

08008c8a <__swrite>:
 8008c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c8e:	461f      	mov	r7, r3
 8008c90:	898b      	ldrh	r3, [r1, #12]
 8008c92:	05db      	lsls	r3, r3, #23
 8008c94:	4605      	mov	r5, r0
 8008c96:	460c      	mov	r4, r1
 8008c98:	4616      	mov	r6, r2
 8008c9a:	d505      	bpl.n	8008ca8 <__swrite+0x1e>
 8008c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f000 f8a8 	bl	8008df8 <_lseek_r>
 8008ca8:	89a3      	ldrh	r3, [r4, #12]
 8008caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cb2:	81a3      	strh	r3, [r4, #12]
 8008cb4:	4632      	mov	r2, r6
 8008cb6:	463b      	mov	r3, r7
 8008cb8:	4628      	mov	r0, r5
 8008cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cbe:	f000 b8bf 	b.w	8008e40 <_write_r>

08008cc2 <__sseek>:
 8008cc2:	b510      	push	{r4, lr}
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cca:	f000 f895 	bl	8008df8 <_lseek_r>
 8008cce:	1c43      	adds	r3, r0, #1
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	bf15      	itete	ne
 8008cd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008cd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008cda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008cde:	81a3      	strheq	r3, [r4, #12]
 8008ce0:	bf18      	it	ne
 8008ce2:	81a3      	strhne	r3, [r4, #12]
 8008ce4:	bd10      	pop	{r4, pc}

08008ce6 <__sclose>:
 8008ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cea:	f000 b81f 	b.w	8008d2c <_close_r>

08008cee <memset>:
 8008cee:	4402      	add	r2, r0
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d100      	bne.n	8008cf8 <memset+0xa>
 8008cf6:	4770      	bx	lr
 8008cf8:	f803 1b01 	strb.w	r1, [r3], #1
 8008cfc:	e7f9      	b.n	8008cf2 <memset+0x4>

08008cfe <strncpy>:
 8008cfe:	b510      	push	{r4, lr}
 8008d00:	3901      	subs	r1, #1
 8008d02:	4603      	mov	r3, r0
 8008d04:	b132      	cbz	r2, 8008d14 <strncpy+0x16>
 8008d06:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008d0a:	f803 4b01 	strb.w	r4, [r3], #1
 8008d0e:	3a01      	subs	r2, #1
 8008d10:	2c00      	cmp	r4, #0
 8008d12:	d1f7      	bne.n	8008d04 <strncpy+0x6>
 8008d14:	441a      	add	r2, r3
 8008d16:	2100      	movs	r1, #0
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d100      	bne.n	8008d1e <strncpy+0x20>
 8008d1c:	bd10      	pop	{r4, pc}
 8008d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d22:	e7f9      	b.n	8008d18 <strncpy+0x1a>

08008d24 <_localeconv_r>:
 8008d24:	4800      	ldr	r0, [pc, #0]	@ (8008d28 <_localeconv_r+0x4>)
 8008d26:	4770      	bx	lr
 8008d28:	2000015c 	.word	0x2000015c

08008d2c <_close_r>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	4d06      	ldr	r5, [pc, #24]	@ (8008d48 <_close_r+0x1c>)
 8008d30:	2300      	movs	r3, #0
 8008d32:	4604      	mov	r4, r0
 8008d34:	4608      	mov	r0, r1
 8008d36:	602b      	str	r3, [r5, #0]
 8008d38:	f7f9 f9ca 	bl	80020d0 <_close>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	d102      	bne.n	8008d46 <_close_r+0x1a>
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	b103      	cbz	r3, 8008d46 <_close_r+0x1a>
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	200050dc 	.word	0x200050dc

08008d4c <_reclaim_reent>:
 8008d4c:	4b29      	ldr	r3, [pc, #164]	@ (8008df4 <_reclaim_reent+0xa8>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4283      	cmp	r3, r0
 8008d52:	b570      	push	{r4, r5, r6, lr}
 8008d54:	4604      	mov	r4, r0
 8008d56:	d04b      	beq.n	8008df0 <_reclaim_reent+0xa4>
 8008d58:	69c3      	ldr	r3, [r0, #28]
 8008d5a:	b1ab      	cbz	r3, 8008d88 <_reclaim_reent+0x3c>
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	b16b      	cbz	r3, 8008d7c <_reclaim_reent+0x30>
 8008d60:	2500      	movs	r5, #0
 8008d62:	69e3      	ldr	r3, [r4, #28]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	5959      	ldr	r1, [r3, r5]
 8008d68:	2900      	cmp	r1, #0
 8008d6a:	d13b      	bne.n	8008de4 <_reclaim_reent+0x98>
 8008d6c:	3504      	adds	r5, #4
 8008d6e:	2d80      	cmp	r5, #128	@ 0x80
 8008d70:	d1f7      	bne.n	8008d62 <_reclaim_reent+0x16>
 8008d72:	69e3      	ldr	r3, [r4, #28]
 8008d74:	4620      	mov	r0, r4
 8008d76:	68d9      	ldr	r1, [r3, #12]
 8008d78:	f000 fefe 	bl	8009b78 <_free_r>
 8008d7c:	69e3      	ldr	r3, [r4, #28]
 8008d7e:	6819      	ldr	r1, [r3, #0]
 8008d80:	b111      	cbz	r1, 8008d88 <_reclaim_reent+0x3c>
 8008d82:	4620      	mov	r0, r4
 8008d84:	f000 fef8 	bl	8009b78 <_free_r>
 8008d88:	6961      	ldr	r1, [r4, #20]
 8008d8a:	b111      	cbz	r1, 8008d92 <_reclaim_reent+0x46>
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f000 fef3 	bl	8009b78 <_free_r>
 8008d92:	69e1      	ldr	r1, [r4, #28]
 8008d94:	b111      	cbz	r1, 8008d9c <_reclaim_reent+0x50>
 8008d96:	4620      	mov	r0, r4
 8008d98:	f000 feee 	bl	8009b78 <_free_r>
 8008d9c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008d9e:	b111      	cbz	r1, 8008da6 <_reclaim_reent+0x5a>
 8008da0:	4620      	mov	r0, r4
 8008da2:	f000 fee9 	bl	8009b78 <_free_r>
 8008da6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008da8:	b111      	cbz	r1, 8008db0 <_reclaim_reent+0x64>
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 fee4 	bl	8009b78 <_free_r>
 8008db0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008db2:	b111      	cbz	r1, 8008dba <_reclaim_reent+0x6e>
 8008db4:	4620      	mov	r0, r4
 8008db6:	f000 fedf 	bl	8009b78 <_free_r>
 8008dba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008dbc:	b111      	cbz	r1, 8008dc4 <_reclaim_reent+0x78>
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f000 feda 	bl	8009b78 <_free_r>
 8008dc4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008dc6:	b111      	cbz	r1, 8008dce <_reclaim_reent+0x82>
 8008dc8:	4620      	mov	r0, r4
 8008dca:	f000 fed5 	bl	8009b78 <_free_r>
 8008dce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008dd0:	b111      	cbz	r1, 8008dd8 <_reclaim_reent+0x8c>
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 fed0 	bl	8009b78 <_free_r>
 8008dd8:	6a23      	ldr	r3, [r4, #32]
 8008dda:	b14b      	cbz	r3, 8008df0 <_reclaim_reent+0xa4>
 8008ddc:	4620      	mov	r0, r4
 8008dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008de2:	4718      	bx	r3
 8008de4:	680e      	ldr	r6, [r1, #0]
 8008de6:	4620      	mov	r0, r4
 8008de8:	f000 fec6 	bl	8009b78 <_free_r>
 8008dec:	4631      	mov	r1, r6
 8008dee:	e7bb      	b.n	8008d68 <_reclaim_reent+0x1c>
 8008df0:	bd70      	pop	{r4, r5, r6, pc}
 8008df2:	bf00      	nop
 8008df4:	2000001c 	.word	0x2000001c

08008df8 <_lseek_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4d07      	ldr	r5, [pc, #28]	@ (8008e18 <_lseek_r+0x20>)
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	4608      	mov	r0, r1
 8008e00:	4611      	mov	r1, r2
 8008e02:	2200      	movs	r2, #0
 8008e04:	602a      	str	r2, [r5, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	f7f9 f989 	bl	800211e <_lseek>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d102      	bne.n	8008e16 <_lseek_r+0x1e>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	b103      	cbz	r3, 8008e16 <_lseek_r+0x1e>
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	200050dc 	.word	0x200050dc

08008e1c <_read_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4d07      	ldr	r5, [pc, #28]	@ (8008e3c <_read_r+0x20>)
 8008e20:	4604      	mov	r4, r0
 8008e22:	4608      	mov	r0, r1
 8008e24:	4611      	mov	r1, r2
 8008e26:	2200      	movs	r2, #0
 8008e28:	602a      	str	r2, [r5, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f7f9 f917 	bl	800205e <_read>
 8008e30:	1c43      	adds	r3, r0, #1
 8008e32:	d102      	bne.n	8008e3a <_read_r+0x1e>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	b103      	cbz	r3, 8008e3a <_read_r+0x1e>
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}
 8008e3c:	200050dc 	.word	0x200050dc

08008e40 <_write_r>:
 8008e40:	b538      	push	{r3, r4, r5, lr}
 8008e42:	4d07      	ldr	r5, [pc, #28]	@ (8008e60 <_write_r+0x20>)
 8008e44:	4604      	mov	r4, r0
 8008e46:	4608      	mov	r0, r1
 8008e48:	4611      	mov	r1, r2
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	602a      	str	r2, [r5, #0]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	f7f9 f922 	bl	8002098 <_write>
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	d102      	bne.n	8008e5e <_write_r+0x1e>
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	b103      	cbz	r3, 8008e5e <_write_r+0x1e>
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}
 8008e60:	200050dc 	.word	0x200050dc

08008e64 <__errno>:
 8008e64:	4b01      	ldr	r3, [pc, #4]	@ (8008e6c <__errno+0x8>)
 8008e66:	6818      	ldr	r0, [r3, #0]
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	2000001c 	.word	0x2000001c

08008e70 <__libc_init_array>:
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	4d0d      	ldr	r5, [pc, #52]	@ (8008ea8 <__libc_init_array+0x38>)
 8008e74:	4c0d      	ldr	r4, [pc, #52]	@ (8008eac <__libc_init_array+0x3c>)
 8008e76:	1b64      	subs	r4, r4, r5
 8008e78:	10a4      	asrs	r4, r4, #2
 8008e7a:	2600      	movs	r6, #0
 8008e7c:	42a6      	cmp	r6, r4
 8008e7e:	d109      	bne.n	8008e94 <__libc_init_array+0x24>
 8008e80:	4d0b      	ldr	r5, [pc, #44]	@ (8008eb0 <__libc_init_array+0x40>)
 8008e82:	4c0c      	ldr	r4, [pc, #48]	@ (8008eb4 <__libc_init_array+0x44>)
 8008e84:	f002 fce0 	bl	800b848 <_init>
 8008e88:	1b64      	subs	r4, r4, r5
 8008e8a:	10a4      	asrs	r4, r4, #2
 8008e8c:	2600      	movs	r6, #0
 8008e8e:	42a6      	cmp	r6, r4
 8008e90:	d105      	bne.n	8008e9e <__libc_init_array+0x2e>
 8008e92:	bd70      	pop	{r4, r5, r6, pc}
 8008e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e98:	4798      	blx	r3
 8008e9a:	3601      	adds	r6, #1
 8008e9c:	e7ee      	b.n	8008e7c <__libc_init_array+0xc>
 8008e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea2:	4798      	blx	r3
 8008ea4:	3601      	adds	r6, #1
 8008ea6:	e7f2      	b.n	8008e8e <__libc_init_array+0x1e>
 8008ea8:	0800bd14 	.word	0x0800bd14
 8008eac:	0800bd14 	.word	0x0800bd14
 8008eb0:	0800bd14 	.word	0x0800bd14
 8008eb4:	0800bd18 	.word	0x0800bd18

08008eb8 <__retarget_lock_init_recursive>:
 8008eb8:	4770      	bx	lr

08008eba <__retarget_lock_acquire_recursive>:
 8008eba:	4770      	bx	lr

08008ebc <__retarget_lock_release_recursive>:
 8008ebc:	4770      	bx	lr

08008ebe <memcpy>:
 8008ebe:	440a      	add	r2, r1
 8008ec0:	4291      	cmp	r1, r2
 8008ec2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ec6:	d100      	bne.n	8008eca <memcpy+0xc>
 8008ec8:	4770      	bx	lr
 8008eca:	b510      	push	{r4, lr}
 8008ecc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ed0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ed4:	4291      	cmp	r1, r2
 8008ed6:	d1f9      	bne.n	8008ecc <memcpy+0xe>
 8008ed8:	bd10      	pop	{r4, pc}

08008eda <quorem>:
 8008eda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ede:	6903      	ldr	r3, [r0, #16]
 8008ee0:	690c      	ldr	r4, [r1, #16]
 8008ee2:	42a3      	cmp	r3, r4
 8008ee4:	4607      	mov	r7, r0
 8008ee6:	db7e      	blt.n	8008fe6 <quorem+0x10c>
 8008ee8:	3c01      	subs	r4, #1
 8008eea:	f101 0814 	add.w	r8, r1, #20
 8008eee:	00a3      	lsls	r3, r4, #2
 8008ef0:	f100 0514 	add.w	r5, r0, #20
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008efa:	9301      	str	r3, [sp, #4]
 8008efc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f04:	3301      	adds	r3, #1
 8008f06:	429a      	cmp	r2, r3
 8008f08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f10:	d32e      	bcc.n	8008f70 <quorem+0x96>
 8008f12:	f04f 0a00 	mov.w	sl, #0
 8008f16:	46c4      	mov	ip, r8
 8008f18:	46ae      	mov	lr, r5
 8008f1a:	46d3      	mov	fp, sl
 8008f1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f20:	b298      	uxth	r0, r3
 8008f22:	fb06 a000 	mla	r0, r6, r0, sl
 8008f26:	0c02      	lsrs	r2, r0, #16
 8008f28:	0c1b      	lsrs	r3, r3, #16
 8008f2a:	fb06 2303 	mla	r3, r6, r3, r2
 8008f2e:	f8de 2000 	ldr.w	r2, [lr]
 8008f32:	b280      	uxth	r0, r0
 8008f34:	b292      	uxth	r2, r2
 8008f36:	1a12      	subs	r2, r2, r0
 8008f38:	445a      	add	r2, fp
 8008f3a:	f8de 0000 	ldr.w	r0, [lr]
 8008f3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008f48:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008f4c:	b292      	uxth	r2, r2
 8008f4e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008f52:	45e1      	cmp	r9, ip
 8008f54:	f84e 2b04 	str.w	r2, [lr], #4
 8008f58:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008f5c:	d2de      	bcs.n	8008f1c <quorem+0x42>
 8008f5e:	9b00      	ldr	r3, [sp, #0]
 8008f60:	58eb      	ldr	r3, [r5, r3]
 8008f62:	b92b      	cbnz	r3, 8008f70 <quorem+0x96>
 8008f64:	9b01      	ldr	r3, [sp, #4]
 8008f66:	3b04      	subs	r3, #4
 8008f68:	429d      	cmp	r5, r3
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	d32f      	bcc.n	8008fce <quorem+0xf4>
 8008f6e:	613c      	str	r4, [r7, #16]
 8008f70:	4638      	mov	r0, r7
 8008f72:	f001 f97b 	bl	800a26c <__mcmp>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	db25      	blt.n	8008fc6 <quorem+0xec>
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f82:	f8d1 c000 	ldr.w	ip, [r1]
 8008f86:	fa1f fe82 	uxth.w	lr, r2
 8008f8a:	fa1f f38c 	uxth.w	r3, ip
 8008f8e:	eba3 030e 	sub.w	r3, r3, lr
 8008f92:	4403      	add	r3, r0
 8008f94:	0c12      	lsrs	r2, r2, #16
 8008f96:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008f9a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fa4:	45c1      	cmp	r9, r8
 8008fa6:	f841 3b04 	str.w	r3, [r1], #4
 8008faa:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008fae:	d2e6      	bcs.n	8008f7e <quorem+0xa4>
 8008fb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fb8:	b922      	cbnz	r2, 8008fc4 <quorem+0xea>
 8008fba:	3b04      	subs	r3, #4
 8008fbc:	429d      	cmp	r5, r3
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	d30b      	bcc.n	8008fda <quorem+0x100>
 8008fc2:	613c      	str	r4, [r7, #16]
 8008fc4:	3601      	adds	r6, #1
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	b003      	add	sp, #12
 8008fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fce:	6812      	ldr	r2, [r2, #0]
 8008fd0:	3b04      	subs	r3, #4
 8008fd2:	2a00      	cmp	r2, #0
 8008fd4:	d1cb      	bne.n	8008f6e <quorem+0x94>
 8008fd6:	3c01      	subs	r4, #1
 8008fd8:	e7c6      	b.n	8008f68 <quorem+0x8e>
 8008fda:	6812      	ldr	r2, [r2, #0]
 8008fdc:	3b04      	subs	r3, #4
 8008fde:	2a00      	cmp	r2, #0
 8008fe0:	d1ef      	bne.n	8008fc2 <quorem+0xe8>
 8008fe2:	3c01      	subs	r4, #1
 8008fe4:	e7ea      	b.n	8008fbc <quorem+0xe2>
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	e7ee      	b.n	8008fc8 <quorem+0xee>
 8008fea:	0000      	movs	r0, r0
 8008fec:	0000      	movs	r0, r0
	...

08008ff0 <_dtoa_r>:
 8008ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff4:	69c7      	ldr	r7, [r0, #28]
 8008ff6:	b099      	sub	sp, #100	@ 0x64
 8008ff8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008ffc:	ec55 4b10 	vmov	r4, r5, d0
 8009000:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009002:	9109      	str	r1, [sp, #36]	@ 0x24
 8009004:	4683      	mov	fp, r0
 8009006:	920e      	str	r2, [sp, #56]	@ 0x38
 8009008:	9313      	str	r3, [sp, #76]	@ 0x4c
 800900a:	b97f      	cbnz	r7, 800902c <_dtoa_r+0x3c>
 800900c:	2010      	movs	r0, #16
 800900e:	f000 fdfd 	bl	8009c0c <malloc>
 8009012:	4602      	mov	r2, r0
 8009014:	f8cb 001c 	str.w	r0, [fp, #28]
 8009018:	b920      	cbnz	r0, 8009024 <_dtoa_r+0x34>
 800901a:	4ba7      	ldr	r3, [pc, #668]	@ (80092b8 <_dtoa_r+0x2c8>)
 800901c:	21ef      	movs	r1, #239	@ 0xef
 800901e:	48a7      	ldr	r0, [pc, #668]	@ (80092bc <_dtoa_r+0x2cc>)
 8009020:	f001 ffe8 	bl	800aff4 <__assert_func>
 8009024:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009028:	6007      	str	r7, [r0, #0]
 800902a:	60c7      	str	r7, [r0, #12]
 800902c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009030:	6819      	ldr	r1, [r3, #0]
 8009032:	b159      	cbz	r1, 800904c <_dtoa_r+0x5c>
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	604a      	str	r2, [r1, #4]
 8009038:	2301      	movs	r3, #1
 800903a:	4093      	lsls	r3, r2
 800903c:	608b      	str	r3, [r1, #8]
 800903e:	4658      	mov	r0, fp
 8009040:	f000 feda 	bl	8009df8 <_Bfree>
 8009044:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009048:	2200      	movs	r2, #0
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	1e2b      	subs	r3, r5, #0
 800904e:	bfb9      	ittee	lt
 8009050:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009054:	9303      	strlt	r3, [sp, #12]
 8009056:	2300      	movge	r3, #0
 8009058:	6033      	strge	r3, [r6, #0]
 800905a:	9f03      	ldr	r7, [sp, #12]
 800905c:	4b98      	ldr	r3, [pc, #608]	@ (80092c0 <_dtoa_r+0x2d0>)
 800905e:	bfbc      	itt	lt
 8009060:	2201      	movlt	r2, #1
 8009062:	6032      	strlt	r2, [r6, #0]
 8009064:	43bb      	bics	r3, r7
 8009066:	d112      	bne.n	800908e <_dtoa_r+0x9e>
 8009068:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800906a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800906e:	6013      	str	r3, [r2, #0]
 8009070:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009074:	4323      	orrs	r3, r4
 8009076:	f000 854d 	beq.w	8009b14 <_dtoa_r+0xb24>
 800907a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800907c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80092d4 <_dtoa_r+0x2e4>
 8009080:	2b00      	cmp	r3, #0
 8009082:	f000 854f 	beq.w	8009b24 <_dtoa_r+0xb34>
 8009086:	f10a 0303 	add.w	r3, sl, #3
 800908a:	f000 bd49 	b.w	8009b20 <_dtoa_r+0xb30>
 800908e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009092:	2200      	movs	r2, #0
 8009094:	ec51 0b17 	vmov	r0, r1, d7
 8009098:	2300      	movs	r3, #0
 800909a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800909e:	f7f7 fd1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80090a2:	4680      	mov	r8, r0
 80090a4:	b158      	cbz	r0, 80090be <_dtoa_r+0xce>
 80090a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80090a8:	2301      	movs	r3, #1
 80090aa:	6013      	str	r3, [r2, #0]
 80090ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80090ae:	b113      	cbz	r3, 80090b6 <_dtoa_r+0xc6>
 80090b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80090b2:	4b84      	ldr	r3, [pc, #528]	@ (80092c4 <_dtoa_r+0x2d4>)
 80090b4:	6013      	str	r3, [r2, #0]
 80090b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80092d8 <_dtoa_r+0x2e8>
 80090ba:	f000 bd33 	b.w	8009b24 <_dtoa_r+0xb34>
 80090be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80090c2:	aa16      	add	r2, sp, #88	@ 0x58
 80090c4:	a917      	add	r1, sp, #92	@ 0x5c
 80090c6:	4658      	mov	r0, fp
 80090c8:	f001 f980 	bl	800a3cc <__d2b>
 80090cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80090d0:	4681      	mov	r9, r0
 80090d2:	2e00      	cmp	r6, #0
 80090d4:	d077      	beq.n	80091c6 <_dtoa_r+0x1d6>
 80090d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80090dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80090e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80090ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80090f0:	4619      	mov	r1, r3
 80090f2:	2200      	movs	r2, #0
 80090f4:	4b74      	ldr	r3, [pc, #464]	@ (80092c8 <_dtoa_r+0x2d8>)
 80090f6:	f7f7 f8cf 	bl	8000298 <__aeabi_dsub>
 80090fa:	a369      	add	r3, pc, #420	@ (adr r3, 80092a0 <_dtoa_r+0x2b0>)
 80090fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009100:	f7f7 fa82 	bl	8000608 <__aeabi_dmul>
 8009104:	a368      	add	r3, pc, #416	@ (adr r3, 80092a8 <_dtoa_r+0x2b8>)
 8009106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910a:	f7f7 f8c7 	bl	800029c <__adddf3>
 800910e:	4604      	mov	r4, r0
 8009110:	4630      	mov	r0, r6
 8009112:	460d      	mov	r5, r1
 8009114:	f7f7 fa0e 	bl	8000534 <__aeabi_i2d>
 8009118:	a365      	add	r3, pc, #404	@ (adr r3, 80092b0 <_dtoa_r+0x2c0>)
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	f7f7 fa73 	bl	8000608 <__aeabi_dmul>
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	4620      	mov	r0, r4
 8009128:	4629      	mov	r1, r5
 800912a:	f7f7 f8b7 	bl	800029c <__adddf3>
 800912e:	4604      	mov	r4, r0
 8009130:	460d      	mov	r5, r1
 8009132:	f7f7 fd19 	bl	8000b68 <__aeabi_d2iz>
 8009136:	2200      	movs	r2, #0
 8009138:	4607      	mov	r7, r0
 800913a:	2300      	movs	r3, #0
 800913c:	4620      	mov	r0, r4
 800913e:	4629      	mov	r1, r5
 8009140:	f7f7 fcd4 	bl	8000aec <__aeabi_dcmplt>
 8009144:	b140      	cbz	r0, 8009158 <_dtoa_r+0x168>
 8009146:	4638      	mov	r0, r7
 8009148:	f7f7 f9f4 	bl	8000534 <__aeabi_i2d>
 800914c:	4622      	mov	r2, r4
 800914e:	462b      	mov	r3, r5
 8009150:	f7f7 fcc2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009154:	b900      	cbnz	r0, 8009158 <_dtoa_r+0x168>
 8009156:	3f01      	subs	r7, #1
 8009158:	2f16      	cmp	r7, #22
 800915a:	d851      	bhi.n	8009200 <_dtoa_r+0x210>
 800915c:	4b5b      	ldr	r3, [pc, #364]	@ (80092cc <_dtoa_r+0x2dc>)
 800915e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800916a:	f7f7 fcbf 	bl	8000aec <__aeabi_dcmplt>
 800916e:	2800      	cmp	r0, #0
 8009170:	d048      	beq.n	8009204 <_dtoa_r+0x214>
 8009172:	3f01      	subs	r7, #1
 8009174:	2300      	movs	r3, #0
 8009176:	9312      	str	r3, [sp, #72]	@ 0x48
 8009178:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800917a:	1b9b      	subs	r3, r3, r6
 800917c:	1e5a      	subs	r2, r3, #1
 800917e:	bf44      	itt	mi
 8009180:	f1c3 0801 	rsbmi	r8, r3, #1
 8009184:	2300      	movmi	r3, #0
 8009186:	9208      	str	r2, [sp, #32]
 8009188:	bf54      	ite	pl
 800918a:	f04f 0800 	movpl.w	r8, #0
 800918e:	9308      	strmi	r3, [sp, #32]
 8009190:	2f00      	cmp	r7, #0
 8009192:	db39      	blt.n	8009208 <_dtoa_r+0x218>
 8009194:	9b08      	ldr	r3, [sp, #32]
 8009196:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009198:	443b      	add	r3, r7
 800919a:	9308      	str	r3, [sp, #32]
 800919c:	2300      	movs	r3, #0
 800919e:	930a      	str	r3, [sp, #40]	@ 0x28
 80091a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091a2:	2b09      	cmp	r3, #9
 80091a4:	d864      	bhi.n	8009270 <_dtoa_r+0x280>
 80091a6:	2b05      	cmp	r3, #5
 80091a8:	bfc4      	itt	gt
 80091aa:	3b04      	subgt	r3, #4
 80091ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80091ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091b0:	f1a3 0302 	sub.w	r3, r3, #2
 80091b4:	bfcc      	ite	gt
 80091b6:	2400      	movgt	r4, #0
 80091b8:	2401      	movle	r4, #1
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d863      	bhi.n	8009286 <_dtoa_r+0x296>
 80091be:	e8df f003 	tbb	[pc, r3]
 80091c2:	372a      	.short	0x372a
 80091c4:	5535      	.short	0x5535
 80091c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80091ca:	441e      	add	r6, r3
 80091cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80091d0:	2b20      	cmp	r3, #32
 80091d2:	bfc1      	itttt	gt
 80091d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80091d8:	409f      	lslgt	r7, r3
 80091da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80091de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80091e2:	bfd6      	itet	le
 80091e4:	f1c3 0320 	rsble	r3, r3, #32
 80091e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80091ec:	fa04 f003 	lslle.w	r0, r4, r3
 80091f0:	f7f7 f990 	bl	8000514 <__aeabi_ui2d>
 80091f4:	2201      	movs	r2, #1
 80091f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80091fa:	3e01      	subs	r6, #1
 80091fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80091fe:	e777      	b.n	80090f0 <_dtoa_r+0x100>
 8009200:	2301      	movs	r3, #1
 8009202:	e7b8      	b.n	8009176 <_dtoa_r+0x186>
 8009204:	9012      	str	r0, [sp, #72]	@ 0x48
 8009206:	e7b7      	b.n	8009178 <_dtoa_r+0x188>
 8009208:	427b      	negs	r3, r7
 800920a:	930a      	str	r3, [sp, #40]	@ 0x28
 800920c:	2300      	movs	r3, #0
 800920e:	eba8 0807 	sub.w	r8, r8, r7
 8009212:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009214:	e7c4      	b.n	80091a0 <_dtoa_r+0x1b0>
 8009216:	2300      	movs	r3, #0
 8009218:	930b      	str	r3, [sp, #44]	@ 0x2c
 800921a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800921c:	2b00      	cmp	r3, #0
 800921e:	dc35      	bgt.n	800928c <_dtoa_r+0x29c>
 8009220:	2301      	movs	r3, #1
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	9307      	str	r3, [sp, #28]
 8009226:	461a      	mov	r2, r3
 8009228:	920e      	str	r2, [sp, #56]	@ 0x38
 800922a:	e00b      	b.n	8009244 <_dtoa_r+0x254>
 800922c:	2301      	movs	r3, #1
 800922e:	e7f3      	b.n	8009218 <_dtoa_r+0x228>
 8009230:	2300      	movs	r3, #0
 8009232:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009234:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009236:	18fb      	adds	r3, r7, r3
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	3301      	adds	r3, #1
 800923c:	2b01      	cmp	r3, #1
 800923e:	9307      	str	r3, [sp, #28]
 8009240:	bfb8      	it	lt
 8009242:	2301      	movlt	r3, #1
 8009244:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009248:	2100      	movs	r1, #0
 800924a:	2204      	movs	r2, #4
 800924c:	f102 0514 	add.w	r5, r2, #20
 8009250:	429d      	cmp	r5, r3
 8009252:	d91f      	bls.n	8009294 <_dtoa_r+0x2a4>
 8009254:	6041      	str	r1, [r0, #4]
 8009256:	4658      	mov	r0, fp
 8009258:	f000 fd8e 	bl	8009d78 <_Balloc>
 800925c:	4682      	mov	sl, r0
 800925e:	2800      	cmp	r0, #0
 8009260:	d13c      	bne.n	80092dc <_dtoa_r+0x2ec>
 8009262:	4b1b      	ldr	r3, [pc, #108]	@ (80092d0 <_dtoa_r+0x2e0>)
 8009264:	4602      	mov	r2, r0
 8009266:	f240 11af 	movw	r1, #431	@ 0x1af
 800926a:	e6d8      	b.n	800901e <_dtoa_r+0x2e>
 800926c:	2301      	movs	r3, #1
 800926e:	e7e0      	b.n	8009232 <_dtoa_r+0x242>
 8009270:	2401      	movs	r4, #1
 8009272:	2300      	movs	r3, #0
 8009274:	9309      	str	r3, [sp, #36]	@ 0x24
 8009276:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009278:	f04f 33ff 	mov.w	r3, #4294967295
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	9307      	str	r3, [sp, #28]
 8009280:	2200      	movs	r2, #0
 8009282:	2312      	movs	r3, #18
 8009284:	e7d0      	b.n	8009228 <_dtoa_r+0x238>
 8009286:	2301      	movs	r3, #1
 8009288:	930b      	str	r3, [sp, #44]	@ 0x2c
 800928a:	e7f5      	b.n	8009278 <_dtoa_r+0x288>
 800928c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	9307      	str	r3, [sp, #28]
 8009292:	e7d7      	b.n	8009244 <_dtoa_r+0x254>
 8009294:	3101      	adds	r1, #1
 8009296:	0052      	lsls	r2, r2, #1
 8009298:	e7d8      	b.n	800924c <_dtoa_r+0x25c>
 800929a:	bf00      	nop
 800929c:	f3af 8000 	nop.w
 80092a0:	636f4361 	.word	0x636f4361
 80092a4:	3fd287a7 	.word	0x3fd287a7
 80092a8:	8b60c8b3 	.word	0x8b60c8b3
 80092ac:	3fc68a28 	.word	0x3fc68a28
 80092b0:	509f79fb 	.word	0x509f79fb
 80092b4:	3fd34413 	.word	0x3fd34413
 80092b8:	0800b9c3 	.word	0x0800b9c3
 80092bc:	0800b9da 	.word	0x0800b9da
 80092c0:	7ff00000 	.word	0x7ff00000
 80092c4:	0800bbc0 	.word	0x0800bbc0
 80092c8:	3ff80000 	.word	0x3ff80000
 80092cc:	0800bad0 	.word	0x0800bad0
 80092d0:	0800ba32 	.word	0x0800ba32
 80092d4:	0800b9bf 	.word	0x0800b9bf
 80092d8:	0800bbbf 	.word	0x0800bbbf
 80092dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80092e0:	6018      	str	r0, [r3, #0]
 80092e2:	9b07      	ldr	r3, [sp, #28]
 80092e4:	2b0e      	cmp	r3, #14
 80092e6:	f200 80a4 	bhi.w	8009432 <_dtoa_r+0x442>
 80092ea:	2c00      	cmp	r4, #0
 80092ec:	f000 80a1 	beq.w	8009432 <_dtoa_r+0x442>
 80092f0:	2f00      	cmp	r7, #0
 80092f2:	dd33      	ble.n	800935c <_dtoa_r+0x36c>
 80092f4:	4bad      	ldr	r3, [pc, #692]	@ (80095ac <_dtoa_r+0x5bc>)
 80092f6:	f007 020f 	and.w	r2, r7, #15
 80092fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092fe:	ed93 7b00 	vldr	d7, [r3]
 8009302:	05f8      	lsls	r0, r7, #23
 8009304:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009308:	ea4f 1427 	mov.w	r4, r7, asr #4
 800930c:	d516      	bpl.n	800933c <_dtoa_r+0x34c>
 800930e:	4ba8      	ldr	r3, [pc, #672]	@ (80095b0 <_dtoa_r+0x5c0>)
 8009310:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009314:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009318:	f7f7 faa0 	bl	800085c <__aeabi_ddiv>
 800931c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009320:	f004 040f 	and.w	r4, r4, #15
 8009324:	2603      	movs	r6, #3
 8009326:	4da2      	ldr	r5, [pc, #648]	@ (80095b0 <_dtoa_r+0x5c0>)
 8009328:	b954      	cbnz	r4, 8009340 <_dtoa_r+0x350>
 800932a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800932e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009332:	f7f7 fa93 	bl	800085c <__aeabi_ddiv>
 8009336:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800933a:	e028      	b.n	800938e <_dtoa_r+0x39e>
 800933c:	2602      	movs	r6, #2
 800933e:	e7f2      	b.n	8009326 <_dtoa_r+0x336>
 8009340:	07e1      	lsls	r1, r4, #31
 8009342:	d508      	bpl.n	8009356 <_dtoa_r+0x366>
 8009344:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009348:	e9d5 2300 	ldrd	r2, r3, [r5]
 800934c:	f7f7 f95c 	bl	8000608 <__aeabi_dmul>
 8009350:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009354:	3601      	adds	r6, #1
 8009356:	1064      	asrs	r4, r4, #1
 8009358:	3508      	adds	r5, #8
 800935a:	e7e5      	b.n	8009328 <_dtoa_r+0x338>
 800935c:	f000 80d2 	beq.w	8009504 <_dtoa_r+0x514>
 8009360:	427c      	negs	r4, r7
 8009362:	4b92      	ldr	r3, [pc, #584]	@ (80095ac <_dtoa_r+0x5bc>)
 8009364:	4d92      	ldr	r5, [pc, #584]	@ (80095b0 <_dtoa_r+0x5c0>)
 8009366:	f004 020f 	and.w	r2, r4, #15
 800936a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800936e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009372:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009376:	f7f7 f947 	bl	8000608 <__aeabi_dmul>
 800937a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800937e:	1124      	asrs	r4, r4, #4
 8009380:	2300      	movs	r3, #0
 8009382:	2602      	movs	r6, #2
 8009384:	2c00      	cmp	r4, #0
 8009386:	f040 80b2 	bne.w	80094ee <_dtoa_r+0x4fe>
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1d3      	bne.n	8009336 <_dtoa_r+0x346>
 800938e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009390:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009394:	2b00      	cmp	r3, #0
 8009396:	f000 80b7 	beq.w	8009508 <_dtoa_r+0x518>
 800939a:	4b86      	ldr	r3, [pc, #536]	@ (80095b4 <_dtoa_r+0x5c4>)
 800939c:	2200      	movs	r2, #0
 800939e:	4620      	mov	r0, r4
 80093a0:	4629      	mov	r1, r5
 80093a2:	f7f7 fba3 	bl	8000aec <__aeabi_dcmplt>
 80093a6:	2800      	cmp	r0, #0
 80093a8:	f000 80ae 	beq.w	8009508 <_dtoa_r+0x518>
 80093ac:	9b07      	ldr	r3, [sp, #28]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f000 80aa 	beq.w	8009508 <_dtoa_r+0x518>
 80093b4:	9b00      	ldr	r3, [sp, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	dd37      	ble.n	800942a <_dtoa_r+0x43a>
 80093ba:	1e7b      	subs	r3, r7, #1
 80093bc:	9304      	str	r3, [sp, #16]
 80093be:	4620      	mov	r0, r4
 80093c0:	4b7d      	ldr	r3, [pc, #500]	@ (80095b8 <_dtoa_r+0x5c8>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	4629      	mov	r1, r5
 80093c6:	f7f7 f91f 	bl	8000608 <__aeabi_dmul>
 80093ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093ce:	9c00      	ldr	r4, [sp, #0]
 80093d0:	3601      	adds	r6, #1
 80093d2:	4630      	mov	r0, r6
 80093d4:	f7f7 f8ae 	bl	8000534 <__aeabi_i2d>
 80093d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093dc:	f7f7 f914 	bl	8000608 <__aeabi_dmul>
 80093e0:	4b76      	ldr	r3, [pc, #472]	@ (80095bc <_dtoa_r+0x5cc>)
 80093e2:	2200      	movs	r2, #0
 80093e4:	f7f6 ff5a 	bl	800029c <__adddf3>
 80093e8:	4605      	mov	r5, r0
 80093ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80093ee:	2c00      	cmp	r4, #0
 80093f0:	f040 808d 	bne.w	800950e <_dtoa_r+0x51e>
 80093f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093f8:	4b71      	ldr	r3, [pc, #452]	@ (80095c0 <_dtoa_r+0x5d0>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	f7f6 ff4c 	bl	8000298 <__aeabi_dsub>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009408:	462a      	mov	r2, r5
 800940a:	4633      	mov	r3, r6
 800940c:	f7f7 fb8c 	bl	8000b28 <__aeabi_dcmpgt>
 8009410:	2800      	cmp	r0, #0
 8009412:	f040 828b 	bne.w	800992c <_dtoa_r+0x93c>
 8009416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800941a:	462a      	mov	r2, r5
 800941c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009420:	f7f7 fb64 	bl	8000aec <__aeabi_dcmplt>
 8009424:	2800      	cmp	r0, #0
 8009426:	f040 8128 	bne.w	800967a <_dtoa_r+0x68a>
 800942a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800942e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009432:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009434:	2b00      	cmp	r3, #0
 8009436:	f2c0 815a 	blt.w	80096ee <_dtoa_r+0x6fe>
 800943a:	2f0e      	cmp	r7, #14
 800943c:	f300 8157 	bgt.w	80096ee <_dtoa_r+0x6fe>
 8009440:	4b5a      	ldr	r3, [pc, #360]	@ (80095ac <_dtoa_r+0x5bc>)
 8009442:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009446:	ed93 7b00 	vldr	d7, [r3]
 800944a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800944c:	2b00      	cmp	r3, #0
 800944e:	ed8d 7b00 	vstr	d7, [sp]
 8009452:	da03      	bge.n	800945c <_dtoa_r+0x46c>
 8009454:	9b07      	ldr	r3, [sp, #28]
 8009456:	2b00      	cmp	r3, #0
 8009458:	f340 8101 	ble.w	800965e <_dtoa_r+0x66e>
 800945c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009460:	4656      	mov	r6, sl
 8009462:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009466:	4620      	mov	r0, r4
 8009468:	4629      	mov	r1, r5
 800946a:	f7f7 f9f7 	bl	800085c <__aeabi_ddiv>
 800946e:	f7f7 fb7b 	bl	8000b68 <__aeabi_d2iz>
 8009472:	4680      	mov	r8, r0
 8009474:	f7f7 f85e 	bl	8000534 <__aeabi_i2d>
 8009478:	e9dd 2300 	ldrd	r2, r3, [sp]
 800947c:	f7f7 f8c4 	bl	8000608 <__aeabi_dmul>
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	4620      	mov	r0, r4
 8009486:	4629      	mov	r1, r5
 8009488:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800948c:	f7f6 ff04 	bl	8000298 <__aeabi_dsub>
 8009490:	f806 4b01 	strb.w	r4, [r6], #1
 8009494:	9d07      	ldr	r5, [sp, #28]
 8009496:	eba6 040a 	sub.w	r4, r6, sl
 800949a:	42a5      	cmp	r5, r4
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	f040 8117 	bne.w	80096d2 <_dtoa_r+0x6e2>
 80094a4:	f7f6 fefa 	bl	800029c <__adddf3>
 80094a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094ac:	4604      	mov	r4, r0
 80094ae:	460d      	mov	r5, r1
 80094b0:	f7f7 fb3a 	bl	8000b28 <__aeabi_dcmpgt>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	f040 80f9 	bne.w	80096ac <_dtoa_r+0x6bc>
 80094ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094be:	4620      	mov	r0, r4
 80094c0:	4629      	mov	r1, r5
 80094c2:	f7f7 fb09 	bl	8000ad8 <__aeabi_dcmpeq>
 80094c6:	b118      	cbz	r0, 80094d0 <_dtoa_r+0x4e0>
 80094c8:	f018 0f01 	tst.w	r8, #1
 80094cc:	f040 80ee 	bne.w	80096ac <_dtoa_r+0x6bc>
 80094d0:	4649      	mov	r1, r9
 80094d2:	4658      	mov	r0, fp
 80094d4:	f000 fc90 	bl	8009df8 <_Bfree>
 80094d8:	2300      	movs	r3, #0
 80094da:	7033      	strb	r3, [r6, #0]
 80094dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80094de:	3701      	adds	r7, #1
 80094e0:	601f      	str	r7, [r3, #0]
 80094e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f000 831d 	beq.w	8009b24 <_dtoa_r+0xb34>
 80094ea:	601e      	str	r6, [r3, #0]
 80094ec:	e31a      	b.n	8009b24 <_dtoa_r+0xb34>
 80094ee:	07e2      	lsls	r2, r4, #31
 80094f0:	d505      	bpl.n	80094fe <_dtoa_r+0x50e>
 80094f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80094f6:	f7f7 f887 	bl	8000608 <__aeabi_dmul>
 80094fa:	3601      	adds	r6, #1
 80094fc:	2301      	movs	r3, #1
 80094fe:	1064      	asrs	r4, r4, #1
 8009500:	3508      	adds	r5, #8
 8009502:	e73f      	b.n	8009384 <_dtoa_r+0x394>
 8009504:	2602      	movs	r6, #2
 8009506:	e742      	b.n	800938e <_dtoa_r+0x39e>
 8009508:	9c07      	ldr	r4, [sp, #28]
 800950a:	9704      	str	r7, [sp, #16]
 800950c:	e761      	b.n	80093d2 <_dtoa_r+0x3e2>
 800950e:	4b27      	ldr	r3, [pc, #156]	@ (80095ac <_dtoa_r+0x5bc>)
 8009510:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009512:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009516:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800951a:	4454      	add	r4, sl
 800951c:	2900      	cmp	r1, #0
 800951e:	d053      	beq.n	80095c8 <_dtoa_r+0x5d8>
 8009520:	4928      	ldr	r1, [pc, #160]	@ (80095c4 <_dtoa_r+0x5d4>)
 8009522:	2000      	movs	r0, #0
 8009524:	f7f7 f99a 	bl	800085c <__aeabi_ddiv>
 8009528:	4633      	mov	r3, r6
 800952a:	462a      	mov	r2, r5
 800952c:	f7f6 feb4 	bl	8000298 <__aeabi_dsub>
 8009530:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009534:	4656      	mov	r6, sl
 8009536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800953a:	f7f7 fb15 	bl	8000b68 <__aeabi_d2iz>
 800953e:	4605      	mov	r5, r0
 8009540:	f7f6 fff8 	bl	8000534 <__aeabi_i2d>
 8009544:	4602      	mov	r2, r0
 8009546:	460b      	mov	r3, r1
 8009548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800954c:	f7f6 fea4 	bl	8000298 <__aeabi_dsub>
 8009550:	3530      	adds	r5, #48	@ 0x30
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800955a:	f806 5b01 	strb.w	r5, [r6], #1
 800955e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009562:	f7f7 fac3 	bl	8000aec <__aeabi_dcmplt>
 8009566:	2800      	cmp	r0, #0
 8009568:	d171      	bne.n	800964e <_dtoa_r+0x65e>
 800956a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800956e:	4911      	ldr	r1, [pc, #68]	@ (80095b4 <_dtoa_r+0x5c4>)
 8009570:	2000      	movs	r0, #0
 8009572:	f7f6 fe91 	bl	8000298 <__aeabi_dsub>
 8009576:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800957a:	f7f7 fab7 	bl	8000aec <__aeabi_dcmplt>
 800957e:	2800      	cmp	r0, #0
 8009580:	f040 8095 	bne.w	80096ae <_dtoa_r+0x6be>
 8009584:	42a6      	cmp	r6, r4
 8009586:	f43f af50 	beq.w	800942a <_dtoa_r+0x43a>
 800958a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800958e:	4b0a      	ldr	r3, [pc, #40]	@ (80095b8 <_dtoa_r+0x5c8>)
 8009590:	2200      	movs	r2, #0
 8009592:	f7f7 f839 	bl	8000608 <__aeabi_dmul>
 8009596:	4b08      	ldr	r3, [pc, #32]	@ (80095b8 <_dtoa_r+0x5c8>)
 8009598:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800959c:	2200      	movs	r2, #0
 800959e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095a2:	f7f7 f831 	bl	8000608 <__aeabi_dmul>
 80095a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095aa:	e7c4      	b.n	8009536 <_dtoa_r+0x546>
 80095ac:	0800bad0 	.word	0x0800bad0
 80095b0:	0800baa8 	.word	0x0800baa8
 80095b4:	3ff00000 	.word	0x3ff00000
 80095b8:	40240000 	.word	0x40240000
 80095bc:	401c0000 	.word	0x401c0000
 80095c0:	40140000 	.word	0x40140000
 80095c4:	3fe00000 	.word	0x3fe00000
 80095c8:	4631      	mov	r1, r6
 80095ca:	4628      	mov	r0, r5
 80095cc:	f7f7 f81c 	bl	8000608 <__aeabi_dmul>
 80095d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80095d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80095d6:	4656      	mov	r6, sl
 80095d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095dc:	f7f7 fac4 	bl	8000b68 <__aeabi_d2iz>
 80095e0:	4605      	mov	r5, r0
 80095e2:	f7f6 ffa7 	bl	8000534 <__aeabi_i2d>
 80095e6:	4602      	mov	r2, r0
 80095e8:	460b      	mov	r3, r1
 80095ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095ee:	f7f6 fe53 	bl	8000298 <__aeabi_dsub>
 80095f2:	3530      	adds	r5, #48	@ 0x30
 80095f4:	f806 5b01 	strb.w	r5, [r6], #1
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	42a6      	cmp	r6, r4
 80095fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009602:	f04f 0200 	mov.w	r2, #0
 8009606:	d124      	bne.n	8009652 <_dtoa_r+0x662>
 8009608:	4bac      	ldr	r3, [pc, #688]	@ (80098bc <_dtoa_r+0x8cc>)
 800960a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800960e:	f7f6 fe45 	bl	800029c <__adddf3>
 8009612:	4602      	mov	r2, r0
 8009614:	460b      	mov	r3, r1
 8009616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800961a:	f7f7 fa85 	bl	8000b28 <__aeabi_dcmpgt>
 800961e:	2800      	cmp	r0, #0
 8009620:	d145      	bne.n	80096ae <_dtoa_r+0x6be>
 8009622:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009626:	49a5      	ldr	r1, [pc, #660]	@ (80098bc <_dtoa_r+0x8cc>)
 8009628:	2000      	movs	r0, #0
 800962a:	f7f6 fe35 	bl	8000298 <__aeabi_dsub>
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009636:	f7f7 fa59 	bl	8000aec <__aeabi_dcmplt>
 800963a:	2800      	cmp	r0, #0
 800963c:	f43f aef5 	beq.w	800942a <_dtoa_r+0x43a>
 8009640:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009642:	1e73      	subs	r3, r6, #1
 8009644:	9315      	str	r3, [sp, #84]	@ 0x54
 8009646:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800964a:	2b30      	cmp	r3, #48	@ 0x30
 800964c:	d0f8      	beq.n	8009640 <_dtoa_r+0x650>
 800964e:	9f04      	ldr	r7, [sp, #16]
 8009650:	e73e      	b.n	80094d0 <_dtoa_r+0x4e0>
 8009652:	4b9b      	ldr	r3, [pc, #620]	@ (80098c0 <_dtoa_r+0x8d0>)
 8009654:	f7f6 ffd8 	bl	8000608 <__aeabi_dmul>
 8009658:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800965c:	e7bc      	b.n	80095d8 <_dtoa_r+0x5e8>
 800965e:	d10c      	bne.n	800967a <_dtoa_r+0x68a>
 8009660:	4b98      	ldr	r3, [pc, #608]	@ (80098c4 <_dtoa_r+0x8d4>)
 8009662:	2200      	movs	r2, #0
 8009664:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009668:	f7f6 ffce 	bl	8000608 <__aeabi_dmul>
 800966c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009670:	f7f7 fa50 	bl	8000b14 <__aeabi_dcmpge>
 8009674:	2800      	cmp	r0, #0
 8009676:	f000 8157 	beq.w	8009928 <_dtoa_r+0x938>
 800967a:	2400      	movs	r4, #0
 800967c:	4625      	mov	r5, r4
 800967e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009680:	43db      	mvns	r3, r3
 8009682:	9304      	str	r3, [sp, #16]
 8009684:	4656      	mov	r6, sl
 8009686:	2700      	movs	r7, #0
 8009688:	4621      	mov	r1, r4
 800968a:	4658      	mov	r0, fp
 800968c:	f000 fbb4 	bl	8009df8 <_Bfree>
 8009690:	2d00      	cmp	r5, #0
 8009692:	d0dc      	beq.n	800964e <_dtoa_r+0x65e>
 8009694:	b12f      	cbz	r7, 80096a2 <_dtoa_r+0x6b2>
 8009696:	42af      	cmp	r7, r5
 8009698:	d003      	beq.n	80096a2 <_dtoa_r+0x6b2>
 800969a:	4639      	mov	r1, r7
 800969c:	4658      	mov	r0, fp
 800969e:	f000 fbab 	bl	8009df8 <_Bfree>
 80096a2:	4629      	mov	r1, r5
 80096a4:	4658      	mov	r0, fp
 80096a6:	f000 fba7 	bl	8009df8 <_Bfree>
 80096aa:	e7d0      	b.n	800964e <_dtoa_r+0x65e>
 80096ac:	9704      	str	r7, [sp, #16]
 80096ae:	4633      	mov	r3, r6
 80096b0:	461e      	mov	r6, r3
 80096b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096b6:	2a39      	cmp	r2, #57	@ 0x39
 80096b8:	d107      	bne.n	80096ca <_dtoa_r+0x6da>
 80096ba:	459a      	cmp	sl, r3
 80096bc:	d1f8      	bne.n	80096b0 <_dtoa_r+0x6c0>
 80096be:	9a04      	ldr	r2, [sp, #16]
 80096c0:	3201      	adds	r2, #1
 80096c2:	9204      	str	r2, [sp, #16]
 80096c4:	2230      	movs	r2, #48	@ 0x30
 80096c6:	f88a 2000 	strb.w	r2, [sl]
 80096ca:	781a      	ldrb	r2, [r3, #0]
 80096cc:	3201      	adds	r2, #1
 80096ce:	701a      	strb	r2, [r3, #0]
 80096d0:	e7bd      	b.n	800964e <_dtoa_r+0x65e>
 80096d2:	4b7b      	ldr	r3, [pc, #492]	@ (80098c0 <_dtoa_r+0x8d0>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	f7f6 ff97 	bl	8000608 <__aeabi_dmul>
 80096da:	2200      	movs	r2, #0
 80096dc:	2300      	movs	r3, #0
 80096de:	4604      	mov	r4, r0
 80096e0:	460d      	mov	r5, r1
 80096e2:	f7f7 f9f9 	bl	8000ad8 <__aeabi_dcmpeq>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	f43f aebb 	beq.w	8009462 <_dtoa_r+0x472>
 80096ec:	e6f0      	b.n	80094d0 <_dtoa_r+0x4e0>
 80096ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80096f0:	2a00      	cmp	r2, #0
 80096f2:	f000 80db 	beq.w	80098ac <_dtoa_r+0x8bc>
 80096f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096f8:	2a01      	cmp	r2, #1
 80096fa:	f300 80bf 	bgt.w	800987c <_dtoa_r+0x88c>
 80096fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009700:	2a00      	cmp	r2, #0
 8009702:	f000 80b7 	beq.w	8009874 <_dtoa_r+0x884>
 8009706:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800970a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800970c:	4646      	mov	r6, r8
 800970e:	9a08      	ldr	r2, [sp, #32]
 8009710:	2101      	movs	r1, #1
 8009712:	441a      	add	r2, r3
 8009714:	4658      	mov	r0, fp
 8009716:	4498      	add	r8, r3
 8009718:	9208      	str	r2, [sp, #32]
 800971a:	f000 fc21 	bl	8009f60 <__i2b>
 800971e:	4605      	mov	r5, r0
 8009720:	b15e      	cbz	r6, 800973a <_dtoa_r+0x74a>
 8009722:	9b08      	ldr	r3, [sp, #32]
 8009724:	2b00      	cmp	r3, #0
 8009726:	dd08      	ble.n	800973a <_dtoa_r+0x74a>
 8009728:	42b3      	cmp	r3, r6
 800972a:	9a08      	ldr	r2, [sp, #32]
 800972c:	bfa8      	it	ge
 800972e:	4633      	movge	r3, r6
 8009730:	eba8 0803 	sub.w	r8, r8, r3
 8009734:	1af6      	subs	r6, r6, r3
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	9308      	str	r3, [sp, #32]
 800973a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800973c:	b1f3      	cbz	r3, 800977c <_dtoa_r+0x78c>
 800973e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 80b7 	beq.w	80098b4 <_dtoa_r+0x8c4>
 8009746:	b18c      	cbz	r4, 800976c <_dtoa_r+0x77c>
 8009748:	4629      	mov	r1, r5
 800974a:	4622      	mov	r2, r4
 800974c:	4658      	mov	r0, fp
 800974e:	f000 fcc7 	bl	800a0e0 <__pow5mult>
 8009752:	464a      	mov	r2, r9
 8009754:	4601      	mov	r1, r0
 8009756:	4605      	mov	r5, r0
 8009758:	4658      	mov	r0, fp
 800975a:	f000 fc17 	bl	8009f8c <__multiply>
 800975e:	4649      	mov	r1, r9
 8009760:	9004      	str	r0, [sp, #16]
 8009762:	4658      	mov	r0, fp
 8009764:	f000 fb48 	bl	8009df8 <_Bfree>
 8009768:	9b04      	ldr	r3, [sp, #16]
 800976a:	4699      	mov	r9, r3
 800976c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800976e:	1b1a      	subs	r2, r3, r4
 8009770:	d004      	beq.n	800977c <_dtoa_r+0x78c>
 8009772:	4649      	mov	r1, r9
 8009774:	4658      	mov	r0, fp
 8009776:	f000 fcb3 	bl	800a0e0 <__pow5mult>
 800977a:	4681      	mov	r9, r0
 800977c:	2101      	movs	r1, #1
 800977e:	4658      	mov	r0, fp
 8009780:	f000 fbee 	bl	8009f60 <__i2b>
 8009784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009786:	4604      	mov	r4, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	f000 81cf 	beq.w	8009b2c <_dtoa_r+0xb3c>
 800978e:	461a      	mov	r2, r3
 8009790:	4601      	mov	r1, r0
 8009792:	4658      	mov	r0, fp
 8009794:	f000 fca4 	bl	800a0e0 <__pow5mult>
 8009798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800979a:	2b01      	cmp	r3, #1
 800979c:	4604      	mov	r4, r0
 800979e:	f300 8095 	bgt.w	80098cc <_dtoa_r+0x8dc>
 80097a2:	9b02      	ldr	r3, [sp, #8]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f040 8087 	bne.w	80098b8 <_dtoa_r+0x8c8>
 80097aa:	9b03      	ldr	r3, [sp, #12]
 80097ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f040 8089 	bne.w	80098c8 <_dtoa_r+0x8d8>
 80097b6:	9b03      	ldr	r3, [sp, #12]
 80097b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097bc:	0d1b      	lsrs	r3, r3, #20
 80097be:	051b      	lsls	r3, r3, #20
 80097c0:	b12b      	cbz	r3, 80097ce <_dtoa_r+0x7de>
 80097c2:	9b08      	ldr	r3, [sp, #32]
 80097c4:	3301      	adds	r3, #1
 80097c6:	9308      	str	r3, [sp, #32]
 80097c8:	f108 0801 	add.w	r8, r8, #1
 80097cc:	2301      	movs	r3, #1
 80097ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80097d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f000 81b0 	beq.w	8009b38 <_dtoa_r+0xb48>
 80097d8:	6923      	ldr	r3, [r4, #16]
 80097da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80097de:	6918      	ldr	r0, [r3, #16]
 80097e0:	f000 fb72 	bl	8009ec8 <__hi0bits>
 80097e4:	f1c0 0020 	rsb	r0, r0, #32
 80097e8:	9b08      	ldr	r3, [sp, #32]
 80097ea:	4418      	add	r0, r3
 80097ec:	f010 001f 	ands.w	r0, r0, #31
 80097f0:	d077      	beq.n	80098e2 <_dtoa_r+0x8f2>
 80097f2:	f1c0 0320 	rsb	r3, r0, #32
 80097f6:	2b04      	cmp	r3, #4
 80097f8:	dd6b      	ble.n	80098d2 <_dtoa_r+0x8e2>
 80097fa:	9b08      	ldr	r3, [sp, #32]
 80097fc:	f1c0 001c 	rsb	r0, r0, #28
 8009800:	4403      	add	r3, r0
 8009802:	4480      	add	r8, r0
 8009804:	4406      	add	r6, r0
 8009806:	9308      	str	r3, [sp, #32]
 8009808:	f1b8 0f00 	cmp.w	r8, #0
 800980c:	dd05      	ble.n	800981a <_dtoa_r+0x82a>
 800980e:	4649      	mov	r1, r9
 8009810:	4642      	mov	r2, r8
 8009812:	4658      	mov	r0, fp
 8009814:	f000 fcbe 	bl	800a194 <__lshift>
 8009818:	4681      	mov	r9, r0
 800981a:	9b08      	ldr	r3, [sp, #32]
 800981c:	2b00      	cmp	r3, #0
 800981e:	dd05      	ble.n	800982c <_dtoa_r+0x83c>
 8009820:	4621      	mov	r1, r4
 8009822:	461a      	mov	r2, r3
 8009824:	4658      	mov	r0, fp
 8009826:	f000 fcb5 	bl	800a194 <__lshift>
 800982a:	4604      	mov	r4, r0
 800982c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800982e:	2b00      	cmp	r3, #0
 8009830:	d059      	beq.n	80098e6 <_dtoa_r+0x8f6>
 8009832:	4621      	mov	r1, r4
 8009834:	4648      	mov	r0, r9
 8009836:	f000 fd19 	bl	800a26c <__mcmp>
 800983a:	2800      	cmp	r0, #0
 800983c:	da53      	bge.n	80098e6 <_dtoa_r+0x8f6>
 800983e:	1e7b      	subs	r3, r7, #1
 8009840:	9304      	str	r3, [sp, #16]
 8009842:	4649      	mov	r1, r9
 8009844:	2300      	movs	r3, #0
 8009846:	220a      	movs	r2, #10
 8009848:	4658      	mov	r0, fp
 800984a:	f000 faf7 	bl	8009e3c <__multadd>
 800984e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009850:	4681      	mov	r9, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	f000 8172 	beq.w	8009b3c <_dtoa_r+0xb4c>
 8009858:	2300      	movs	r3, #0
 800985a:	4629      	mov	r1, r5
 800985c:	220a      	movs	r2, #10
 800985e:	4658      	mov	r0, fp
 8009860:	f000 faec 	bl	8009e3c <__multadd>
 8009864:	9b00      	ldr	r3, [sp, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	4605      	mov	r5, r0
 800986a:	dc67      	bgt.n	800993c <_dtoa_r+0x94c>
 800986c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800986e:	2b02      	cmp	r3, #2
 8009870:	dc41      	bgt.n	80098f6 <_dtoa_r+0x906>
 8009872:	e063      	b.n	800993c <_dtoa_r+0x94c>
 8009874:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009876:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800987a:	e746      	b.n	800970a <_dtoa_r+0x71a>
 800987c:	9b07      	ldr	r3, [sp, #28]
 800987e:	1e5c      	subs	r4, r3, #1
 8009880:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009882:	42a3      	cmp	r3, r4
 8009884:	bfbf      	itttt	lt
 8009886:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009888:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800988a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800988c:	1ae3      	sublt	r3, r4, r3
 800988e:	bfb4      	ite	lt
 8009890:	18d2      	addlt	r2, r2, r3
 8009892:	1b1c      	subge	r4, r3, r4
 8009894:	9b07      	ldr	r3, [sp, #28]
 8009896:	bfbc      	itt	lt
 8009898:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800989a:	2400      	movlt	r4, #0
 800989c:	2b00      	cmp	r3, #0
 800989e:	bfb5      	itete	lt
 80098a0:	eba8 0603 	sublt.w	r6, r8, r3
 80098a4:	9b07      	ldrge	r3, [sp, #28]
 80098a6:	2300      	movlt	r3, #0
 80098a8:	4646      	movge	r6, r8
 80098aa:	e730      	b.n	800970e <_dtoa_r+0x71e>
 80098ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80098ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80098b0:	4646      	mov	r6, r8
 80098b2:	e735      	b.n	8009720 <_dtoa_r+0x730>
 80098b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80098b6:	e75c      	b.n	8009772 <_dtoa_r+0x782>
 80098b8:	2300      	movs	r3, #0
 80098ba:	e788      	b.n	80097ce <_dtoa_r+0x7de>
 80098bc:	3fe00000 	.word	0x3fe00000
 80098c0:	40240000 	.word	0x40240000
 80098c4:	40140000 	.word	0x40140000
 80098c8:	9b02      	ldr	r3, [sp, #8]
 80098ca:	e780      	b.n	80097ce <_dtoa_r+0x7de>
 80098cc:	2300      	movs	r3, #0
 80098ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80098d0:	e782      	b.n	80097d8 <_dtoa_r+0x7e8>
 80098d2:	d099      	beq.n	8009808 <_dtoa_r+0x818>
 80098d4:	9a08      	ldr	r2, [sp, #32]
 80098d6:	331c      	adds	r3, #28
 80098d8:	441a      	add	r2, r3
 80098da:	4498      	add	r8, r3
 80098dc:	441e      	add	r6, r3
 80098de:	9208      	str	r2, [sp, #32]
 80098e0:	e792      	b.n	8009808 <_dtoa_r+0x818>
 80098e2:	4603      	mov	r3, r0
 80098e4:	e7f6      	b.n	80098d4 <_dtoa_r+0x8e4>
 80098e6:	9b07      	ldr	r3, [sp, #28]
 80098e8:	9704      	str	r7, [sp, #16]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	dc20      	bgt.n	8009930 <_dtoa_r+0x940>
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	dd1e      	ble.n	8009934 <_dtoa_r+0x944>
 80098f6:	9b00      	ldr	r3, [sp, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f47f aec0 	bne.w	800967e <_dtoa_r+0x68e>
 80098fe:	4621      	mov	r1, r4
 8009900:	2205      	movs	r2, #5
 8009902:	4658      	mov	r0, fp
 8009904:	f000 fa9a 	bl	8009e3c <__multadd>
 8009908:	4601      	mov	r1, r0
 800990a:	4604      	mov	r4, r0
 800990c:	4648      	mov	r0, r9
 800990e:	f000 fcad 	bl	800a26c <__mcmp>
 8009912:	2800      	cmp	r0, #0
 8009914:	f77f aeb3 	ble.w	800967e <_dtoa_r+0x68e>
 8009918:	4656      	mov	r6, sl
 800991a:	2331      	movs	r3, #49	@ 0x31
 800991c:	f806 3b01 	strb.w	r3, [r6], #1
 8009920:	9b04      	ldr	r3, [sp, #16]
 8009922:	3301      	adds	r3, #1
 8009924:	9304      	str	r3, [sp, #16]
 8009926:	e6ae      	b.n	8009686 <_dtoa_r+0x696>
 8009928:	9c07      	ldr	r4, [sp, #28]
 800992a:	9704      	str	r7, [sp, #16]
 800992c:	4625      	mov	r5, r4
 800992e:	e7f3      	b.n	8009918 <_dtoa_r+0x928>
 8009930:	9b07      	ldr	r3, [sp, #28]
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009936:	2b00      	cmp	r3, #0
 8009938:	f000 8104 	beq.w	8009b44 <_dtoa_r+0xb54>
 800993c:	2e00      	cmp	r6, #0
 800993e:	dd05      	ble.n	800994c <_dtoa_r+0x95c>
 8009940:	4629      	mov	r1, r5
 8009942:	4632      	mov	r2, r6
 8009944:	4658      	mov	r0, fp
 8009946:	f000 fc25 	bl	800a194 <__lshift>
 800994a:	4605      	mov	r5, r0
 800994c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800994e:	2b00      	cmp	r3, #0
 8009950:	d05a      	beq.n	8009a08 <_dtoa_r+0xa18>
 8009952:	6869      	ldr	r1, [r5, #4]
 8009954:	4658      	mov	r0, fp
 8009956:	f000 fa0f 	bl	8009d78 <_Balloc>
 800995a:	4606      	mov	r6, r0
 800995c:	b928      	cbnz	r0, 800996a <_dtoa_r+0x97a>
 800995e:	4b84      	ldr	r3, [pc, #528]	@ (8009b70 <_dtoa_r+0xb80>)
 8009960:	4602      	mov	r2, r0
 8009962:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009966:	f7ff bb5a 	b.w	800901e <_dtoa_r+0x2e>
 800996a:	692a      	ldr	r2, [r5, #16]
 800996c:	3202      	adds	r2, #2
 800996e:	0092      	lsls	r2, r2, #2
 8009970:	f105 010c 	add.w	r1, r5, #12
 8009974:	300c      	adds	r0, #12
 8009976:	f7ff faa2 	bl	8008ebe <memcpy>
 800997a:	2201      	movs	r2, #1
 800997c:	4631      	mov	r1, r6
 800997e:	4658      	mov	r0, fp
 8009980:	f000 fc08 	bl	800a194 <__lshift>
 8009984:	f10a 0301 	add.w	r3, sl, #1
 8009988:	9307      	str	r3, [sp, #28]
 800998a:	9b00      	ldr	r3, [sp, #0]
 800998c:	4453      	add	r3, sl
 800998e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009990:	9b02      	ldr	r3, [sp, #8]
 8009992:	f003 0301 	and.w	r3, r3, #1
 8009996:	462f      	mov	r7, r5
 8009998:	930a      	str	r3, [sp, #40]	@ 0x28
 800999a:	4605      	mov	r5, r0
 800999c:	9b07      	ldr	r3, [sp, #28]
 800999e:	4621      	mov	r1, r4
 80099a0:	3b01      	subs	r3, #1
 80099a2:	4648      	mov	r0, r9
 80099a4:	9300      	str	r3, [sp, #0]
 80099a6:	f7ff fa98 	bl	8008eda <quorem>
 80099aa:	4639      	mov	r1, r7
 80099ac:	9002      	str	r0, [sp, #8]
 80099ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80099b2:	4648      	mov	r0, r9
 80099b4:	f000 fc5a 	bl	800a26c <__mcmp>
 80099b8:	462a      	mov	r2, r5
 80099ba:	9008      	str	r0, [sp, #32]
 80099bc:	4621      	mov	r1, r4
 80099be:	4658      	mov	r0, fp
 80099c0:	f000 fc70 	bl	800a2a4 <__mdiff>
 80099c4:	68c2      	ldr	r2, [r0, #12]
 80099c6:	4606      	mov	r6, r0
 80099c8:	bb02      	cbnz	r2, 8009a0c <_dtoa_r+0xa1c>
 80099ca:	4601      	mov	r1, r0
 80099cc:	4648      	mov	r0, r9
 80099ce:	f000 fc4d 	bl	800a26c <__mcmp>
 80099d2:	4602      	mov	r2, r0
 80099d4:	4631      	mov	r1, r6
 80099d6:	4658      	mov	r0, fp
 80099d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80099da:	f000 fa0d 	bl	8009df8 <_Bfree>
 80099de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099e2:	9e07      	ldr	r6, [sp, #28]
 80099e4:	ea43 0102 	orr.w	r1, r3, r2
 80099e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ea:	4319      	orrs	r1, r3
 80099ec:	d110      	bne.n	8009a10 <_dtoa_r+0xa20>
 80099ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80099f2:	d029      	beq.n	8009a48 <_dtoa_r+0xa58>
 80099f4:	9b08      	ldr	r3, [sp, #32]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	dd02      	ble.n	8009a00 <_dtoa_r+0xa10>
 80099fa:	9b02      	ldr	r3, [sp, #8]
 80099fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009a00:	9b00      	ldr	r3, [sp, #0]
 8009a02:	f883 8000 	strb.w	r8, [r3]
 8009a06:	e63f      	b.n	8009688 <_dtoa_r+0x698>
 8009a08:	4628      	mov	r0, r5
 8009a0a:	e7bb      	b.n	8009984 <_dtoa_r+0x994>
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	e7e1      	b.n	80099d4 <_dtoa_r+0x9e4>
 8009a10:	9b08      	ldr	r3, [sp, #32]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	db04      	blt.n	8009a20 <_dtoa_r+0xa30>
 8009a16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a18:	430b      	orrs	r3, r1
 8009a1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a1c:	430b      	orrs	r3, r1
 8009a1e:	d120      	bne.n	8009a62 <_dtoa_r+0xa72>
 8009a20:	2a00      	cmp	r2, #0
 8009a22:	dded      	ble.n	8009a00 <_dtoa_r+0xa10>
 8009a24:	4649      	mov	r1, r9
 8009a26:	2201      	movs	r2, #1
 8009a28:	4658      	mov	r0, fp
 8009a2a:	f000 fbb3 	bl	800a194 <__lshift>
 8009a2e:	4621      	mov	r1, r4
 8009a30:	4681      	mov	r9, r0
 8009a32:	f000 fc1b 	bl	800a26c <__mcmp>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	dc03      	bgt.n	8009a42 <_dtoa_r+0xa52>
 8009a3a:	d1e1      	bne.n	8009a00 <_dtoa_r+0xa10>
 8009a3c:	f018 0f01 	tst.w	r8, #1
 8009a40:	d0de      	beq.n	8009a00 <_dtoa_r+0xa10>
 8009a42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a46:	d1d8      	bne.n	80099fa <_dtoa_r+0xa0a>
 8009a48:	9a00      	ldr	r2, [sp, #0]
 8009a4a:	2339      	movs	r3, #57	@ 0x39
 8009a4c:	7013      	strb	r3, [r2, #0]
 8009a4e:	4633      	mov	r3, r6
 8009a50:	461e      	mov	r6, r3
 8009a52:	3b01      	subs	r3, #1
 8009a54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009a58:	2a39      	cmp	r2, #57	@ 0x39
 8009a5a:	d052      	beq.n	8009b02 <_dtoa_r+0xb12>
 8009a5c:	3201      	adds	r2, #1
 8009a5e:	701a      	strb	r2, [r3, #0]
 8009a60:	e612      	b.n	8009688 <_dtoa_r+0x698>
 8009a62:	2a00      	cmp	r2, #0
 8009a64:	dd07      	ble.n	8009a76 <_dtoa_r+0xa86>
 8009a66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a6a:	d0ed      	beq.n	8009a48 <_dtoa_r+0xa58>
 8009a6c:	9a00      	ldr	r2, [sp, #0]
 8009a6e:	f108 0301 	add.w	r3, r8, #1
 8009a72:	7013      	strb	r3, [r2, #0]
 8009a74:	e608      	b.n	8009688 <_dtoa_r+0x698>
 8009a76:	9b07      	ldr	r3, [sp, #28]
 8009a78:	9a07      	ldr	r2, [sp, #28]
 8009a7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d028      	beq.n	8009ad6 <_dtoa_r+0xae6>
 8009a84:	4649      	mov	r1, r9
 8009a86:	2300      	movs	r3, #0
 8009a88:	220a      	movs	r2, #10
 8009a8a:	4658      	mov	r0, fp
 8009a8c:	f000 f9d6 	bl	8009e3c <__multadd>
 8009a90:	42af      	cmp	r7, r5
 8009a92:	4681      	mov	r9, r0
 8009a94:	f04f 0300 	mov.w	r3, #0
 8009a98:	f04f 020a 	mov.w	r2, #10
 8009a9c:	4639      	mov	r1, r7
 8009a9e:	4658      	mov	r0, fp
 8009aa0:	d107      	bne.n	8009ab2 <_dtoa_r+0xac2>
 8009aa2:	f000 f9cb 	bl	8009e3c <__multadd>
 8009aa6:	4607      	mov	r7, r0
 8009aa8:	4605      	mov	r5, r0
 8009aaa:	9b07      	ldr	r3, [sp, #28]
 8009aac:	3301      	adds	r3, #1
 8009aae:	9307      	str	r3, [sp, #28]
 8009ab0:	e774      	b.n	800999c <_dtoa_r+0x9ac>
 8009ab2:	f000 f9c3 	bl	8009e3c <__multadd>
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	4607      	mov	r7, r0
 8009aba:	2300      	movs	r3, #0
 8009abc:	220a      	movs	r2, #10
 8009abe:	4658      	mov	r0, fp
 8009ac0:	f000 f9bc 	bl	8009e3c <__multadd>
 8009ac4:	4605      	mov	r5, r0
 8009ac6:	e7f0      	b.n	8009aaa <_dtoa_r+0xaba>
 8009ac8:	9b00      	ldr	r3, [sp, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	bfcc      	ite	gt
 8009ace:	461e      	movgt	r6, r3
 8009ad0:	2601      	movle	r6, #1
 8009ad2:	4456      	add	r6, sl
 8009ad4:	2700      	movs	r7, #0
 8009ad6:	4649      	mov	r1, r9
 8009ad8:	2201      	movs	r2, #1
 8009ada:	4658      	mov	r0, fp
 8009adc:	f000 fb5a 	bl	800a194 <__lshift>
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	4681      	mov	r9, r0
 8009ae4:	f000 fbc2 	bl	800a26c <__mcmp>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	dcb0      	bgt.n	8009a4e <_dtoa_r+0xa5e>
 8009aec:	d102      	bne.n	8009af4 <_dtoa_r+0xb04>
 8009aee:	f018 0f01 	tst.w	r8, #1
 8009af2:	d1ac      	bne.n	8009a4e <_dtoa_r+0xa5e>
 8009af4:	4633      	mov	r3, r6
 8009af6:	461e      	mov	r6, r3
 8009af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009afc:	2a30      	cmp	r2, #48	@ 0x30
 8009afe:	d0fa      	beq.n	8009af6 <_dtoa_r+0xb06>
 8009b00:	e5c2      	b.n	8009688 <_dtoa_r+0x698>
 8009b02:	459a      	cmp	sl, r3
 8009b04:	d1a4      	bne.n	8009a50 <_dtoa_r+0xa60>
 8009b06:	9b04      	ldr	r3, [sp, #16]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	9304      	str	r3, [sp, #16]
 8009b0c:	2331      	movs	r3, #49	@ 0x31
 8009b0e:	f88a 3000 	strb.w	r3, [sl]
 8009b12:	e5b9      	b.n	8009688 <_dtoa_r+0x698>
 8009b14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009b74 <_dtoa_r+0xb84>
 8009b1a:	b11b      	cbz	r3, 8009b24 <_dtoa_r+0xb34>
 8009b1c:	f10a 0308 	add.w	r3, sl, #8
 8009b20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009b22:	6013      	str	r3, [r2, #0]
 8009b24:	4650      	mov	r0, sl
 8009b26:	b019      	add	sp, #100	@ 0x64
 8009b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	f77f ae37 	ble.w	80097a2 <_dtoa_r+0x7b2>
 8009b34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b36:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b38:	2001      	movs	r0, #1
 8009b3a:	e655      	b.n	80097e8 <_dtoa_r+0x7f8>
 8009b3c:	9b00      	ldr	r3, [sp, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f77f aed6 	ble.w	80098f0 <_dtoa_r+0x900>
 8009b44:	4656      	mov	r6, sl
 8009b46:	4621      	mov	r1, r4
 8009b48:	4648      	mov	r0, r9
 8009b4a:	f7ff f9c6 	bl	8008eda <quorem>
 8009b4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009b52:	f806 8b01 	strb.w	r8, [r6], #1
 8009b56:	9b00      	ldr	r3, [sp, #0]
 8009b58:	eba6 020a 	sub.w	r2, r6, sl
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	ddb3      	ble.n	8009ac8 <_dtoa_r+0xad8>
 8009b60:	4649      	mov	r1, r9
 8009b62:	2300      	movs	r3, #0
 8009b64:	220a      	movs	r2, #10
 8009b66:	4658      	mov	r0, fp
 8009b68:	f000 f968 	bl	8009e3c <__multadd>
 8009b6c:	4681      	mov	r9, r0
 8009b6e:	e7ea      	b.n	8009b46 <_dtoa_r+0xb56>
 8009b70:	0800ba32 	.word	0x0800ba32
 8009b74:	0800b9b6 	.word	0x0800b9b6

08009b78 <_free_r>:
 8009b78:	b538      	push	{r3, r4, r5, lr}
 8009b7a:	4605      	mov	r5, r0
 8009b7c:	2900      	cmp	r1, #0
 8009b7e:	d041      	beq.n	8009c04 <_free_r+0x8c>
 8009b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b84:	1f0c      	subs	r4, r1, #4
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	bfb8      	it	lt
 8009b8a:	18e4      	addlt	r4, r4, r3
 8009b8c:	f000 f8e8 	bl	8009d60 <__malloc_lock>
 8009b90:	4a1d      	ldr	r2, [pc, #116]	@ (8009c08 <_free_r+0x90>)
 8009b92:	6813      	ldr	r3, [r2, #0]
 8009b94:	b933      	cbnz	r3, 8009ba4 <_free_r+0x2c>
 8009b96:	6063      	str	r3, [r4, #4]
 8009b98:	6014      	str	r4, [r2, #0]
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ba0:	f000 b8e4 	b.w	8009d6c <__malloc_unlock>
 8009ba4:	42a3      	cmp	r3, r4
 8009ba6:	d908      	bls.n	8009bba <_free_r+0x42>
 8009ba8:	6820      	ldr	r0, [r4, #0]
 8009baa:	1821      	adds	r1, r4, r0
 8009bac:	428b      	cmp	r3, r1
 8009bae:	bf01      	itttt	eq
 8009bb0:	6819      	ldreq	r1, [r3, #0]
 8009bb2:	685b      	ldreq	r3, [r3, #4]
 8009bb4:	1809      	addeq	r1, r1, r0
 8009bb6:	6021      	streq	r1, [r4, #0]
 8009bb8:	e7ed      	b.n	8009b96 <_free_r+0x1e>
 8009bba:	461a      	mov	r2, r3
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	b10b      	cbz	r3, 8009bc4 <_free_r+0x4c>
 8009bc0:	42a3      	cmp	r3, r4
 8009bc2:	d9fa      	bls.n	8009bba <_free_r+0x42>
 8009bc4:	6811      	ldr	r1, [r2, #0]
 8009bc6:	1850      	adds	r0, r2, r1
 8009bc8:	42a0      	cmp	r0, r4
 8009bca:	d10b      	bne.n	8009be4 <_free_r+0x6c>
 8009bcc:	6820      	ldr	r0, [r4, #0]
 8009bce:	4401      	add	r1, r0
 8009bd0:	1850      	adds	r0, r2, r1
 8009bd2:	4283      	cmp	r3, r0
 8009bd4:	6011      	str	r1, [r2, #0]
 8009bd6:	d1e0      	bne.n	8009b9a <_free_r+0x22>
 8009bd8:	6818      	ldr	r0, [r3, #0]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	6053      	str	r3, [r2, #4]
 8009bde:	4408      	add	r0, r1
 8009be0:	6010      	str	r0, [r2, #0]
 8009be2:	e7da      	b.n	8009b9a <_free_r+0x22>
 8009be4:	d902      	bls.n	8009bec <_free_r+0x74>
 8009be6:	230c      	movs	r3, #12
 8009be8:	602b      	str	r3, [r5, #0]
 8009bea:	e7d6      	b.n	8009b9a <_free_r+0x22>
 8009bec:	6820      	ldr	r0, [r4, #0]
 8009bee:	1821      	adds	r1, r4, r0
 8009bf0:	428b      	cmp	r3, r1
 8009bf2:	bf04      	itt	eq
 8009bf4:	6819      	ldreq	r1, [r3, #0]
 8009bf6:	685b      	ldreq	r3, [r3, #4]
 8009bf8:	6063      	str	r3, [r4, #4]
 8009bfa:	bf04      	itt	eq
 8009bfc:	1809      	addeq	r1, r1, r0
 8009bfe:	6021      	streq	r1, [r4, #0]
 8009c00:	6054      	str	r4, [r2, #4]
 8009c02:	e7ca      	b.n	8009b9a <_free_r+0x22>
 8009c04:	bd38      	pop	{r3, r4, r5, pc}
 8009c06:	bf00      	nop
 8009c08:	200050e8 	.word	0x200050e8

08009c0c <malloc>:
 8009c0c:	4b02      	ldr	r3, [pc, #8]	@ (8009c18 <malloc+0xc>)
 8009c0e:	4601      	mov	r1, r0
 8009c10:	6818      	ldr	r0, [r3, #0]
 8009c12:	f000 b825 	b.w	8009c60 <_malloc_r>
 8009c16:	bf00      	nop
 8009c18:	2000001c 	.word	0x2000001c

08009c1c <sbrk_aligned>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	4e0f      	ldr	r6, [pc, #60]	@ (8009c5c <sbrk_aligned+0x40>)
 8009c20:	460c      	mov	r4, r1
 8009c22:	6831      	ldr	r1, [r6, #0]
 8009c24:	4605      	mov	r5, r0
 8009c26:	b911      	cbnz	r1, 8009c2e <sbrk_aligned+0x12>
 8009c28:	f001 f9d4 	bl	800afd4 <_sbrk_r>
 8009c2c:	6030      	str	r0, [r6, #0]
 8009c2e:	4621      	mov	r1, r4
 8009c30:	4628      	mov	r0, r5
 8009c32:	f001 f9cf 	bl	800afd4 <_sbrk_r>
 8009c36:	1c43      	adds	r3, r0, #1
 8009c38:	d103      	bne.n	8009c42 <sbrk_aligned+0x26>
 8009c3a:	f04f 34ff 	mov.w	r4, #4294967295
 8009c3e:	4620      	mov	r0, r4
 8009c40:	bd70      	pop	{r4, r5, r6, pc}
 8009c42:	1cc4      	adds	r4, r0, #3
 8009c44:	f024 0403 	bic.w	r4, r4, #3
 8009c48:	42a0      	cmp	r0, r4
 8009c4a:	d0f8      	beq.n	8009c3e <sbrk_aligned+0x22>
 8009c4c:	1a21      	subs	r1, r4, r0
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f001 f9c0 	bl	800afd4 <_sbrk_r>
 8009c54:	3001      	adds	r0, #1
 8009c56:	d1f2      	bne.n	8009c3e <sbrk_aligned+0x22>
 8009c58:	e7ef      	b.n	8009c3a <sbrk_aligned+0x1e>
 8009c5a:	bf00      	nop
 8009c5c:	200050e4 	.word	0x200050e4

08009c60 <_malloc_r>:
 8009c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c64:	1ccd      	adds	r5, r1, #3
 8009c66:	f025 0503 	bic.w	r5, r5, #3
 8009c6a:	3508      	adds	r5, #8
 8009c6c:	2d0c      	cmp	r5, #12
 8009c6e:	bf38      	it	cc
 8009c70:	250c      	movcc	r5, #12
 8009c72:	2d00      	cmp	r5, #0
 8009c74:	4606      	mov	r6, r0
 8009c76:	db01      	blt.n	8009c7c <_malloc_r+0x1c>
 8009c78:	42a9      	cmp	r1, r5
 8009c7a:	d904      	bls.n	8009c86 <_malloc_r+0x26>
 8009c7c:	230c      	movs	r3, #12
 8009c7e:	6033      	str	r3, [r6, #0]
 8009c80:	2000      	movs	r0, #0
 8009c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d5c <_malloc_r+0xfc>
 8009c8a:	f000 f869 	bl	8009d60 <__malloc_lock>
 8009c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8009c92:	461c      	mov	r4, r3
 8009c94:	bb44      	cbnz	r4, 8009ce8 <_malloc_r+0x88>
 8009c96:	4629      	mov	r1, r5
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f7ff ffbf 	bl	8009c1c <sbrk_aligned>
 8009c9e:	1c43      	adds	r3, r0, #1
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	d158      	bne.n	8009d56 <_malloc_r+0xf6>
 8009ca4:	f8d8 4000 	ldr.w	r4, [r8]
 8009ca8:	4627      	mov	r7, r4
 8009caa:	2f00      	cmp	r7, #0
 8009cac:	d143      	bne.n	8009d36 <_malloc_r+0xd6>
 8009cae:	2c00      	cmp	r4, #0
 8009cb0:	d04b      	beq.n	8009d4a <_malloc_r+0xea>
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	4639      	mov	r1, r7
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	eb04 0903 	add.w	r9, r4, r3
 8009cbc:	f001 f98a 	bl	800afd4 <_sbrk_r>
 8009cc0:	4581      	cmp	r9, r0
 8009cc2:	d142      	bne.n	8009d4a <_malloc_r+0xea>
 8009cc4:	6821      	ldr	r1, [r4, #0]
 8009cc6:	1a6d      	subs	r5, r5, r1
 8009cc8:	4629      	mov	r1, r5
 8009cca:	4630      	mov	r0, r6
 8009ccc:	f7ff ffa6 	bl	8009c1c <sbrk_aligned>
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d03a      	beq.n	8009d4a <_malloc_r+0xea>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	442b      	add	r3, r5
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	f8d8 3000 	ldr.w	r3, [r8]
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	bb62      	cbnz	r2, 8009d3c <_malloc_r+0xdc>
 8009ce2:	f8c8 7000 	str.w	r7, [r8]
 8009ce6:	e00f      	b.n	8009d08 <_malloc_r+0xa8>
 8009ce8:	6822      	ldr	r2, [r4, #0]
 8009cea:	1b52      	subs	r2, r2, r5
 8009cec:	d420      	bmi.n	8009d30 <_malloc_r+0xd0>
 8009cee:	2a0b      	cmp	r2, #11
 8009cf0:	d917      	bls.n	8009d22 <_malloc_r+0xc2>
 8009cf2:	1961      	adds	r1, r4, r5
 8009cf4:	42a3      	cmp	r3, r4
 8009cf6:	6025      	str	r5, [r4, #0]
 8009cf8:	bf18      	it	ne
 8009cfa:	6059      	strne	r1, [r3, #4]
 8009cfc:	6863      	ldr	r3, [r4, #4]
 8009cfe:	bf08      	it	eq
 8009d00:	f8c8 1000 	streq.w	r1, [r8]
 8009d04:	5162      	str	r2, [r4, r5]
 8009d06:	604b      	str	r3, [r1, #4]
 8009d08:	4630      	mov	r0, r6
 8009d0a:	f000 f82f 	bl	8009d6c <__malloc_unlock>
 8009d0e:	f104 000b 	add.w	r0, r4, #11
 8009d12:	1d23      	adds	r3, r4, #4
 8009d14:	f020 0007 	bic.w	r0, r0, #7
 8009d18:	1ac2      	subs	r2, r0, r3
 8009d1a:	bf1c      	itt	ne
 8009d1c:	1a1b      	subne	r3, r3, r0
 8009d1e:	50a3      	strne	r3, [r4, r2]
 8009d20:	e7af      	b.n	8009c82 <_malloc_r+0x22>
 8009d22:	6862      	ldr	r2, [r4, #4]
 8009d24:	42a3      	cmp	r3, r4
 8009d26:	bf0c      	ite	eq
 8009d28:	f8c8 2000 	streq.w	r2, [r8]
 8009d2c:	605a      	strne	r2, [r3, #4]
 8009d2e:	e7eb      	b.n	8009d08 <_malloc_r+0xa8>
 8009d30:	4623      	mov	r3, r4
 8009d32:	6864      	ldr	r4, [r4, #4]
 8009d34:	e7ae      	b.n	8009c94 <_malloc_r+0x34>
 8009d36:	463c      	mov	r4, r7
 8009d38:	687f      	ldr	r7, [r7, #4]
 8009d3a:	e7b6      	b.n	8009caa <_malloc_r+0x4a>
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	42a3      	cmp	r3, r4
 8009d42:	d1fb      	bne.n	8009d3c <_malloc_r+0xdc>
 8009d44:	2300      	movs	r3, #0
 8009d46:	6053      	str	r3, [r2, #4]
 8009d48:	e7de      	b.n	8009d08 <_malloc_r+0xa8>
 8009d4a:	230c      	movs	r3, #12
 8009d4c:	6033      	str	r3, [r6, #0]
 8009d4e:	4630      	mov	r0, r6
 8009d50:	f000 f80c 	bl	8009d6c <__malloc_unlock>
 8009d54:	e794      	b.n	8009c80 <_malloc_r+0x20>
 8009d56:	6005      	str	r5, [r0, #0]
 8009d58:	e7d6      	b.n	8009d08 <_malloc_r+0xa8>
 8009d5a:	bf00      	nop
 8009d5c:	200050e8 	.word	0x200050e8

08009d60 <__malloc_lock>:
 8009d60:	4801      	ldr	r0, [pc, #4]	@ (8009d68 <__malloc_lock+0x8>)
 8009d62:	f7ff b8aa 	b.w	8008eba <__retarget_lock_acquire_recursive>
 8009d66:	bf00      	nop
 8009d68:	200050e0 	.word	0x200050e0

08009d6c <__malloc_unlock>:
 8009d6c:	4801      	ldr	r0, [pc, #4]	@ (8009d74 <__malloc_unlock+0x8>)
 8009d6e:	f7ff b8a5 	b.w	8008ebc <__retarget_lock_release_recursive>
 8009d72:	bf00      	nop
 8009d74:	200050e0 	.word	0x200050e0

08009d78 <_Balloc>:
 8009d78:	b570      	push	{r4, r5, r6, lr}
 8009d7a:	69c6      	ldr	r6, [r0, #28]
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	460d      	mov	r5, r1
 8009d80:	b976      	cbnz	r6, 8009da0 <_Balloc+0x28>
 8009d82:	2010      	movs	r0, #16
 8009d84:	f7ff ff42 	bl	8009c0c <malloc>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	61e0      	str	r0, [r4, #28]
 8009d8c:	b920      	cbnz	r0, 8009d98 <_Balloc+0x20>
 8009d8e:	4b18      	ldr	r3, [pc, #96]	@ (8009df0 <_Balloc+0x78>)
 8009d90:	4818      	ldr	r0, [pc, #96]	@ (8009df4 <_Balloc+0x7c>)
 8009d92:	216b      	movs	r1, #107	@ 0x6b
 8009d94:	f001 f92e 	bl	800aff4 <__assert_func>
 8009d98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d9c:	6006      	str	r6, [r0, #0]
 8009d9e:	60c6      	str	r6, [r0, #12]
 8009da0:	69e6      	ldr	r6, [r4, #28]
 8009da2:	68f3      	ldr	r3, [r6, #12]
 8009da4:	b183      	cbz	r3, 8009dc8 <_Balloc+0x50>
 8009da6:	69e3      	ldr	r3, [r4, #28]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009dae:	b9b8      	cbnz	r0, 8009de0 <_Balloc+0x68>
 8009db0:	2101      	movs	r1, #1
 8009db2:	fa01 f605 	lsl.w	r6, r1, r5
 8009db6:	1d72      	adds	r2, r6, #5
 8009db8:	0092      	lsls	r2, r2, #2
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f001 f938 	bl	800b030 <_calloc_r>
 8009dc0:	b160      	cbz	r0, 8009ddc <_Balloc+0x64>
 8009dc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009dc6:	e00e      	b.n	8009de6 <_Balloc+0x6e>
 8009dc8:	2221      	movs	r2, #33	@ 0x21
 8009dca:	2104      	movs	r1, #4
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f001 f92f 	bl	800b030 <_calloc_r>
 8009dd2:	69e3      	ldr	r3, [r4, #28]
 8009dd4:	60f0      	str	r0, [r6, #12]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1e4      	bne.n	8009da6 <_Balloc+0x2e>
 8009ddc:	2000      	movs	r0, #0
 8009dde:	bd70      	pop	{r4, r5, r6, pc}
 8009de0:	6802      	ldr	r2, [r0, #0]
 8009de2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009de6:	2300      	movs	r3, #0
 8009de8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009dec:	e7f7      	b.n	8009dde <_Balloc+0x66>
 8009dee:	bf00      	nop
 8009df0:	0800b9c3 	.word	0x0800b9c3
 8009df4:	0800ba43 	.word	0x0800ba43

08009df8 <_Bfree>:
 8009df8:	b570      	push	{r4, r5, r6, lr}
 8009dfa:	69c6      	ldr	r6, [r0, #28]
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	460c      	mov	r4, r1
 8009e00:	b976      	cbnz	r6, 8009e20 <_Bfree+0x28>
 8009e02:	2010      	movs	r0, #16
 8009e04:	f7ff ff02 	bl	8009c0c <malloc>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	61e8      	str	r0, [r5, #28]
 8009e0c:	b920      	cbnz	r0, 8009e18 <_Bfree+0x20>
 8009e0e:	4b09      	ldr	r3, [pc, #36]	@ (8009e34 <_Bfree+0x3c>)
 8009e10:	4809      	ldr	r0, [pc, #36]	@ (8009e38 <_Bfree+0x40>)
 8009e12:	218f      	movs	r1, #143	@ 0x8f
 8009e14:	f001 f8ee 	bl	800aff4 <__assert_func>
 8009e18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e1c:	6006      	str	r6, [r0, #0]
 8009e1e:	60c6      	str	r6, [r0, #12]
 8009e20:	b13c      	cbz	r4, 8009e32 <_Bfree+0x3a>
 8009e22:	69eb      	ldr	r3, [r5, #28]
 8009e24:	6862      	ldr	r2, [r4, #4]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e2c:	6021      	str	r1, [r4, #0]
 8009e2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e32:	bd70      	pop	{r4, r5, r6, pc}
 8009e34:	0800b9c3 	.word	0x0800b9c3
 8009e38:	0800ba43 	.word	0x0800ba43

08009e3c <__multadd>:
 8009e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e40:	690d      	ldr	r5, [r1, #16]
 8009e42:	4607      	mov	r7, r0
 8009e44:	460c      	mov	r4, r1
 8009e46:	461e      	mov	r6, r3
 8009e48:	f101 0c14 	add.w	ip, r1, #20
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	f8dc 3000 	ldr.w	r3, [ip]
 8009e52:	b299      	uxth	r1, r3
 8009e54:	fb02 6101 	mla	r1, r2, r1, r6
 8009e58:	0c1e      	lsrs	r6, r3, #16
 8009e5a:	0c0b      	lsrs	r3, r1, #16
 8009e5c:	fb02 3306 	mla	r3, r2, r6, r3
 8009e60:	b289      	uxth	r1, r1
 8009e62:	3001      	adds	r0, #1
 8009e64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e68:	4285      	cmp	r5, r0
 8009e6a:	f84c 1b04 	str.w	r1, [ip], #4
 8009e6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e72:	dcec      	bgt.n	8009e4e <__multadd+0x12>
 8009e74:	b30e      	cbz	r6, 8009eba <__multadd+0x7e>
 8009e76:	68a3      	ldr	r3, [r4, #8]
 8009e78:	42ab      	cmp	r3, r5
 8009e7a:	dc19      	bgt.n	8009eb0 <__multadd+0x74>
 8009e7c:	6861      	ldr	r1, [r4, #4]
 8009e7e:	4638      	mov	r0, r7
 8009e80:	3101      	adds	r1, #1
 8009e82:	f7ff ff79 	bl	8009d78 <_Balloc>
 8009e86:	4680      	mov	r8, r0
 8009e88:	b928      	cbnz	r0, 8009e96 <__multadd+0x5a>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8009ec0 <__multadd+0x84>)
 8009e8e:	480d      	ldr	r0, [pc, #52]	@ (8009ec4 <__multadd+0x88>)
 8009e90:	21ba      	movs	r1, #186	@ 0xba
 8009e92:	f001 f8af 	bl	800aff4 <__assert_func>
 8009e96:	6922      	ldr	r2, [r4, #16]
 8009e98:	3202      	adds	r2, #2
 8009e9a:	f104 010c 	add.w	r1, r4, #12
 8009e9e:	0092      	lsls	r2, r2, #2
 8009ea0:	300c      	adds	r0, #12
 8009ea2:	f7ff f80c 	bl	8008ebe <memcpy>
 8009ea6:	4621      	mov	r1, r4
 8009ea8:	4638      	mov	r0, r7
 8009eaa:	f7ff ffa5 	bl	8009df8 <_Bfree>
 8009eae:	4644      	mov	r4, r8
 8009eb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009eb4:	3501      	adds	r5, #1
 8009eb6:	615e      	str	r6, [r3, #20]
 8009eb8:	6125      	str	r5, [r4, #16]
 8009eba:	4620      	mov	r0, r4
 8009ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ec0:	0800ba32 	.word	0x0800ba32
 8009ec4:	0800ba43 	.word	0x0800ba43

08009ec8 <__hi0bits>:
 8009ec8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009ecc:	4603      	mov	r3, r0
 8009ece:	bf36      	itet	cc
 8009ed0:	0403      	lslcc	r3, r0, #16
 8009ed2:	2000      	movcs	r0, #0
 8009ed4:	2010      	movcc	r0, #16
 8009ed6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009eda:	bf3c      	itt	cc
 8009edc:	021b      	lslcc	r3, r3, #8
 8009ede:	3008      	addcc	r0, #8
 8009ee0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ee4:	bf3c      	itt	cc
 8009ee6:	011b      	lslcc	r3, r3, #4
 8009ee8:	3004      	addcc	r0, #4
 8009eea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eee:	bf3c      	itt	cc
 8009ef0:	009b      	lslcc	r3, r3, #2
 8009ef2:	3002      	addcc	r0, #2
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	db05      	blt.n	8009f04 <__hi0bits+0x3c>
 8009ef8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009efc:	f100 0001 	add.w	r0, r0, #1
 8009f00:	bf08      	it	eq
 8009f02:	2020      	moveq	r0, #32
 8009f04:	4770      	bx	lr

08009f06 <__lo0bits>:
 8009f06:	6803      	ldr	r3, [r0, #0]
 8009f08:	4602      	mov	r2, r0
 8009f0a:	f013 0007 	ands.w	r0, r3, #7
 8009f0e:	d00b      	beq.n	8009f28 <__lo0bits+0x22>
 8009f10:	07d9      	lsls	r1, r3, #31
 8009f12:	d421      	bmi.n	8009f58 <__lo0bits+0x52>
 8009f14:	0798      	lsls	r0, r3, #30
 8009f16:	bf49      	itett	mi
 8009f18:	085b      	lsrmi	r3, r3, #1
 8009f1a:	089b      	lsrpl	r3, r3, #2
 8009f1c:	2001      	movmi	r0, #1
 8009f1e:	6013      	strmi	r3, [r2, #0]
 8009f20:	bf5c      	itt	pl
 8009f22:	6013      	strpl	r3, [r2, #0]
 8009f24:	2002      	movpl	r0, #2
 8009f26:	4770      	bx	lr
 8009f28:	b299      	uxth	r1, r3
 8009f2a:	b909      	cbnz	r1, 8009f30 <__lo0bits+0x2a>
 8009f2c:	0c1b      	lsrs	r3, r3, #16
 8009f2e:	2010      	movs	r0, #16
 8009f30:	b2d9      	uxtb	r1, r3
 8009f32:	b909      	cbnz	r1, 8009f38 <__lo0bits+0x32>
 8009f34:	3008      	adds	r0, #8
 8009f36:	0a1b      	lsrs	r3, r3, #8
 8009f38:	0719      	lsls	r1, r3, #28
 8009f3a:	bf04      	itt	eq
 8009f3c:	091b      	lsreq	r3, r3, #4
 8009f3e:	3004      	addeq	r0, #4
 8009f40:	0799      	lsls	r1, r3, #30
 8009f42:	bf04      	itt	eq
 8009f44:	089b      	lsreq	r3, r3, #2
 8009f46:	3002      	addeq	r0, #2
 8009f48:	07d9      	lsls	r1, r3, #31
 8009f4a:	d403      	bmi.n	8009f54 <__lo0bits+0x4e>
 8009f4c:	085b      	lsrs	r3, r3, #1
 8009f4e:	f100 0001 	add.w	r0, r0, #1
 8009f52:	d003      	beq.n	8009f5c <__lo0bits+0x56>
 8009f54:	6013      	str	r3, [r2, #0]
 8009f56:	4770      	bx	lr
 8009f58:	2000      	movs	r0, #0
 8009f5a:	4770      	bx	lr
 8009f5c:	2020      	movs	r0, #32
 8009f5e:	4770      	bx	lr

08009f60 <__i2b>:
 8009f60:	b510      	push	{r4, lr}
 8009f62:	460c      	mov	r4, r1
 8009f64:	2101      	movs	r1, #1
 8009f66:	f7ff ff07 	bl	8009d78 <_Balloc>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	b928      	cbnz	r0, 8009f7a <__i2b+0x1a>
 8009f6e:	4b05      	ldr	r3, [pc, #20]	@ (8009f84 <__i2b+0x24>)
 8009f70:	4805      	ldr	r0, [pc, #20]	@ (8009f88 <__i2b+0x28>)
 8009f72:	f240 1145 	movw	r1, #325	@ 0x145
 8009f76:	f001 f83d 	bl	800aff4 <__assert_func>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	6144      	str	r4, [r0, #20]
 8009f7e:	6103      	str	r3, [r0, #16]
 8009f80:	bd10      	pop	{r4, pc}
 8009f82:	bf00      	nop
 8009f84:	0800ba32 	.word	0x0800ba32
 8009f88:	0800ba43 	.word	0x0800ba43

08009f8c <__multiply>:
 8009f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f90:	4614      	mov	r4, r2
 8009f92:	690a      	ldr	r2, [r1, #16]
 8009f94:	6923      	ldr	r3, [r4, #16]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	bfa8      	it	ge
 8009f9a:	4623      	movge	r3, r4
 8009f9c:	460f      	mov	r7, r1
 8009f9e:	bfa4      	itt	ge
 8009fa0:	460c      	movge	r4, r1
 8009fa2:	461f      	movge	r7, r3
 8009fa4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009fa8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009fac:	68a3      	ldr	r3, [r4, #8]
 8009fae:	6861      	ldr	r1, [r4, #4]
 8009fb0:	eb0a 0609 	add.w	r6, sl, r9
 8009fb4:	42b3      	cmp	r3, r6
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	bfb8      	it	lt
 8009fba:	3101      	addlt	r1, #1
 8009fbc:	f7ff fedc 	bl	8009d78 <_Balloc>
 8009fc0:	b930      	cbnz	r0, 8009fd0 <__multiply+0x44>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	4b44      	ldr	r3, [pc, #272]	@ (800a0d8 <__multiply+0x14c>)
 8009fc6:	4845      	ldr	r0, [pc, #276]	@ (800a0dc <__multiply+0x150>)
 8009fc8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009fcc:	f001 f812 	bl	800aff4 <__assert_func>
 8009fd0:	f100 0514 	add.w	r5, r0, #20
 8009fd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009fd8:	462b      	mov	r3, r5
 8009fda:	2200      	movs	r2, #0
 8009fdc:	4543      	cmp	r3, r8
 8009fde:	d321      	bcc.n	800a024 <__multiply+0x98>
 8009fe0:	f107 0114 	add.w	r1, r7, #20
 8009fe4:	f104 0214 	add.w	r2, r4, #20
 8009fe8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009fec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009ff0:	9302      	str	r3, [sp, #8]
 8009ff2:	1b13      	subs	r3, r2, r4
 8009ff4:	3b15      	subs	r3, #21
 8009ff6:	f023 0303 	bic.w	r3, r3, #3
 8009ffa:	3304      	adds	r3, #4
 8009ffc:	f104 0715 	add.w	r7, r4, #21
 800a000:	42ba      	cmp	r2, r7
 800a002:	bf38      	it	cc
 800a004:	2304      	movcc	r3, #4
 800a006:	9301      	str	r3, [sp, #4]
 800a008:	9b02      	ldr	r3, [sp, #8]
 800a00a:	9103      	str	r1, [sp, #12]
 800a00c:	428b      	cmp	r3, r1
 800a00e:	d80c      	bhi.n	800a02a <__multiply+0x9e>
 800a010:	2e00      	cmp	r6, #0
 800a012:	dd03      	ble.n	800a01c <__multiply+0x90>
 800a014:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d05b      	beq.n	800a0d4 <__multiply+0x148>
 800a01c:	6106      	str	r6, [r0, #16]
 800a01e:	b005      	add	sp, #20
 800a020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a024:	f843 2b04 	str.w	r2, [r3], #4
 800a028:	e7d8      	b.n	8009fdc <__multiply+0x50>
 800a02a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a02e:	f1ba 0f00 	cmp.w	sl, #0
 800a032:	d024      	beq.n	800a07e <__multiply+0xf2>
 800a034:	f104 0e14 	add.w	lr, r4, #20
 800a038:	46a9      	mov	r9, r5
 800a03a:	f04f 0c00 	mov.w	ip, #0
 800a03e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a042:	f8d9 3000 	ldr.w	r3, [r9]
 800a046:	fa1f fb87 	uxth.w	fp, r7
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a050:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a054:	f8d9 7000 	ldr.w	r7, [r9]
 800a058:	4463      	add	r3, ip
 800a05a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a05e:	fb0a c70b 	mla	r7, sl, fp, ip
 800a062:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a066:	b29b      	uxth	r3, r3
 800a068:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a06c:	4572      	cmp	r2, lr
 800a06e:	f849 3b04 	str.w	r3, [r9], #4
 800a072:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a076:	d8e2      	bhi.n	800a03e <__multiply+0xb2>
 800a078:	9b01      	ldr	r3, [sp, #4]
 800a07a:	f845 c003 	str.w	ip, [r5, r3]
 800a07e:	9b03      	ldr	r3, [sp, #12]
 800a080:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a084:	3104      	adds	r1, #4
 800a086:	f1b9 0f00 	cmp.w	r9, #0
 800a08a:	d021      	beq.n	800a0d0 <__multiply+0x144>
 800a08c:	682b      	ldr	r3, [r5, #0]
 800a08e:	f104 0c14 	add.w	ip, r4, #20
 800a092:	46ae      	mov	lr, r5
 800a094:	f04f 0a00 	mov.w	sl, #0
 800a098:	f8bc b000 	ldrh.w	fp, [ip]
 800a09c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a0a0:	fb09 770b 	mla	r7, r9, fp, r7
 800a0a4:	4457      	add	r7, sl
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a0ac:	f84e 3b04 	str.w	r3, [lr], #4
 800a0b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a0b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0b8:	f8be 3000 	ldrh.w	r3, [lr]
 800a0bc:	fb09 330a 	mla	r3, r9, sl, r3
 800a0c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a0c4:	4562      	cmp	r2, ip
 800a0c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0ca:	d8e5      	bhi.n	800a098 <__multiply+0x10c>
 800a0cc:	9f01      	ldr	r7, [sp, #4]
 800a0ce:	51eb      	str	r3, [r5, r7]
 800a0d0:	3504      	adds	r5, #4
 800a0d2:	e799      	b.n	800a008 <__multiply+0x7c>
 800a0d4:	3e01      	subs	r6, #1
 800a0d6:	e79b      	b.n	800a010 <__multiply+0x84>
 800a0d8:	0800ba32 	.word	0x0800ba32
 800a0dc:	0800ba43 	.word	0x0800ba43

0800a0e0 <__pow5mult>:
 800a0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0e4:	4615      	mov	r5, r2
 800a0e6:	f012 0203 	ands.w	r2, r2, #3
 800a0ea:	4607      	mov	r7, r0
 800a0ec:	460e      	mov	r6, r1
 800a0ee:	d007      	beq.n	800a100 <__pow5mult+0x20>
 800a0f0:	4c25      	ldr	r4, [pc, #148]	@ (800a188 <__pow5mult+0xa8>)
 800a0f2:	3a01      	subs	r2, #1
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0fa:	f7ff fe9f 	bl	8009e3c <__multadd>
 800a0fe:	4606      	mov	r6, r0
 800a100:	10ad      	asrs	r5, r5, #2
 800a102:	d03d      	beq.n	800a180 <__pow5mult+0xa0>
 800a104:	69fc      	ldr	r4, [r7, #28]
 800a106:	b97c      	cbnz	r4, 800a128 <__pow5mult+0x48>
 800a108:	2010      	movs	r0, #16
 800a10a:	f7ff fd7f 	bl	8009c0c <malloc>
 800a10e:	4602      	mov	r2, r0
 800a110:	61f8      	str	r0, [r7, #28]
 800a112:	b928      	cbnz	r0, 800a120 <__pow5mult+0x40>
 800a114:	4b1d      	ldr	r3, [pc, #116]	@ (800a18c <__pow5mult+0xac>)
 800a116:	481e      	ldr	r0, [pc, #120]	@ (800a190 <__pow5mult+0xb0>)
 800a118:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a11c:	f000 ff6a 	bl	800aff4 <__assert_func>
 800a120:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a124:	6004      	str	r4, [r0, #0]
 800a126:	60c4      	str	r4, [r0, #12]
 800a128:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a12c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a130:	b94c      	cbnz	r4, 800a146 <__pow5mult+0x66>
 800a132:	f240 2171 	movw	r1, #625	@ 0x271
 800a136:	4638      	mov	r0, r7
 800a138:	f7ff ff12 	bl	8009f60 <__i2b>
 800a13c:	2300      	movs	r3, #0
 800a13e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a142:	4604      	mov	r4, r0
 800a144:	6003      	str	r3, [r0, #0]
 800a146:	f04f 0900 	mov.w	r9, #0
 800a14a:	07eb      	lsls	r3, r5, #31
 800a14c:	d50a      	bpl.n	800a164 <__pow5mult+0x84>
 800a14e:	4631      	mov	r1, r6
 800a150:	4622      	mov	r2, r4
 800a152:	4638      	mov	r0, r7
 800a154:	f7ff ff1a 	bl	8009f8c <__multiply>
 800a158:	4631      	mov	r1, r6
 800a15a:	4680      	mov	r8, r0
 800a15c:	4638      	mov	r0, r7
 800a15e:	f7ff fe4b 	bl	8009df8 <_Bfree>
 800a162:	4646      	mov	r6, r8
 800a164:	106d      	asrs	r5, r5, #1
 800a166:	d00b      	beq.n	800a180 <__pow5mult+0xa0>
 800a168:	6820      	ldr	r0, [r4, #0]
 800a16a:	b938      	cbnz	r0, 800a17c <__pow5mult+0x9c>
 800a16c:	4622      	mov	r2, r4
 800a16e:	4621      	mov	r1, r4
 800a170:	4638      	mov	r0, r7
 800a172:	f7ff ff0b 	bl	8009f8c <__multiply>
 800a176:	6020      	str	r0, [r4, #0]
 800a178:	f8c0 9000 	str.w	r9, [r0]
 800a17c:	4604      	mov	r4, r0
 800a17e:	e7e4      	b.n	800a14a <__pow5mult+0x6a>
 800a180:	4630      	mov	r0, r6
 800a182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a186:	bf00      	nop
 800a188:	0800ba9c 	.word	0x0800ba9c
 800a18c:	0800b9c3 	.word	0x0800b9c3
 800a190:	0800ba43 	.word	0x0800ba43

0800a194 <__lshift>:
 800a194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a198:	460c      	mov	r4, r1
 800a19a:	6849      	ldr	r1, [r1, #4]
 800a19c:	6923      	ldr	r3, [r4, #16]
 800a19e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1a2:	68a3      	ldr	r3, [r4, #8]
 800a1a4:	4607      	mov	r7, r0
 800a1a6:	4691      	mov	r9, r2
 800a1a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1ac:	f108 0601 	add.w	r6, r8, #1
 800a1b0:	42b3      	cmp	r3, r6
 800a1b2:	db0b      	blt.n	800a1cc <__lshift+0x38>
 800a1b4:	4638      	mov	r0, r7
 800a1b6:	f7ff fddf 	bl	8009d78 <_Balloc>
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	b948      	cbnz	r0, 800a1d2 <__lshift+0x3e>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	4b28      	ldr	r3, [pc, #160]	@ (800a264 <__lshift+0xd0>)
 800a1c2:	4829      	ldr	r0, [pc, #164]	@ (800a268 <__lshift+0xd4>)
 800a1c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a1c8:	f000 ff14 	bl	800aff4 <__assert_func>
 800a1cc:	3101      	adds	r1, #1
 800a1ce:	005b      	lsls	r3, r3, #1
 800a1d0:	e7ee      	b.n	800a1b0 <__lshift+0x1c>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f100 0114 	add.w	r1, r0, #20
 800a1d8:	f100 0210 	add.w	r2, r0, #16
 800a1dc:	4618      	mov	r0, r3
 800a1de:	4553      	cmp	r3, sl
 800a1e0:	db33      	blt.n	800a24a <__lshift+0xb6>
 800a1e2:	6920      	ldr	r0, [r4, #16]
 800a1e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1e8:	f104 0314 	add.w	r3, r4, #20
 800a1ec:	f019 091f 	ands.w	r9, r9, #31
 800a1f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a1f8:	d02b      	beq.n	800a252 <__lshift+0xbe>
 800a1fa:	f1c9 0e20 	rsb	lr, r9, #32
 800a1fe:	468a      	mov	sl, r1
 800a200:	2200      	movs	r2, #0
 800a202:	6818      	ldr	r0, [r3, #0]
 800a204:	fa00 f009 	lsl.w	r0, r0, r9
 800a208:	4310      	orrs	r0, r2
 800a20a:	f84a 0b04 	str.w	r0, [sl], #4
 800a20e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a212:	459c      	cmp	ip, r3
 800a214:	fa22 f20e 	lsr.w	r2, r2, lr
 800a218:	d8f3      	bhi.n	800a202 <__lshift+0x6e>
 800a21a:	ebac 0304 	sub.w	r3, ip, r4
 800a21e:	3b15      	subs	r3, #21
 800a220:	f023 0303 	bic.w	r3, r3, #3
 800a224:	3304      	adds	r3, #4
 800a226:	f104 0015 	add.w	r0, r4, #21
 800a22a:	4584      	cmp	ip, r0
 800a22c:	bf38      	it	cc
 800a22e:	2304      	movcc	r3, #4
 800a230:	50ca      	str	r2, [r1, r3]
 800a232:	b10a      	cbz	r2, 800a238 <__lshift+0xa4>
 800a234:	f108 0602 	add.w	r6, r8, #2
 800a238:	3e01      	subs	r6, #1
 800a23a:	4638      	mov	r0, r7
 800a23c:	612e      	str	r6, [r5, #16]
 800a23e:	4621      	mov	r1, r4
 800a240:	f7ff fdda 	bl	8009df8 <_Bfree>
 800a244:	4628      	mov	r0, r5
 800a246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a24a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a24e:	3301      	adds	r3, #1
 800a250:	e7c5      	b.n	800a1de <__lshift+0x4a>
 800a252:	3904      	subs	r1, #4
 800a254:	f853 2b04 	ldr.w	r2, [r3], #4
 800a258:	f841 2f04 	str.w	r2, [r1, #4]!
 800a25c:	459c      	cmp	ip, r3
 800a25e:	d8f9      	bhi.n	800a254 <__lshift+0xc0>
 800a260:	e7ea      	b.n	800a238 <__lshift+0xa4>
 800a262:	bf00      	nop
 800a264:	0800ba32 	.word	0x0800ba32
 800a268:	0800ba43 	.word	0x0800ba43

0800a26c <__mcmp>:
 800a26c:	690a      	ldr	r2, [r1, #16]
 800a26e:	4603      	mov	r3, r0
 800a270:	6900      	ldr	r0, [r0, #16]
 800a272:	1a80      	subs	r0, r0, r2
 800a274:	b530      	push	{r4, r5, lr}
 800a276:	d10e      	bne.n	800a296 <__mcmp+0x2a>
 800a278:	3314      	adds	r3, #20
 800a27a:	3114      	adds	r1, #20
 800a27c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a280:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a284:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a288:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a28c:	4295      	cmp	r5, r2
 800a28e:	d003      	beq.n	800a298 <__mcmp+0x2c>
 800a290:	d205      	bcs.n	800a29e <__mcmp+0x32>
 800a292:	f04f 30ff 	mov.w	r0, #4294967295
 800a296:	bd30      	pop	{r4, r5, pc}
 800a298:	42a3      	cmp	r3, r4
 800a29a:	d3f3      	bcc.n	800a284 <__mcmp+0x18>
 800a29c:	e7fb      	b.n	800a296 <__mcmp+0x2a>
 800a29e:	2001      	movs	r0, #1
 800a2a0:	e7f9      	b.n	800a296 <__mcmp+0x2a>
	...

0800a2a4 <__mdiff>:
 800a2a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a8:	4689      	mov	r9, r1
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	4648      	mov	r0, r9
 800a2b0:	4614      	mov	r4, r2
 800a2b2:	f7ff ffdb 	bl	800a26c <__mcmp>
 800a2b6:	1e05      	subs	r5, r0, #0
 800a2b8:	d112      	bne.n	800a2e0 <__mdiff+0x3c>
 800a2ba:	4629      	mov	r1, r5
 800a2bc:	4630      	mov	r0, r6
 800a2be:	f7ff fd5b 	bl	8009d78 <_Balloc>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	b928      	cbnz	r0, 800a2d2 <__mdiff+0x2e>
 800a2c6:	4b3f      	ldr	r3, [pc, #252]	@ (800a3c4 <__mdiff+0x120>)
 800a2c8:	f240 2137 	movw	r1, #567	@ 0x237
 800a2cc:	483e      	ldr	r0, [pc, #248]	@ (800a3c8 <__mdiff+0x124>)
 800a2ce:	f000 fe91 	bl	800aff4 <__assert_func>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2d8:	4610      	mov	r0, r2
 800a2da:	b003      	add	sp, #12
 800a2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e0:	bfbc      	itt	lt
 800a2e2:	464b      	movlt	r3, r9
 800a2e4:	46a1      	movlt	r9, r4
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a2ec:	bfba      	itte	lt
 800a2ee:	461c      	movlt	r4, r3
 800a2f0:	2501      	movlt	r5, #1
 800a2f2:	2500      	movge	r5, #0
 800a2f4:	f7ff fd40 	bl	8009d78 <_Balloc>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	b918      	cbnz	r0, 800a304 <__mdiff+0x60>
 800a2fc:	4b31      	ldr	r3, [pc, #196]	@ (800a3c4 <__mdiff+0x120>)
 800a2fe:	f240 2145 	movw	r1, #581	@ 0x245
 800a302:	e7e3      	b.n	800a2cc <__mdiff+0x28>
 800a304:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a308:	6926      	ldr	r6, [r4, #16]
 800a30a:	60c5      	str	r5, [r0, #12]
 800a30c:	f109 0310 	add.w	r3, r9, #16
 800a310:	f109 0514 	add.w	r5, r9, #20
 800a314:	f104 0e14 	add.w	lr, r4, #20
 800a318:	f100 0b14 	add.w	fp, r0, #20
 800a31c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a320:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a324:	9301      	str	r3, [sp, #4]
 800a326:	46d9      	mov	r9, fp
 800a328:	f04f 0c00 	mov.w	ip, #0
 800a32c:	9b01      	ldr	r3, [sp, #4]
 800a32e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a332:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a336:	9301      	str	r3, [sp, #4]
 800a338:	fa1f f38a 	uxth.w	r3, sl
 800a33c:	4619      	mov	r1, r3
 800a33e:	b283      	uxth	r3, r0
 800a340:	1acb      	subs	r3, r1, r3
 800a342:	0c00      	lsrs	r0, r0, #16
 800a344:	4463      	add	r3, ip
 800a346:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a34a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a34e:	b29b      	uxth	r3, r3
 800a350:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a354:	4576      	cmp	r6, lr
 800a356:	f849 3b04 	str.w	r3, [r9], #4
 800a35a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a35e:	d8e5      	bhi.n	800a32c <__mdiff+0x88>
 800a360:	1b33      	subs	r3, r6, r4
 800a362:	3b15      	subs	r3, #21
 800a364:	f023 0303 	bic.w	r3, r3, #3
 800a368:	3415      	adds	r4, #21
 800a36a:	3304      	adds	r3, #4
 800a36c:	42a6      	cmp	r6, r4
 800a36e:	bf38      	it	cc
 800a370:	2304      	movcc	r3, #4
 800a372:	441d      	add	r5, r3
 800a374:	445b      	add	r3, fp
 800a376:	461e      	mov	r6, r3
 800a378:	462c      	mov	r4, r5
 800a37a:	4544      	cmp	r4, r8
 800a37c:	d30e      	bcc.n	800a39c <__mdiff+0xf8>
 800a37e:	f108 0103 	add.w	r1, r8, #3
 800a382:	1b49      	subs	r1, r1, r5
 800a384:	f021 0103 	bic.w	r1, r1, #3
 800a388:	3d03      	subs	r5, #3
 800a38a:	45a8      	cmp	r8, r5
 800a38c:	bf38      	it	cc
 800a38e:	2100      	movcc	r1, #0
 800a390:	440b      	add	r3, r1
 800a392:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a396:	b191      	cbz	r1, 800a3be <__mdiff+0x11a>
 800a398:	6117      	str	r7, [r2, #16]
 800a39a:	e79d      	b.n	800a2d8 <__mdiff+0x34>
 800a39c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a3a0:	46e6      	mov	lr, ip
 800a3a2:	0c08      	lsrs	r0, r1, #16
 800a3a4:	fa1c fc81 	uxtah	ip, ip, r1
 800a3a8:	4471      	add	r1, lr
 800a3aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a3ae:	b289      	uxth	r1, r1
 800a3b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a3b4:	f846 1b04 	str.w	r1, [r6], #4
 800a3b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a3bc:	e7dd      	b.n	800a37a <__mdiff+0xd6>
 800a3be:	3f01      	subs	r7, #1
 800a3c0:	e7e7      	b.n	800a392 <__mdiff+0xee>
 800a3c2:	bf00      	nop
 800a3c4:	0800ba32 	.word	0x0800ba32
 800a3c8:	0800ba43 	.word	0x0800ba43

0800a3cc <__d2b>:
 800a3cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a3d0:	460f      	mov	r7, r1
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	ec59 8b10 	vmov	r8, r9, d0
 800a3d8:	4616      	mov	r6, r2
 800a3da:	f7ff fccd 	bl	8009d78 <_Balloc>
 800a3de:	4604      	mov	r4, r0
 800a3e0:	b930      	cbnz	r0, 800a3f0 <__d2b+0x24>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	4b23      	ldr	r3, [pc, #140]	@ (800a474 <__d2b+0xa8>)
 800a3e6:	4824      	ldr	r0, [pc, #144]	@ (800a478 <__d2b+0xac>)
 800a3e8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a3ec:	f000 fe02 	bl	800aff4 <__assert_func>
 800a3f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a3f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a3f8:	b10d      	cbz	r5, 800a3fe <__d2b+0x32>
 800a3fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a3fe:	9301      	str	r3, [sp, #4]
 800a400:	f1b8 0300 	subs.w	r3, r8, #0
 800a404:	d023      	beq.n	800a44e <__d2b+0x82>
 800a406:	4668      	mov	r0, sp
 800a408:	9300      	str	r3, [sp, #0]
 800a40a:	f7ff fd7c 	bl	8009f06 <__lo0bits>
 800a40e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a412:	b1d0      	cbz	r0, 800a44a <__d2b+0x7e>
 800a414:	f1c0 0320 	rsb	r3, r0, #32
 800a418:	fa02 f303 	lsl.w	r3, r2, r3
 800a41c:	430b      	orrs	r3, r1
 800a41e:	40c2      	lsrs	r2, r0
 800a420:	6163      	str	r3, [r4, #20]
 800a422:	9201      	str	r2, [sp, #4]
 800a424:	9b01      	ldr	r3, [sp, #4]
 800a426:	61a3      	str	r3, [r4, #24]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	bf0c      	ite	eq
 800a42c:	2201      	moveq	r2, #1
 800a42e:	2202      	movne	r2, #2
 800a430:	6122      	str	r2, [r4, #16]
 800a432:	b1a5      	cbz	r5, 800a45e <__d2b+0x92>
 800a434:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a438:	4405      	add	r5, r0
 800a43a:	603d      	str	r5, [r7, #0]
 800a43c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a440:	6030      	str	r0, [r6, #0]
 800a442:	4620      	mov	r0, r4
 800a444:	b003      	add	sp, #12
 800a446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a44a:	6161      	str	r1, [r4, #20]
 800a44c:	e7ea      	b.n	800a424 <__d2b+0x58>
 800a44e:	a801      	add	r0, sp, #4
 800a450:	f7ff fd59 	bl	8009f06 <__lo0bits>
 800a454:	9b01      	ldr	r3, [sp, #4]
 800a456:	6163      	str	r3, [r4, #20]
 800a458:	3020      	adds	r0, #32
 800a45a:	2201      	movs	r2, #1
 800a45c:	e7e8      	b.n	800a430 <__d2b+0x64>
 800a45e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a462:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a466:	6038      	str	r0, [r7, #0]
 800a468:	6918      	ldr	r0, [r3, #16]
 800a46a:	f7ff fd2d 	bl	8009ec8 <__hi0bits>
 800a46e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a472:	e7e5      	b.n	800a440 <__d2b+0x74>
 800a474:	0800ba32 	.word	0x0800ba32
 800a478:	0800ba43 	.word	0x0800ba43

0800a47c <__ssputs_r>:
 800a47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a480:	688e      	ldr	r6, [r1, #8]
 800a482:	461f      	mov	r7, r3
 800a484:	42be      	cmp	r6, r7
 800a486:	680b      	ldr	r3, [r1, #0]
 800a488:	4682      	mov	sl, r0
 800a48a:	460c      	mov	r4, r1
 800a48c:	4690      	mov	r8, r2
 800a48e:	d82d      	bhi.n	800a4ec <__ssputs_r+0x70>
 800a490:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a494:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a498:	d026      	beq.n	800a4e8 <__ssputs_r+0x6c>
 800a49a:	6965      	ldr	r5, [r4, #20]
 800a49c:	6909      	ldr	r1, [r1, #16]
 800a49e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4a2:	eba3 0901 	sub.w	r9, r3, r1
 800a4a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4aa:	1c7b      	adds	r3, r7, #1
 800a4ac:	444b      	add	r3, r9
 800a4ae:	106d      	asrs	r5, r5, #1
 800a4b0:	429d      	cmp	r5, r3
 800a4b2:	bf38      	it	cc
 800a4b4:	461d      	movcc	r5, r3
 800a4b6:	0553      	lsls	r3, r2, #21
 800a4b8:	d527      	bpl.n	800a50a <__ssputs_r+0x8e>
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	f7ff fbd0 	bl	8009c60 <_malloc_r>
 800a4c0:	4606      	mov	r6, r0
 800a4c2:	b360      	cbz	r0, 800a51e <__ssputs_r+0xa2>
 800a4c4:	6921      	ldr	r1, [r4, #16]
 800a4c6:	464a      	mov	r2, r9
 800a4c8:	f7fe fcf9 	bl	8008ebe <memcpy>
 800a4cc:	89a3      	ldrh	r3, [r4, #12]
 800a4ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a4d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4d6:	81a3      	strh	r3, [r4, #12]
 800a4d8:	6126      	str	r6, [r4, #16]
 800a4da:	6165      	str	r5, [r4, #20]
 800a4dc:	444e      	add	r6, r9
 800a4de:	eba5 0509 	sub.w	r5, r5, r9
 800a4e2:	6026      	str	r6, [r4, #0]
 800a4e4:	60a5      	str	r5, [r4, #8]
 800a4e6:	463e      	mov	r6, r7
 800a4e8:	42be      	cmp	r6, r7
 800a4ea:	d900      	bls.n	800a4ee <__ssputs_r+0x72>
 800a4ec:	463e      	mov	r6, r7
 800a4ee:	6820      	ldr	r0, [r4, #0]
 800a4f0:	4632      	mov	r2, r6
 800a4f2:	4641      	mov	r1, r8
 800a4f4:	f000 fd53 	bl	800af9e <memmove>
 800a4f8:	68a3      	ldr	r3, [r4, #8]
 800a4fa:	1b9b      	subs	r3, r3, r6
 800a4fc:	60a3      	str	r3, [r4, #8]
 800a4fe:	6823      	ldr	r3, [r4, #0]
 800a500:	4433      	add	r3, r6
 800a502:	6023      	str	r3, [r4, #0]
 800a504:	2000      	movs	r0, #0
 800a506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a50a:	462a      	mov	r2, r5
 800a50c:	f000 fdb6 	bl	800b07c <_realloc_r>
 800a510:	4606      	mov	r6, r0
 800a512:	2800      	cmp	r0, #0
 800a514:	d1e0      	bne.n	800a4d8 <__ssputs_r+0x5c>
 800a516:	6921      	ldr	r1, [r4, #16]
 800a518:	4650      	mov	r0, sl
 800a51a:	f7ff fb2d 	bl	8009b78 <_free_r>
 800a51e:	230c      	movs	r3, #12
 800a520:	f8ca 3000 	str.w	r3, [sl]
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a52a:	81a3      	strh	r3, [r4, #12]
 800a52c:	f04f 30ff 	mov.w	r0, #4294967295
 800a530:	e7e9      	b.n	800a506 <__ssputs_r+0x8a>
	...

0800a534 <_svfiprintf_r>:
 800a534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a538:	4698      	mov	r8, r3
 800a53a:	898b      	ldrh	r3, [r1, #12]
 800a53c:	061b      	lsls	r3, r3, #24
 800a53e:	b09d      	sub	sp, #116	@ 0x74
 800a540:	4607      	mov	r7, r0
 800a542:	460d      	mov	r5, r1
 800a544:	4614      	mov	r4, r2
 800a546:	d510      	bpl.n	800a56a <_svfiprintf_r+0x36>
 800a548:	690b      	ldr	r3, [r1, #16]
 800a54a:	b973      	cbnz	r3, 800a56a <_svfiprintf_r+0x36>
 800a54c:	2140      	movs	r1, #64	@ 0x40
 800a54e:	f7ff fb87 	bl	8009c60 <_malloc_r>
 800a552:	6028      	str	r0, [r5, #0]
 800a554:	6128      	str	r0, [r5, #16]
 800a556:	b930      	cbnz	r0, 800a566 <_svfiprintf_r+0x32>
 800a558:	230c      	movs	r3, #12
 800a55a:	603b      	str	r3, [r7, #0]
 800a55c:	f04f 30ff 	mov.w	r0, #4294967295
 800a560:	b01d      	add	sp, #116	@ 0x74
 800a562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a566:	2340      	movs	r3, #64	@ 0x40
 800a568:	616b      	str	r3, [r5, #20]
 800a56a:	2300      	movs	r3, #0
 800a56c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a56e:	2320      	movs	r3, #32
 800a570:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a574:	f8cd 800c 	str.w	r8, [sp, #12]
 800a578:	2330      	movs	r3, #48	@ 0x30
 800a57a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a718 <_svfiprintf_r+0x1e4>
 800a57e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a582:	f04f 0901 	mov.w	r9, #1
 800a586:	4623      	mov	r3, r4
 800a588:	469a      	mov	sl, r3
 800a58a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a58e:	b10a      	cbz	r2, 800a594 <_svfiprintf_r+0x60>
 800a590:	2a25      	cmp	r2, #37	@ 0x25
 800a592:	d1f9      	bne.n	800a588 <_svfiprintf_r+0x54>
 800a594:	ebba 0b04 	subs.w	fp, sl, r4
 800a598:	d00b      	beq.n	800a5b2 <_svfiprintf_r+0x7e>
 800a59a:	465b      	mov	r3, fp
 800a59c:	4622      	mov	r2, r4
 800a59e:	4629      	mov	r1, r5
 800a5a0:	4638      	mov	r0, r7
 800a5a2:	f7ff ff6b 	bl	800a47c <__ssputs_r>
 800a5a6:	3001      	adds	r0, #1
 800a5a8:	f000 80a7 	beq.w	800a6fa <_svfiprintf_r+0x1c6>
 800a5ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5ae:	445a      	add	r2, fp
 800a5b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f000 809f 	beq.w	800a6fa <_svfiprintf_r+0x1c6>
 800a5bc:	2300      	movs	r3, #0
 800a5be:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5c6:	f10a 0a01 	add.w	sl, sl, #1
 800a5ca:	9304      	str	r3, [sp, #16]
 800a5cc:	9307      	str	r3, [sp, #28]
 800a5ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a5d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5d4:	4654      	mov	r4, sl
 800a5d6:	2205      	movs	r2, #5
 800a5d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5dc:	484e      	ldr	r0, [pc, #312]	@ (800a718 <_svfiprintf_r+0x1e4>)
 800a5de:	f7f5 fdff 	bl	80001e0 <memchr>
 800a5e2:	9a04      	ldr	r2, [sp, #16]
 800a5e4:	b9d8      	cbnz	r0, 800a61e <_svfiprintf_r+0xea>
 800a5e6:	06d0      	lsls	r0, r2, #27
 800a5e8:	bf44      	itt	mi
 800a5ea:	2320      	movmi	r3, #32
 800a5ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5f0:	0711      	lsls	r1, r2, #28
 800a5f2:	bf44      	itt	mi
 800a5f4:	232b      	movmi	r3, #43	@ 0x2b
 800a5f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a5fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800a600:	d015      	beq.n	800a62e <_svfiprintf_r+0xfa>
 800a602:	9a07      	ldr	r2, [sp, #28]
 800a604:	4654      	mov	r4, sl
 800a606:	2000      	movs	r0, #0
 800a608:	f04f 0c0a 	mov.w	ip, #10
 800a60c:	4621      	mov	r1, r4
 800a60e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a612:	3b30      	subs	r3, #48	@ 0x30
 800a614:	2b09      	cmp	r3, #9
 800a616:	d94b      	bls.n	800a6b0 <_svfiprintf_r+0x17c>
 800a618:	b1b0      	cbz	r0, 800a648 <_svfiprintf_r+0x114>
 800a61a:	9207      	str	r2, [sp, #28]
 800a61c:	e014      	b.n	800a648 <_svfiprintf_r+0x114>
 800a61e:	eba0 0308 	sub.w	r3, r0, r8
 800a622:	fa09 f303 	lsl.w	r3, r9, r3
 800a626:	4313      	orrs	r3, r2
 800a628:	9304      	str	r3, [sp, #16]
 800a62a:	46a2      	mov	sl, r4
 800a62c:	e7d2      	b.n	800a5d4 <_svfiprintf_r+0xa0>
 800a62e:	9b03      	ldr	r3, [sp, #12]
 800a630:	1d19      	adds	r1, r3, #4
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	9103      	str	r1, [sp, #12]
 800a636:	2b00      	cmp	r3, #0
 800a638:	bfbb      	ittet	lt
 800a63a:	425b      	neglt	r3, r3
 800a63c:	f042 0202 	orrlt.w	r2, r2, #2
 800a640:	9307      	strge	r3, [sp, #28]
 800a642:	9307      	strlt	r3, [sp, #28]
 800a644:	bfb8      	it	lt
 800a646:	9204      	strlt	r2, [sp, #16]
 800a648:	7823      	ldrb	r3, [r4, #0]
 800a64a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a64c:	d10a      	bne.n	800a664 <_svfiprintf_r+0x130>
 800a64e:	7863      	ldrb	r3, [r4, #1]
 800a650:	2b2a      	cmp	r3, #42	@ 0x2a
 800a652:	d132      	bne.n	800a6ba <_svfiprintf_r+0x186>
 800a654:	9b03      	ldr	r3, [sp, #12]
 800a656:	1d1a      	adds	r2, r3, #4
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	9203      	str	r2, [sp, #12]
 800a65c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a660:	3402      	adds	r4, #2
 800a662:	9305      	str	r3, [sp, #20]
 800a664:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a728 <_svfiprintf_r+0x1f4>
 800a668:	7821      	ldrb	r1, [r4, #0]
 800a66a:	2203      	movs	r2, #3
 800a66c:	4650      	mov	r0, sl
 800a66e:	f7f5 fdb7 	bl	80001e0 <memchr>
 800a672:	b138      	cbz	r0, 800a684 <_svfiprintf_r+0x150>
 800a674:	9b04      	ldr	r3, [sp, #16]
 800a676:	eba0 000a 	sub.w	r0, r0, sl
 800a67a:	2240      	movs	r2, #64	@ 0x40
 800a67c:	4082      	lsls	r2, r0
 800a67e:	4313      	orrs	r3, r2
 800a680:	3401      	adds	r4, #1
 800a682:	9304      	str	r3, [sp, #16]
 800a684:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a688:	4824      	ldr	r0, [pc, #144]	@ (800a71c <_svfiprintf_r+0x1e8>)
 800a68a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a68e:	2206      	movs	r2, #6
 800a690:	f7f5 fda6 	bl	80001e0 <memchr>
 800a694:	2800      	cmp	r0, #0
 800a696:	d036      	beq.n	800a706 <_svfiprintf_r+0x1d2>
 800a698:	4b21      	ldr	r3, [pc, #132]	@ (800a720 <_svfiprintf_r+0x1ec>)
 800a69a:	bb1b      	cbnz	r3, 800a6e4 <_svfiprintf_r+0x1b0>
 800a69c:	9b03      	ldr	r3, [sp, #12]
 800a69e:	3307      	adds	r3, #7
 800a6a0:	f023 0307 	bic.w	r3, r3, #7
 800a6a4:	3308      	adds	r3, #8
 800a6a6:	9303      	str	r3, [sp, #12]
 800a6a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6aa:	4433      	add	r3, r6
 800a6ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6ae:	e76a      	b.n	800a586 <_svfiprintf_r+0x52>
 800a6b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	2001      	movs	r0, #1
 800a6b8:	e7a8      	b.n	800a60c <_svfiprintf_r+0xd8>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	3401      	adds	r4, #1
 800a6be:	9305      	str	r3, [sp, #20]
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	f04f 0c0a 	mov.w	ip, #10
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6cc:	3a30      	subs	r2, #48	@ 0x30
 800a6ce:	2a09      	cmp	r2, #9
 800a6d0:	d903      	bls.n	800a6da <_svfiprintf_r+0x1a6>
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d0c6      	beq.n	800a664 <_svfiprintf_r+0x130>
 800a6d6:	9105      	str	r1, [sp, #20]
 800a6d8:	e7c4      	b.n	800a664 <_svfiprintf_r+0x130>
 800a6da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6de:	4604      	mov	r4, r0
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e7f0      	b.n	800a6c6 <_svfiprintf_r+0x192>
 800a6e4:	ab03      	add	r3, sp, #12
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	462a      	mov	r2, r5
 800a6ea:	4b0e      	ldr	r3, [pc, #56]	@ (800a724 <_svfiprintf_r+0x1f0>)
 800a6ec:	a904      	add	r1, sp, #16
 800a6ee:	4638      	mov	r0, r7
 800a6f0:	f7fd fde0 	bl	80082b4 <_printf_float>
 800a6f4:	1c42      	adds	r2, r0, #1
 800a6f6:	4606      	mov	r6, r0
 800a6f8:	d1d6      	bne.n	800a6a8 <_svfiprintf_r+0x174>
 800a6fa:	89ab      	ldrh	r3, [r5, #12]
 800a6fc:	065b      	lsls	r3, r3, #25
 800a6fe:	f53f af2d 	bmi.w	800a55c <_svfiprintf_r+0x28>
 800a702:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a704:	e72c      	b.n	800a560 <_svfiprintf_r+0x2c>
 800a706:	ab03      	add	r3, sp, #12
 800a708:	9300      	str	r3, [sp, #0]
 800a70a:	462a      	mov	r2, r5
 800a70c:	4b05      	ldr	r3, [pc, #20]	@ (800a724 <_svfiprintf_r+0x1f0>)
 800a70e:	a904      	add	r1, sp, #16
 800a710:	4638      	mov	r0, r7
 800a712:	f7fe f867 	bl	80087e4 <_printf_i>
 800a716:	e7ed      	b.n	800a6f4 <_svfiprintf_r+0x1c0>
 800a718:	0800bb98 	.word	0x0800bb98
 800a71c:	0800bba2 	.word	0x0800bba2
 800a720:	080082b5 	.word	0x080082b5
 800a724:	0800a47d 	.word	0x0800a47d
 800a728:	0800bb9e 	.word	0x0800bb9e

0800a72c <_sungetc_r>:
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	1c4b      	adds	r3, r1, #1
 800a730:	4614      	mov	r4, r2
 800a732:	d103      	bne.n	800a73c <_sungetc_r+0x10>
 800a734:	f04f 35ff 	mov.w	r5, #4294967295
 800a738:	4628      	mov	r0, r5
 800a73a:	bd38      	pop	{r3, r4, r5, pc}
 800a73c:	8993      	ldrh	r3, [r2, #12]
 800a73e:	f023 0320 	bic.w	r3, r3, #32
 800a742:	8193      	strh	r3, [r2, #12]
 800a744:	6853      	ldr	r3, [r2, #4]
 800a746:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a748:	b2cd      	uxtb	r5, r1
 800a74a:	b18a      	cbz	r2, 800a770 <_sungetc_r+0x44>
 800a74c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a74e:	429a      	cmp	r2, r3
 800a750:	dd08      	ble.n	800a764 <_sungetc_r+0x38>
 800a752:	6823      	ldr	r3, [r4, #0]
 800a754:	1e5a      	subs	r2, r3, #1
 800a756:	6022      	str	r2, [r4, #0]
 800a758:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a75c:	6863      	ldr	r3, [r4, #4]
 800a75e:	3301      	adds	r3, #1
 800a760:	6063      	str	r3, [r4, #4]
 800a762:	e7e9      	b.n	800a738 <_sungetc_r+0xc>
 800a764:	4621      	mov	r1, r4
 800a766:	f000 fbe0 	bl	800af2a <__submore>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d0f1      	beq.n	800a752 <_sungetc_r+0x26>
 800a76e:	e7e1      	b.n	800a734 <_sungetc_r+0x8>
 800a770:	6921      	ldr	r1, [r4, #16]
 800a772:	6822      	ldr	r2, [r4, #0]
 800a774:	b141      	cbz	r1, 800a788 <_sungetc_r+0x5c>
 800a776:	4291      	cmp	r1, r2
 800a778:	d206      	bcs.n	800a788 <_sungetc_r+0x5c>
 800a77a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a77e:	42a9      	cmp	r1, r5
 800a780:	d102      	bne.n	800a788 <_sungetc_r+0x5c>
 800a782:	3a01      	subs	r2, #1
 800a784:	6022      	str	r2, [r4, #0]
 800a786:	e7ea      	b.n	800a75e <_sungetc_r+0x32>
 800a788:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800a78c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a790:	6363      	str	r3, [r4, #52]	@ 0x34
 800a792:	2303      	movs	r3, #3
 800a794:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a796:	4623      	mov	r3, r4
 800a798:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a79c:	6023      	str	r3, [r4, #0]
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e7de      	b.n	800a760 <_sungetc_r+0x34>

0800a7a2 <__ssrefill_r>:
 800a7a2:	b510      	push	{r4, lr}
 800a7a4:	460c      	mov	r4, r1
 800a7a6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a7a8:	b169      	cbz	r1, 800a7c6 <__ssrefill_r+0x24>
 800a7aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7ae:	4299      	cmp	r1, r3
 800a7b0:	d001      	beq.n	800a7b6 <__ssrefill_r+0x14>
 800a7b2:	f7ff f9e1 	bl	8009b78 <_free_r>
 800a7b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a7b8:	6063      	str	r3, [r4, #4]
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	6360      	str	r0, [r4, #52]	@ 0x34
 800a7be:	b113      	cbz	r3, 800a7c6 <__ssrefill_r+0x24>
 800a7c0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a7c2:	6023      	str	r3, [r4, #0]
 800a7c4:	bd10      	pop	{r4, pc}
 800a7c6:	6923      	ldr	r3, [r4, #16]
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	6063      	str	r3, [r4, #4]
 800a7ce:	89a3      	ldrh	r3, [r4, #12]
 800a7d0:	f043 0320 	orr.w	r3, r3, #32
 800a7d4:	81a3      	strh	r3, [r4, #12]
 800a7d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7da:	e7f3      	b.n	800a7c4 <__ssrefill_r+0x22>

0800a7dc <__ssvfiscanf_r>:
 800a7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e0:	460c      	mov	r4, r1
 800a7e2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a7ec:	49a5      	ldr	r1, [pc, #660]	@ (800aa84 <__ssvfiscanf_r+0x2a8>)
 800a7ee:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a7f0:	f10d 0804 	add.w	r8, sp, #4
 800a7f4:	49a4      	ldr	r1, [pc, #656]	@ (800aa88 <__ssvfiscanf_r+0x2ac>)
 800a7f6:	4fa5      	ldr	r7, [pc, #660]	@ (800aa8c <__ssvfiscanf_r+0x2b0>)
 800a7f8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a800:	9300      	str	r3, [sp, #0]
 800a802:	7813      	ldrb	r3, [r2, #0]
 800a804:	2b00      	cmp	r3, #0
 800a806:	f000 8158 	beq.w	800aaba <__ssvfiscanf_r+0x2de>
 800a80a:	5cf9      	ldrb	r1, [r7, r3]
 800a80c:	f011 0108 	ands.w	r1, r1, #8
 800a810:	f102 0501 	add.w	r5, r2, #1
 800a814:	d019      	beq.n	800a84a <__ssvfiscanf_r+0x6e>
 800a816:	6863      	ldr	r3, [r4, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	dd0f      	ble.n	800a83c <__ssvfiscanf_r+0x60>
 800a81c:	6823      	ldr	r3, [r4, #0]
 800a81e:	781a      	ldrb	r2, [r3, #0]
 800a820:	5cba      	ldrb	r2, [r7, r2]
 800a822:	0712      	lsls	r2, r2, #28
 800a824:	d401      	bmi.n	800a82a <__ssvfiscanf_r+0x4e>
 800a826:	462a      	mov	r2, r5
 800a828:	e7eb      	b.n	800a802 <__ssvfiscanf_r+0x26>
 800a82a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a82c:	3201      	adds	r2, #1
 800a82e:	9245      	str	r2, [sp, #276]	@ 0x114
 800a830:	6862      	ldr	r2, [r4, #4]
 800a832:	3301      	adds	r3, #1
 800a834:	3a01      	subs	r2, #1
 800a836:	6062      	str	r2, [r4, #4]
 800a838:	6023      	str	r3, [r4, #0]
 800a83a:	e7ec      	b.n	800a816 <__ssvfiscanf_r+0x3a>
 800a83c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a83e:	4621      	mov	r1, r4
 800a840:	4630      	mov	r0, r6
 800a842:	4798      	blx	r3
 800a844:	2800      	cmp	r0, #0
 800a846:	d0e9      	beq.n	800a81c <__ssvfiscanf_r+0x40>
 800a848:	e7ed      	b.n	800a826 <__ssvfiscanf_r+0x4a>
 800a84a:	2b25      	cmp	r3, #37	@ 0x25
 800a84c:	d012      	beq.n	800a874 <__ssvfiscanf_r+0x98>
 800a84e:	4699      	mov	r9, r3
 800a850:	6863      	ldr	r3, [r4, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	f340 8093 	ble.w	800a97e <__ssvfiscanf_r+0x1a2>
 800a858:	6822      	ldr	r2, [r4, #0]
 800a85a:	7813      	ldrb	r3, [r2, #0]
 800a85c:	454b      	cmp	r3, r9
 800a85e:	f040 812c 	bne.w	800aaba <__ssvfiscanf_r+0x2de>
 800a862:	6863      	ldr	r3, [r4, #4]
 800a864:	3b01      	subs	r3, #1
 800a866:	6063      	str	r3, [r4, #4]
 800a868:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a86a:	3201      	adds	r2, #1
 800a86c:	3301      	adds	r3, #1
 800a86e:	6022      	str	r2, [r4, #0]
 800a870:	9345      	str	r3, [sp, #276]	@ 0x114
 800a872:	e7d8      	b.n	800a826 <__ssvfiscanf_r+0x4a>
 800a874:	9141      	str	r1, [sp, #260]	@ 0x104
 800a876:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a878:	7853      	ldrb	r3, [r2, #1]
 800a87a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a87c:	bf02      	ittt	eq
 800a87e:	2310      	moveq	r3, #16
 800a880:	1c95      	addeq	r5, r2, #2
 800a882:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a884:	220a      	movs	r2, #10
 800a886:	46a9      	mov	r9, r5
 800a888:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a88c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a890:	2b09      	cmp	r3, #9
 800a892:	d91e      	bls.n	800a8d2 <__ssvfiscanf_r+0xf6>
 800a894:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800aa90 <__ssvfiscanf_r+0x2b4>
 800a898:	2203      	movs	r2, #3
 800a89a:	4650      	mov	r0, sl
 800a89c:	f7f5 fca0 	bl	80001e0 <memchr>
 800a8a0:	b138      	cbz	r0, 800a8b2 <__ssvfiscanf_r+0xd6>
 800a8a2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a8a4:	eba0 000a 	sub.w	r0, r0, sl
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	4083      	lsls	r3, r0
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	9341      	str	r3, [sp, #260]	@ 0x104
 800a8b0:	464d      	mov	r5, r9
 800a8b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a8b6:	2b78      	cmp	r3, #120	@ 0x78
 800a8b8:	d806      	bhi.n	800a8c8 <__ssvfiscanf_r+0xec>
 800a8ba:	2b57      	cmp	r3, #87	@ 0x57
 800a8bc:	d810      	bhi.n	800a8e0 <__ssvfiscanf_r+0x104>
 800a8be:	2b25      	cmp	r3, #37	@ 0x25
 800a8c0:	d0c5      	beq.n	800a84e <__ssvfiscanf_r+0x72>
 800a8c2:	d857      	bhi.n	800a974 <__ssvfiscanf_r+0x198>
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d065      	beq.n	800a994 <__ssvfiscanf_r+0x1b8>
 800a8c8:	2303      	movs	r3, #3
 800a8ca:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a8cc:	230a      	movs	r3, #10
 800a8ce:	9342      	str	r3, [sp, #264]	@ 0x108
 800a8d0:	e078      	b.n	800a9c4 <__ssvfiscanf_r+0x1e8>
 800a8d2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a8d4:	fb02 1103 	mla	r1, r2, r3, r1
 800a8d8:	3930      	subs	r1, #48	@ 0x30
 800a8da:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a8dc:	464d      	mov	r5, r9
 800a8de:	e7d2      	b.n	800a886 <__ssvfiscanf_r+0xaa>
 800a8e0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a8e4:	2a20      	cmp	r2, #32
 800a8e6:	d8ef      	bhi.n	800a8c8 <__ssvfiscanf_r+0xec>
 800a8e8:	a101      	add	r1, pc, #4	@ (adr r1, 800a8f0 <__ssvfiscanf_r+0x114>)
 800a8ea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a8ee:	bf00      	nop
 800a8f0:	0800a9a3 	.word	0x0800a9a3
 800a8f4:	0800a8c9 	.word	0x0800a8c9
 800a8f8:	0800a8c9 	.word	0x0800a8c9
 800a8fc:	0800a9fd 	.word	0x0800a9fd
 800a900:	0800a8c9 	.word	0x0800a8c9
 800a904:	0800a8c9 	.word	0x0800a8c9
 800a908:	0800a8c9 	.word	0x0800a8c9
 800a90c:	0800a8c9 	.word	0x0800a8c9
 800a910:	0800a8c9 	.word	0x0800a8c9
 800a914:	0800a8c9 	.word	0x0800a8c9
 800a918:	0800a8c9 	.word	0x0800a8c9
 800a91c:	0800aa13 	.word	0x0800aa13
 800a920:	0800a9f9 	.word	0x0800a9f9
 800a924:	0800a97b 	.word	0x0800a97b
 800a928:	0800a97b 	.word	0x0800a97b
 800a92c:	0800a97b 	.word	0x0800a97b
 800a930:	0800a8c9 	.word	0x0800a8c9
 800a934:	0800a9b5 	.word	0x0800a9b5
 800a938:	0800a8c9 	.word	0x0800a8c9
 800a93c:	0800a8c9 	.word	0x0800a8c9
 800a940:	0800a8c9 	.word	0x0800a8c9
 800a944:	0800a8c9 	.word	0x0800a8c9
 800a948:	0800aa23 	.word	0x0800aa23
 800a94c:	0800a9bd 	.word	0x0800a9bd
 800a950:	0800a99b 	.word	0x0800a99b
 800a954:	0800a8c9 	.word	0x0800a8c9
 800a958:	0800a8c9 	.word	0x0800a8c9
 800a95c:	0800aa1f 	.word	0x0800aa1f
 800a960:	0800a8c9 	.word	0x0800a8c9
 800a964:	0800a9f9 	.word	0x0800a9f9
 800a968:	0800a8c9 	.word	0x0800a8c9
 800a96c:	0800a8c9 	.word	0x0800a8c9
 800a970:	0800a9a3 	.word	0x0800a9a3
 800a974:	3b45      	subs	r3, #69	@ 0x45
 800a976:	2b02      	cmp	r3, #2
 800a978:	d8a6      	bhi.n	800a8c8 <__ssvfiscanf_r+0xec>
 800a97a:	2305      	movs	r3, #5
 800a97c:	e021      	b.n	800a9c2 <__ssvfiscanf_r+0x1e6>
 800a97e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a980:	4621      	mov	r1, r4
 800a982:	4630      	mov	r0, r6
 800a984:	4798      	blx	r3
 800a986:	2800      	cmp	r0, #0
 800a988:	f43f af66 	beq.w	800a858 <__ssvfiscanf_r+0x7c>
 800a98c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a98e:	2800      	cmp	r0, #0
 800a990:	f040 808b 	bne.w	800aaaa <__ssvfiscanf_r+0x2ce>
 800a994:	f04f 30ff 	mov.w	r0, #4294967295
 800a998:	e08b      	b.n	800aab2 <__ssvfiscanf_r+0x2d6>
 800a99a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a99c:	f042 0220 	orr.w	r2, r2, #32
 800a9a0:	9241      	str	r2, [sp, #260]	@ 0x104
 800a9a2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a9a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9a8:	9241      	str	r2, [sp, #260]	@ 0x104
 800a9aa:	2210      	movs	r2, #16
 800a9ac:	2b6e      	cmp	r3, #110	@ 0x6e
 800a9ae:	9242      	str	r2, [sp, #264]	@ 0x108
 800a9b0:	d902      	bls.n	800a9b8 <__ssvfiscanf_r+0x1dc>
 800a9b2:	e005      	b.n	800a9c0 <__ssvfiscanf_r+0x1e4>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	9342      	str	r3, [sp, #264]	@ 0x108
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	e002      	b.n	800a9c2 <__ssvfiscanf_r+0x1e6>
 800a9bc:	2308      	movs	r3, #8
 800a9be:	9342      	str	r3, [sp, #264]	@ 0x108
 800a9c0:	2304      	movs	r3, #4
 800a9c2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a9c4:	6863      	ldr	r3, [r4, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	dd39      	ble.n	800aa3e <__ssvfiscanf_r+0x262>
 800a9ca:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a9cc:	0659      	lsls	r1, r3, #25
 800a9ce:	d404      	bmi.n	800a9da <__ssvfiscanf_r+0x1fe>
 800a9d0:	6823      	ldr	r3, [r4, #0]
 800a9d2:	781a      	ldrb	r2, [r3, #0]
 800a9d4:	5cba      	ldrb	r2, [r7, r2]
 800a9d6:	0712      	lsls	r2, r2, #28
 800a9d8:	d438      	bmi.n	800aa4c <__ssvfiscanf_r+0x270>
 800a9da:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a9dc:	2b02      	cmp	r3, #2
 800a9de:	dc47      	bgt.n	800aa70 <__ssvfiscanf_r+0x294>
 800a9e0:	466b      	mov	r3, sp
 800a9e2:	4622      	mov	r2, r4
 800a9e4:	a941      	add	r1, sp, #260	@ 0x104
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f000 f86c 	bl	800aac4 <_scanf_chars>
 800a9ec:	2801      	cmp	r0, #1
 800a9ee:	d064      	beq.n	800aaba <__ssvfiscanf_r+0x2de>
 800a9f0:	2802      	cmp	r0, #2
 800a9f2:	f47f af18 	bne.w	800a826 <__ssvfiscanf_r+0x4a>
 800a9f6:	e7c9      	b.n	800a98c <__ssvfiscanf_r+0x1b0>
 800a9f8:	220a      	movs	r2, #10
 800a9fa:	e7d7      	b.n	800a9ac <__ssvfiscanf_r+0x1d0>
 800a9fc:	4629      	mov	r1, r5
 800a9fe:	4640      	mov	r0, r8
 800aa00:	f000 fa5a 	bl	800aeb8 <__sccl>
 800aa04:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800aa06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa0a:	9341      	str	r3, [sp, #260]	@ 0x104
 800aa0c:	4605      	mov	r5, r0
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e7d7      	b.n	800a9c2 <__ssvfiscanf_r+0x1e6>
 800aa12:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800aa14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa18:	9341      	str	r3, [sp, #260]	@ 0x104
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	e7d1      	b.n	800a9c2 <__ssvfiscanf_r+0x1e6>
 800aa1e:	2302      	movs	r3, #2
 800aa20:	e7cf      	b.n	800a9c2 <__ssvfiscanf_r+0x1e6>
 800aa22:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800aa24:	06c3      	lsls	r3, r0, #27
 800aa26:	f53f aefe 	bmi.w	800a826 <__ssvfiscanf_r+0x4a>
 800aa2a:	9b00      	ldr	r3, [sp, #0]
 800aa2c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800aa2e:	1d19      	adds	r1, r3, #4
 800aa30:	9100      	str	r1, [sp, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	07c0      	lsls	r0, r0, #31
 800aa36:	bf4c      	ite	mi
 800aa38:	801a      	strhmi	r2, [r3, #0]
 800aa3a:	601a      	strpl	r2, [r3, #0]
 800aa3c:	e6f3      	b.n	800a826 <__ssvfiscanf_r+0x4a>
 800aa3e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800aa40:	4621      	mov	r1, r4
 800aa42:	4630      	mov	r0, r6
 800aa44:	4798      	blx	r3
 800aa46:	2800      	cmp	r0, #0
 800aa48:	d0bf      	beq.n	800a9ca <__ssvfiscanf_r+0x1ee>
 800aa4a:	e79f      	b.n	800a98c <__ssvfiscanf_r+0x1b0>
 800aa4c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800aa4e:	3201      	adds	r2, #1
 800aa50:	9245      	str	r2, [sp, #276]	@ 0x114
 800aa52:	6862      	ldr	r2, [r4, #4]
 800aa54:	3a01      	subs	r2, #1
 800aa56:	2a00      	cmp	r2, #0
 800aa58:	6062      	str	r2, [r4, #4]
 800aa5a:	dd02      	ble.n	800aa62 <__ssvfiscanf_r+0x286>
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	6023      	str	r3, [r4, #0]
 800aa60:	e7b6      	b.n	800a9d0 <__ssvfiscanf_r+0x1f4>
 800aa62:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800aa64:	4621      	mov	r1, r4
 800aa66:	4630      	mov	r0, r6
 800aa68:	4798      	blx	r3
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d0b0      	beq.n	800a9d0 <__ssvfiscanf_r+0x1f4>
 800aa6e:	e78d      	b.n	800a98c <__ssvfiscanf_r+0x1b0>
 800aa70:	2b04      	cmp	r3, #4
 800aa72:	dc0f      	bgt.n	800aa94 <__ssvfiscanf_r+0x2b8>
 800aa74:	466b      	mov	r3, sp
 800aa76:	4622      	mov	r2, r4
 800aa78:	a941      	add	r1, sp, #260	@ 0x104
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	f000 f87c 	bl	800ab78 <_scanf_i>
 800aa80:	e7b4      	b.n	800a9ec <__ssvfiscanf_r+0x210>
 800aa82:	bf00      	nop
 800aa84:	0800a72d 	.word	0x0800a72d
 800aa88:	0800a7a3 	.word	0x0800a7a3
 800aa8c:	0800bc0b 	.word	0x0800bc0b
 800aa90:	0800bb9e 	.word	0x0800bb9e
 800aa94:	4b0a      	ldr	r3, [pc, #40]	@ (800aac0 <__ssvfiscanf_r+0x2e4>)
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	f43f aec5 	beq.w	800a826 <__ssvfiscanf_r+0x4a>
 800aa9c:	466b      	mov	r3, sp
 800aa9e:	4622      	mov	r2, r4
 800aaa0:	a941      	add	r1, sp, #260	@ 0x104
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	f3af 8000 	nop.w
 800aaa8:	e7a0      	b.n	800a9ec <__ssvfiscanf_r+0x210>
 800aaaa:	89a3      	ldrh	r3, [r4, #12]
 800aaac:	065b      	lsls	r3, r3, #25
 800aaae:	f53f af71 	bmi.w	800a994 <__ssvfiscanf_r+0x1b8>
 800aab2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800aab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaba:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800aabc:	e7f9      	b.n	800aab2 <__ssvfiscanf_r+0x2d6>
 800aabe:	bf00      	nop
 800aac0:	00000000 	.word	0x00000000

0800aac4 <_scanf_chars>:
 800aac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aac8:	4615      	mov	r5, r2
 800aaca:	688a      	ldr	r2, [r1, #8]
 800aacc:	4680      	mov	r8, r0
 800aace:	460c      	mov	r4, r1
 800aad0:	b932      	cbnz	r2, 800aae0 <_scanf_chars+0x1c>
 800aad2:	698a      	ldr	r2, [r1, #24]
 800aad4:	2a00      	cmp	r2, #0
 800aad6:	bf14      	ite	ne
 800aad8:	f04f 32ff 	movne.w	r2, #4294967295
 800aadc:	2201      	moveq	r2, #1
 800aade:	608a      	str	r2, [r1, #8]
 800aae0:	6822      	ldr	r2, [r4, #0]
 800aae2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ab74 <_scanf_chars+0xb0>
 800aae6:	06d1      	lsls	r1, r2, #27
 800aae8:	bf5f      	itttt	pl
 800aaea:	681a      	ldrpl	r2, [r3, #0]
 800aaec:	1d11      	addpl	r1, r2, #4
 800aaee:	6019      	strpl	r1, [r3, #0]
 800aaf0:	6816      	ldrpl	r6, [r2, #0]
 800aaf2:	2700      	movs	r7, #0
 800aaf4:	69a0      	ldr	r0, [r4, #24]
 800aaf6:	b188      	cbz	r0, 800ab1c <_scanf_chars+0x58>
 800aaf8:	2801      	cmp	r0, #1
 800aafa:	d107      	bne.n	800ab0c <_scanf_chars+0x48>
 800aafc:	682b      	ldr	r3, [r5, #0]
 800aafe:	781a      	ldrb	r2, [r3, #0]
 800ab00:	6963      	ldr	r3, [r4, #20]
 800ab02:	5c9b      	ldrb	r3, [r3, r2]
 800ab04:	b953      	cbnz	r3, 800ab1c <_scanf_chars+0x58>
 800ab06:	2f00      	cmp	r7, #0
 800ab08:	d031      	beq.n	800ab6e <_scanf_chars+0xaa>
 800ab0a:	e022      	b.n	800ab52 <_scanf_chars+0x8e>
 800ab0c:	2802      	cmp	r0, #2
 800ab0e:	d120      	bne.n	800ab52 <_scanf_chars+0x8e>
 800ab10:	682b      	ldr	r3, [r5, #0]
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ab18:	071b      	lsls	r3, r3, #28
 800ab1a:	d41a      	bmi.n	800ab52 <_scanf_chars+0x8e>
 800ab1c:	6823      	ldr	r3, [r4, #0]
 800ab1e:	06da      	lsls	r2, r3, #27
 800ab20:	bf5e      	ittt	pl
 800ab22:	682b      	ldrpl	r3, [r5, #0]
 800ab24:	781b      	ldrbpl	r3, [r3, #0]
 800ab26:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ab2a:	682a      	ldr	r2, [r5, #0]
 800ab2c:	686b      	ldr	r3, [r5, #4]
 800ab2e:	3201      	adds	r2, #1
 800ab30:	602a      	str	r2, [r5, #0]
 800ab32:	68a2      	ldr	r2, [r4, #8]
 800ab34:	3b01      	subs	r3, #1
 800ab36:	3a01      	subs	r2, #1
 800ab38:	606b      	str	r3, [r5, #4]
 800ab3a:	3701      	adds	r7, #1
 800ab3c:	60a2      	str	r2, [r4, #8]
 800ab3e:	b142      	cbz	r2, 800ab52 <_scanf_chars+0x8e>
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	dcd7      	bgt.n	800aaf4 <_scanf_chars+0x30>
 800ab44:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ab48:	4629      	mov	r1, r5
 800ab4a:	4640      	mov	r0, r8
 800ab4c:	4798      	blx	r3
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	d0d0      	beq.n	800aaf4 <_scanf_chars+0x30>
 800ab52:	6823      	ldr	r3, [r4, #0]
 800ab54:	f013 0310 	ands.w	r3, r3, #16
 800ab58:	d105      	bne.n	800ab66 <_scanf_chars+0xa2>
 800ab5a:	68e2      	ldr	r2, [r4, #12]
 800ab5c:	3201      	adds	r2, #1
 800ab5e:	60e2      	str	r2, [r4, #12]
 800ab60:	69a2      	ldr	r2, [r4, #24]
 800ab62:	b102      	cbz	r2, 800ab66 <_scanf_chars+0xa2>
 800ab64:	7033      	strb	r3, [r6, #0]
 800ab66:	6923      	ldr	r3, [r4, #16]
 800ab68:	443b      	add	r3, r7
 800ab6a:	6123      	str	r3, [r4, #16]
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab72:	bf00      	nop
 800ab74:	0800bc0b 	.word	0x0800bc0b

0800ab78 <_scanf_i>:
 800ab78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7c:	4698      	mov	r8, r3
 800ab7e:	4b74      	ldr	r3, [pc, #464]	@ (800ad50 <_scanf_i+0x1d8>)
 800ab80:	460c      	mov	r4, r1
 800ab82:	4682      	mov	sl, r0
 800ab84:	4616      	mov	r6, r2
 800ab86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ab8a:	b087      	sub	sp, #28
 800ab8c:	ab03      	add	r3, sp, #12
 800ab8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ab92:	4b70      	ldr	r3, [pc, #448]	@ (800ad54 <_scanf_i+0x1dc>)
 800ab94:	69a1      	ldr	r1, [r4, #24]
 800ab96:	4a70      	ldr	r2, [pc, #448]	@ (800ad58 <_scanf_i+0x1e0>)
 800ab98:	2903      	cmp	r1, #3
 800ab9a:	bf08      	it	eq
 800ab9c:	461a      	moveq	r2, r3
 800ab9e:	68a3      	ldr	r3, [r4, #8]
 800aba0:	9201      	str	r2, [sp, #4]
 800aba2:	1e5a      	subs	r2, r3, #1
 800aba4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800aba8:	bf88      	it	hi
 800abaa:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800abae:	4627      	mov	r7, r4
 800abb0:	bf82      	ittt	hi
 800abb2:	eb03 0905 	addhi.w	r9, r3, r5
 800abb6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800abba:	60a3      	strhi	r3, [r4, #8]
 800abbc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800abc0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800abc4:	bf98      	it	ls
 800abc6:	f04f 0900 	movls.w	r9, #0
 800abca:	6023      	str	r3, [r4, #0]
 800abcc:	463d      	mov	r5, r7
 800abce:	f04f 0b00 	mov.w	fp, #0
 800abd2:	6831      	ldr	r1, [r6, #0]
 800abd4:	ab03      	add	r3, sp, #12
 800abd6:	7809      	ldrb	r1, [r1, #0]
 800abd8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800abdc:	2202      	movs	r2, #2
 800abde:	f7f5 faff 	bl	80001e0 <memchr>
 800abe2:	b328      	cbz	r0, 800ac30 <_scanf_i+0xb8>
 800abe4:	f1bb 0f01 	cmp.w	fp, #1
 800abe8:	d159      	bne.n	800ac9e <_scanf_i+0x126>
 800abea:	6862      	ldr	r2, [r4, #4]
 800abec:	b92a      	cbnz	r2, 800abfa <_scanf_i+0x82>
 800abee:	6822      	ldr	r2, [r4, #0]
 800abf0:	2108      	movs	r1, #8
 800abf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800abf6:	6061      	str	r1, [r4, #4]
 800abf8:	6022      	str	r2, [r4, #0]
 800abfa:	6822      	ldr	r2, [r4, #0]
 800abfc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800ac00:	6022      	str	r2, [r4, #0]
 800ac02:	68a2      	ldr	r2, [r4, #8]
 800ac04:	1e51      	subs	r1, r2, #1
 800ac06:	60a1      	str	r1, [r4, #8]
 800ac08:	b192      	cbz	r2, 800ac30 <_scanf_i+0xb8>
 800ac0a:	6832      	ldr	r2, [r6, #0]
 800ac0c:	1c51      	adds	r1, r2, #1
 800ac0e:	6031      	str	r1, [r6, #0]
 800ac10:	7812      	ldrb	r2, [r2, #0]
 800ac12:	f805 2b01 	strb.w	r2, [r5], #1
 800ac16:	6872      	ldr	r2, [r6, #4]
 800ac18:	3a01      	subs	r2, #1
 800ac1a:	2a00      	cmp	r2, #0
 800ac1c:	6072      	str	r2, [r6, #4]
 800ac1e:	dc07      	bgt.n	800ac30 <_scanf_i+0xb8>
 800ac20:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800ac24:	4631      	mov	r1, r6
 800ac26:	4650      	mov	r0, sl
 800ac28:	4790      	blx	r2
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	f040 8085 	bne.w	800ad3a <_scanf_i+0x1c2>
 800ac30:	f10b 0b01 	add.w	fp, fp, #1
 800ac34:	f1bb 0f03 	cmp.w	fp, #3
 800ac38:	d1cb      	bne.n	800abd2 <_scanf_i+0x5a>
 800ac3a:	6863      	ldr	r3, [r4, #4]
 800ac3c:	b90b      	cbnz	r3, 800ac42 <_scanf_i+0xca>
 800ac3e:	230a      	movs	r3, #10
 800ac40:	6063      	str	r3, [r4, #4]
 800ac42:	6863      	ldr	r3, [r4, #4]
 800ac44:	4945      	ldr	r1, [pc, #276]	@ (800ad5c <_scanf_i+0x1e4>)
 800ac46:	6960      	ldr	r0, [r4, #20]
 800ac48:	1ac9      	subs	r1, r1, r3
 800ac4a:	f000 f935 	bl	800aeb8 <__sccl>
 800ac4e:	f04f 0b00 	mov.w	fp, #0
 800ac52:	68a3      	ldr	r3, [r4, #8]
 800ac54:	6822      	ldr	r2, [r4, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d03d      	beq.n	800acd6 <_scanf_i+0x15e>
 800ac5a:	6831      	ldr	r1, [r6, #0]
 800ac5c:	6960      	ldr	r0, [r4, #20]
 800ac5e:	f891 c000 	ldrb.w	ip, [r1]
 800ac62:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ac66:	2800      	cmp	r0, #0
 800ac68:	d035      	beq.n	800acd6 <_scanf_i+0x15e>
 800ac6a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ac6e:	d124      	bne.n	800acba <_scanf_i+0x142>
 800ac70:	0510      	lsls	r0, r2, #20
 800ac72:	d522      	bpl.n	800acba <_scanf_i+0x142>
 800ac74:	f10b 0b01 	add.w	fp, fp, #1
 800ac78:	f1b9 0f00 	cmp.w	r9, #0
 800ac7c:	d003      	beq.n	800ac86 <_scanf_i+0x10e>
 800ac7e:	3301      	adds	r3, #1
 800ac80:	f109 39ff 	add.w	r9, r9, #4294967295
 800ac84:	60a3      	str	r3, [r4, #8]
 800ac86:	6873      	ldr	r3, [r6, #4]
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	6073      	str	r3, [r6, #4]
 800ac8e:	dd1b      	ble.n	800acc8 <_scanf_i+0x150>
 800ac90:	6833      	ldr	r3, [r6, #0]
 800ac92:	3301      	adds	r3, #1
 800ac94:	6033      	str	r3, [r6, #0]
 800ac96:	68a3      	ldr	r3, [r4, #8]
 800ac98:	3b01      	subs	r3, #1
 800ac9a:	60a3      	str	r3, [r4, #8]
 800ac9c:	e7d9      	b.n	800ac52 <_scanf_i+0xda>
 800ac9e:	f1bb 0f02 	cmp.w	fp, #2
 800aca2:	d1ae      	bne.n	800ac02 <_scanf_i+0x8a>
 800aca4:	6822      	ldr	r2, [r4, #0]
 800aca6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800acaa:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800acae:	d1bf      	bne.n	800ac30 <_scanf_i+0xb8>
 800acb0:	2110      	movs	r1, #16
 800acb2:	6061      	str	r1, [r4, #4]
 800acb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800acb8:	e7a2      	b.n	800ac00 <_scanf_i+0x88>
 800acba:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800acbe:	6022      	str	r2, [r4, #0]
 800acc0:	780b      	ldrb	r3, [r1, #0]
 800acc2:	f805 3b01 	strb.w	r3, [r5], #1
 800acc6:	e7de      	b.n	800ac86 <_scanf_i+0x10e>
 800acc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800accc:	4631      	mov	r1, r6
 800acce:	4650      	mov	r0, sl
 800acd0:	4798      	blx	r3
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d0df      	beq.n	800ac96 <_scanf_i+0x11e>
 800acd6:	6823      	ldr	r3, [r4, #0]
 800acd8:	05d9      	lsls	r1, r3, #23
 800acda:	d50d      	bpl.n	800acf8 <_scanf_i+0x180>
 800acdc:	42bd      	cmp	r5, r7
 800acde:	d909      	bls.n	800acf4 <_scanf_i+0x17c>
 800ace0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ace4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ace8:	4632      	mov	r2, r6
 800acea:	4650      	mov	r0, sl
 800acec:	4798      	blx	r3
 800acee:	f105 39ff 	add.w	r9, r5, #4294967295
 800acf2:	464d      	mov	r5, r9
 800acf4:	42bd      	cmp	r5, r7
 800acf6:	d028      	beq.n	800ad4a <_scanf_i+0x1d2>
 800acf8:	6822      	ldr	r2, [r4, #0]
 800acfa:	f012 0210 	ands.w	r2, r2, #16
 800acfe:	d113      	bne.n	800ad28 <_scanf_i+0x1b0>
 800ad00:	702a      	strb	r2, [r5, #0]
 800ad02:	6863      	ldr	r3, [r4, #4]
 800ad04:	9e01      	ldr	r6, [sp, #4]
 800ad06:	4639      	mov	r1, r7
 800ad08:	4650      	mov	r0, sl
 800ad0a:	47b0      	blx	r6
 800ad0c:	f8d8 3000 	ldr.w	r3, [r8]
 800ad10:	6821      	ldr	r1, [r4, #0]
 800ad12:	1d1a      	adds	r2, r3, #4
 800ad14:	f8c8 2000 	str.w	r2, [r8]
 800ad18:	f011 0f20 	tst.w	r1, #32
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	d00f      	beq.n	800ad40 <_scanf_i+0x1c8>
 800ad20:	6018      	str	r0, [r3, #0]
 800ad22:	68e3      	ldr	r3, [r4, #12]
 800ad24:	3301      	adds	r3, #1
 800ad26:	60e3      	str	r3, [r4, #12]
 800ad28:	6923      	ldr	r3, [r4, #16]
 800ad2a:	1bed      	subs	r5, r5, r7
 800ad2c:	445d      	add	r5, fp
 800ad2e:	442b      	add	r3, r5
 800ad30:	6123      	str	r3, [r4, #16]
 800ad32:	2000      	movs	r0, #0
 800ad34:	b007      	add	sp, #28
 800ad36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad3a:	f04f 0b00 	mov.w	fp, #0
 800ad3e:	e7ca      	b.n	800acd6 <_scanf_i+0x15e>
 800ad40:	07ca      	lsls	r2, r1, #31
 800ad42:	bf4c      	ite	mi
 800ad44:	8018      	strhmi	r0, [r3, #0]
 800ad46:	6018      	strpl	r0, [r3, #0]
 800ad48:	e7eb      	b.n	800ad22 <_scanf_i+0x1aa>
 800ad4a:	2001      	movs	r0, #1
 800ad4c:	e7f2      	b.n	800ad34 <_scanf_i+0x1bc>
 800ad4e:	bf00      	nop
 800ad50:	0800b958 	.word	0x0800b958
 800ad54:	0800b1cd 	.word	0x0800b1cd
 800ad58:	0800b2ad 	.word	0x0800b2ad
 800ad5c:	0800bbb9 	.word	0x0800bbb9

0800ad60 <__sflush_r>:
 800ad60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad68:	0716      	lsls	r6, r2, #28
 800ad6a:	4605      	mov	r5, r0
 800ad6c:	460c      	mov	r4, r1
 800ad6e:	d454      	bmi.n	800ae1a <__sflush_r+0xba>
 800ad70:	684b      	ldr	r3, [r1, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	dc02      	bgt.n	800ad7c <__sflush_r+0x1c>
 800ad76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	dd48      	ble.n	800ae0e <__sflush_r+0xae>
 800ad7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad7e:	2e00      	cmp	r6, #0
 800ad80:	d045      	beq.n	800ae0e <__sflush_r+0xae>
 800ad82:	2300      	movs	r3, #0
 800ad84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad88:	682f      	ldr	r7, [r5, #0]
 800ad8a:	6a21      	ldr	r1, [r4, #32]
 800ad8c:	602b      	str	r3, [r5, #0]
 800ad8e:	d030      	beq.n	800adf2 <__sflush_r+0x92>
 800ad90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad92:	89a3      	ldrh	r3, [r4, #12]
 800ad94:	0759      	lsls	r1, r3, #29
 800ad96:	d505      	bpl.n	800ada4 <__sflush_r+0x44>
 800ad98:	6863      	ldr	r3, [r4, #4]
 800ad9a:	1ad2      	subs	r2, r2, r3
 800ad9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad9e:	b10b      	cbz	r3, 800ada4 <__sflush_r+0x44>
 800ada0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ada2:	1ad2      	subs	r2, r2, r3
 800ada4:	2300      	movs	r3, #0
 800ada6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ada8:	6a21      	ldr	r1, [r4, #32]
 800adaa:	4628      	mov	r0, r5
 800adac:	47b0      	blx	r6
 800adae:	1c43      	adds	r3, r0, #1
 800adb0:	89a3      	ldrh	r3, [r4, #12]
 800adb2:	d106      	bne.n	800adc2 <__sflush_r+0x62>
 800adb4:	6829      	ldr	r1, [r5, #0]
 800adb6:	291d      	cmp	r1, #29
 800adb8:	d82b      	bhi.n	800ae12 <__sflush_r+0xb2>
 800adba:	4a2a      	ldr	r2, [pc, #168]	@ (800ae64 <__sflush_r+0x104>)
 800adbc:	410a      	asrs	r2, r1
 800adbe:	07d6      	lsls	r6, r2, #31
 800adc0:	d427      	bmi.n	800ae12 <__sflush_r+0xb2>
 800adc2:	2200      	movs	r2, #0
 800adc4:	6062      	str	r2, [r4, #4]
 800adc6:	04d9      	lsls	r1, r3, #19
 800adc8:	6922      	ldr	r2, [r4, #16]
 800adca:	6022      	str	r2, [r4, #0]
 800adcc:	d504      	bpl.n	800add8 <__sflush_r+0x78>
 800adce:	1c42      	adds	r2, r0, #1
 800add0:	d101      	bne.n	800add6 <__sflush_r+0x76>
 800add2:	682b      	ldr	r3, [r5, #0]
 800add4:	b903      	cbnz	r3, 800add8 <__sflush_r+0x78>
 800add6:	6560      	str	r0, [r4, #84]	@ 0x54
 800add8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adda:	602f      	str	r7, [r5, #0]
 800addc:	b1b9      	cbz	r1, 800ae0e <__sflush_r+0xae>
 800adde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ade2:	4299      	cmp	r1, r3
 800ade4:	d002      	beq.n	800adec <__sflush_r+0x8c>
 800ade6:	4628      	mov	r0, r5
 800ade8:	f7fe fec6 	bl	8009b78 <_free_r>
 800adec:	2300      	movs	r3, #0
 800adee:	6363      	str	r3, [r4, #52]	@ 0x34
 800adf0:	e00d      	b.n	800ae0e <__sflush_r+0xae>
 800adf2:	2301      	movs	r3, #1
 800adf4:	4628      	mov	r0, r5
 800adf6:	47b0      	blx	r6
 800adf8:	4602      	mov	r2, r0
 800adfa:	1c50      	adds	r0, r2, #1
 800adfc:	d1c9      	bne.n	800ad92 <__sflush_r+0x32>
 800adfe:	682b      	ldr	r3, [r5, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d0c6      	beq.n	800ad92 <__sflush_r+0x32>
 800ae04:	2b1d      	cmp	r3, #29
 800ae06:	d001      	beq.n	800ae0c <__sflush_r+0xac>
 800ae08:	2b16      	cmp	r3, #22
 800ae0a:	d11e      	bne.n	800ae4a <__sflush_r+0xea>
 800ae0c:	602f      	str	r7, [r5, #0]
 800ae0e:	2000      	movs	r0, #0
 800ae10:	e022      	b.n	800ae58 <__sflush_r+0xf8>
 800ae12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae16:	b21b      	sxth	r3, r3
 800ae18:	e01b      	b.n	800ae52 <__sflush_r+0xf2>
 800ae1a:	690f      	ldr	r7, [r1, #16]
 800ae1c:	2f00      	cmp	r7, #0
 800ae1e:	d0f6      	beq.n	800ae0e <__sflush_r+0xae>
 800ae20:	0793      	lsls	r3, r2, #30
 800ae22:	680e      	ldr	r6, [r1, #0]
 800ae24:	bf08      	it	eq
 800ae26:	694b      	ldreq	r3, [r1, #20]
 800ae28:	600f      	str	r7, [r1, #0]
 800ae2a:	bf18      	it	ne
 800ae2c:	2300      	movne	r3, #0
 800ae2e:	eba6 0807 	sub.w	r8, r6, r7
 800ae32:	608b      	str	r3, [r1, #8]
 800ae34:	f1b8 0f00 	cmp.w	r8, #0
 800ae38:	dde9      	ble.n	800ae0e <__sflush_r+0xae>
 800ae3a:	6a21      	ldr	r1, [r4, #32]
 800ae3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ae3e:	4643      	mov	r3, r8
 800ae40:	463a      	mov	r2, r7
 800ae42:	4628      	mov	r0, r5
 800ae44:	47b0      	blx	r6
 800ae46:	2800      	cmp	r0, #0
 800ae48:	dc08      	bgt.n	800ae5c <__sflush_r+0xfc>
 800ae4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae52:	81a3      	strh	r3, [r4, #12]
 800ae54:	f04f 30ff 	mov.w	r0, #4294967295
 800ae58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae5c:	4407      	add	r7, r0
 800ae5e:	eba8 0800 	sub.w	r8, r8, r0
 800ae62:	e7e7      	b.n	800ae34 <__sflush_r+0xd4>
 800ae64:	dfbffffe 	.word	0xdfbffffe

0800ae68 <_fflush_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	690b      	ldr	r3, [r1, #16]
 800ae6c:	4605      	mov	r5, r0
 800ae6e:	460c      	mov	r4, r1
 800ae70:	b913      	cbnz	r3, 800ae78 <_fflush_r+0x10>
 800ae72:	2500      	movs	r5, #0
 800ae74:	4628      	mov	r0, r5
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	b118      	cbz	r0, 800ae82 <_fflush_r+0x1a>
 800ae7a:	6a03      	ldr	r3, [r0, #32]
 800ae7c:	b90b      	cbnz	r3, 800ae82 <_fflush_r+0x1a>
 800ae7e:	f7fd fe5d 	bl	8008b3c <__sinit>
 800ae82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d0f3      	beq.n	800ae72 <_fflush_r+0xa>
 800ae8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae8c:	07d0      	lsls	r0, r2, #31
 800ae8e:	d404      	bmi.n	800ae9a <_fflush_r+0x32>
 800ae90:	0599      	lsls	r1, r3, #22
 800ae92:	d402      	bmi.n	800ae9a <_fflush_r+0x32>
 800ae94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae96:	f7fe f810 	bl	8008eba <__retarget_lock_acquire_recursive>
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	4621      	mov	r1, r4
 800ae9e:	f7ff ff5f 	bl	800ad60 <__sflush_r>
 800aea2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aea4:	07da      	lsls	r2, r3, #31
 800aea6:	4605      	mov	r5, r0
 800aea8:	d4e4      	bmi.n	800ae74 <_fflush_r+0xc>
 800aeaa:	89a3      	ldrh	r3, [r4, #12]
 800aeac:	059b      	lsls	r3, r3, #22
 800aeae:	d4e1      	bmi.n	800ae74 <_fflush_r+0xc>
 800aeb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aeb2:	f7fe f803 	bl	8008ebc <__retarget_lock_release_recursive>
 800aeb6:	e7dd      	b.n	800ae74 <_fflush_r+0xc>

0800aeb8 <__sccl>:
 800aeb8:	b570      	push	{r4, r5, r6, lr}
 800aeba:	780b      	ldrb	r3, [r1, #0]
 800aebc:	4604      	mov	r4, r0
 800aebe:	2b5e      	cmp	r3, #94	@ 0x5e
 800aec0:	bf0b      	itete	eq
 800aec2:	784b      	ldrbeq	r3, [r1, #1]
 800aec4:	1c4a      	addne	r2, r1, #1
 800aec6:	1c8a      	addeq	r2, r1, #2
 800aec8:	2100      	movne	r1, #0
 800aeca:	bf08      	it	eq
 800aecc:	2101      	moveq	r1, #1
 800aece:	3801      	subs	r0, #1
 800aed0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800aed4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800aed8:	42a8      	cmp	r0, r5
 800aeda:	d1fb      	bne.n	800aed4 <__sccl+0x1c>
 800aedc:	b90b      	cbnz	r3, 800aee2 <__sccl+0x2a>
 800aede:	1e50      	subs	r0, r2, #1
 800aee0:	bd70      	pop	{r4, r5, r6, pc}
 800aee2:	f081 0101 	eor.w	r1, r1, #1
 800aee6:	54e1      	strb	r1, [r4, r3]
 800aee8:	4610      	mov	r0, r2
 800aeea:	4602      	mov	r2, r0
 800aeec:	f812 5b01 	ldrb.w	r5, [r2], #1
 800aef0:	2d2d      	cmp	r5, #45	@ 0x2d
 800aef2:	d005      	beq.n	800af00 <__sccl+0x48>
 800aef4:	2d5d      	cmp	r5, #93	@ 0x5d
 800aef6:	d016      	beq.n	800af26 <__sccl+0x6e>
 800aef8:	2d00      	cmp	r5, #0
 800aefa:	d0f1      	beq.n	800aee0 <__sccl+0x28>
 800aefc:	462b      	mov	r3, r5
 800aefe:	e7f2      	b.n	800aee6 <__sccl+0x2e>
 800af00:	7846      	ldrb	r6, [r0, #1]
 800af02:	2e5d      	cmp	r6, #93	@ 0x5d
 800af04:	d0fa      	beq.n	800aefc <__sccl+0x44>
 800af06:	42b3      	cmp	r3, r6
 800af08:	dcf8      	bgt.n	800aefc <__sccl+0x44>
 800af0a:	3002      	adds	r0, #2
 800af0c:	461a      	mov	r2, r3
 800af0e:	3201      	adds	r2, #1
 800af10:	4296      	cmp	r6, r2
 800af12:	54a1      	strb	r1, [r4, r2]
 800af14:	dcfb      	bgt.n	800af0e <__sccl+0x56>
 800af16:	1af2      	subs	r2, r6, r3
 800af18:	3a01      	subs	r2, #1
 800af1a:	1c5d      	adds	r5, r3, #1
 800af1c:	42b3      	cmp	r3, r6
 800af1e:	bfa8      	it	ge
 800af20:	2200      	movge	r2, #0
 800af22:	18ab      	adds	r3, r5, r2
 800af24:	e7e1      	b.n	800aeea <__sccl+0x32>
 800af26:	4610      	mov	r0, r2
 800af28:	e7da      	b.n	800aee0 <__sccl+0x28>

0800af2a <__submore>:
 800af2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af2e:	460c      	mov	r4, r1
 800af30:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800af32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af36:	4299      	cmp	r1, r3
 800af38:	d11d      	bne.n	800af76 <__submore+0x4c>
 800af3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800af3e:	f7fe fe8f 	bl	8009c60 <_malloc_r>
 800af42:	b918      	cbnz	r0, 800af4c <__submore+0x22>
 800af44:	f04f 30ff 	mov.w	r0, #4294967295
 800af48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af50:	63a3      	str	r3, [r4, #56]	@ 0x38
 800af52:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800af56:	6360      	str	r0, [r4, #52]	@ 0x34
 800af58:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800af5c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800af60:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800af64:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800af68:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800af6c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800af70:	6020      	str	r0, [r4, #0]
 800af72:	2000      	movs	r0, #0
 800af74:	e7e8      	b.n	800af48 <__submore+0x1e>
 800af76:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800af78:	0077      	lsls	r7, r6, #1
 800af7a:	463a      	mov	r2, r7
 800af7c:	f000 f87e 	bl	800b07c <_realloc_r>
 800af80:	4605      	mov	r5, r0
 800af82:	2800      	cmp	r0, #0
 800af84:	d0de      	beq.n	800af44 <__submore+0x1a>
 800af86:	eb00 0806 	add.w	r8, r0, r6
 800af8a:	4601      	mov	r1, r0
 800af8c:	4632      	mov	r2, r6
 800af8e:	4640      	mov	r0, r8
 800af90:	f7fd ff95 	bl	8008ebe <memcpy>
 800af94:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800af98:	f8c4 8000 	str.w	r8, [r4]
 800af9c:	e7e9      	b.n	800af72 <__submore+0x48>

0800af9e <memmove>:
 800af9e:	4288      	cmp	r0, r1
 800afa0:	b510      	push	{r4, lr}
 800afa2:	eb01 0402 	add.w	r4, r1, r2
 800afa6:	d902      	bls.n	800afae <memmove+0x10>
 800afa8:	4284      	cmp	r4, r0
 800afaa:	4623      	mov	r3, r4
 800afac:	d807      	bhi.n	800afbe <memmove+0x20>
 800afae:	1e43      	subs	r3, r0, #1
 800afb0:	42a1      	cmp	r1, r4
 800afb2:	d008      	beq.n	800afc6 <memmove+0x28>
 800afb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afb8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afbc:	e7f8      	b.n	800afb0 <memmove+0x12>
 800afbe:	4402      	add	r2, r0
 800afc0:	4601      	mov	r1, r0
 800afc2:	428a      	cmp	r2, r1
 800afc4:	d100      	bne.n	800afc8 <memmove+0x2a>
 800afc6:	bd10      	pop	{r4, pc}
 800afc8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800afcc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800afd0:	e7f7      	b.n	800afc2 <memmove+0x24>
	...

0800afd4 <_sbrk_r>:
 800afd4:	b538      	push	{r3, r4, r5, lr}
 800afd6:	4d06      	ldr	r5, [pc, #24]	@ (800aff0 <_sbrk_r+0x1c>)
 800afd8:	2300      	movs	r3, #0
 800afda:	4604      	mov	r4, r0
 800afdc:	4608      	mov	r0, r1
 800afde:	602b      	str	r3, [r5, #0]
 800afe0:	f7f7 f8aa 	bl	8002138 <_sbrk>
 800afe4:	1c43      	adds	r3, r0, #1
 800afe6:	d102      	bne.n	800afee <_sbrk_r+0x1a>
 800afe8:	682b      	ldr	r3, [r5, #0]
 800afea:	b103      	cbz	r3, 800afee <_sbrk_r+0x1a>
 800afec:	6023      	str	r3, [r4, #0]
 800afee:	bd38      	pop	{r3, r4, r5, pc}
 800aff0:	200050dc 	.word	0x200050dc

0800aff4 <__assert_func>:
 800aff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aff6:	4614      	mov	r4, r2
 800aff8:	461a      	mov	r2, r3
 800affa:	4b09      	ldr	r3, [pc, #36]	@ (800b020 <__assert_func+0x2c>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4605      	mov	r5, r0
 800b000:	68d8      	ldr	r0, [r3, #12]
 800b002:	b954      	cbnz	r4, 800b01a <__assert_func+0x26>
 800b004:	4b07      	ldr	r3, [pc, #28]	@ (800b024 <__assert_func+0x30>)
 800b006:	461c      	mov	r4, r3
 800b008:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b00c:	9100      	str	r1, [sp, #0]
 800b00e:	462b      	mov	r3, r5
 800b010:	4905      	ldr	r1, [pc, #20]	@ (800b028 <__assert_func+0x34>)
 800b012:	f000 f95b 	bl	800b2cc <fiprintf>
 800b016:	f000 f96b 	bl	800b2f0 <abort>
 800b01a:	4b04      	ldr	r3, [pc, #16]	@ (800b02c <__assert_func+0x38>)
 800b01c:	e7f4      	b.n	800b008 <__assert_func+0x14>
 800b01e:	bf00      	nop
 800b020:	2000001c 	.word	0x2000001c
 800b024:	0800bc09 	.word	0x0800bc09
 800b028:	0800bbdb 	.word	0x0800bbdb
 800b02c:	0800bbce 	.word	0x0800bbce

0800b030 <_calloc_r>:
 800b030:	b570      	push	{r4, r5, r6, lr}
 800b032:	fba1 5402 	umull	r5, r4, r1, r2
 800b036:	b93c      	cbnz	r4, 800b048 <_calloc_r+0x18>
 800b038:	4629      	mov	r1, r5
 800b03a:	f7fe fe11 	bl	8009c60 <_malloc_r>
 800b03e:	4606      	mov	r6, r0
 800b040:	b928      	cbnz	r0, 800b04e <_calloc_r+0x1e>
 800b042:	2600      	movs	r6, #0
 800b044:	4630      	mov	r0, r6
 800b046:	bd70      	pop	{r4, r5, r6, pc}
 800b048:	220c      	movs	r2, #12
 800b04a:	6002      	str	r2, [r0, #0]
 800b04c:	e7f9      	b.n	800b042 <_calloc_r+0x12>
 800b04e:	462a      	mov	r2, r5
 800b050:	4621      	mov	r1, r4
 800b052:	f7fd fe4c 	bl	8008cee <memset>
 800b056:	e7f5      	b.n	800b044 <_calloc_r+0x14>

0800b058 <__ascii_mbtowc>:
 800b058:	b082      	sub	sp, #8
 800b05a:	b901      	cbnz	r1, 800b05e <__ascii_mbtowc+0x6>
 800b05c:	a901      	add	r1, sp, #4
 800b05e:	b142      	cbz	r2, 800b072 <__ascii_mbtowc+0x1a>
 800b060:	b14b      	cbz	r3, 800b076 <__ascii_mbtowc+0x1e>
 800b062:	7813      	ldrb	r3, [r2, #0]
 800b064:	600b      	str	r3, [r1, #0]
 800b066:	7812      	ldrb	r2, [r2, #0]
 800b068:	1e10      	subs	r0, r2, #0
 800b06a:	bf18      	it	ne
 800b06c:	2001      	movne	r0, #1
 800b06e:	b002      	add	sp, #8
 800b070:	4770      	bx	lr
 800b072:	4610      	mov	r0, r2
 800b074:	e7fb      	b.n	800b06e <__ascii_mbtowc+0x16>
 800b076:	f06f 0001 	mvn.w	r0, #1
 800b07a:	e7f8      	b.n	800b06e <__ascii_mbtowc+0x16>

0800b07c <_realloc_r>:
 800b07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b080:	4680      	mov	r8, r0
 800b082:	4615      	mov	r5, r2
 800b084:	460c      	mov	r4, r1
 800b086:	b921      	cbnz	r1, 800b092 <_realloc_r+0x16>
 800b088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b08c:	4611      	mov	r1, r2
 800b08e:	f7fe bde7 	b.w	8009c60 <_malloc_r>
 800b092:	b92a      	cbnz	r2, 800b0a0 <_realloc_r+0x24>
 800b094:	f7fe fd70 	bl	8009b78 <_free_r>
 800b098:	2400      	movs	r4, #0
 800b09a:	4620      	mov	r0, r4
 800b09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a0:	f000 f92d 	bl	800b2fe <_malloc_usable_size_r>
 800b0a4:	4285      	cmp	r5, r0
 800b0a6:	4606      	mov	r6, r0
 800b0a8:	d802      	bhi.n	800b0b0 <_realloc_r+0x34>
 800b0aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b0ae:	d8f4      	bhi.n	800b09a <_realloc_r+0x1e>
 800b0b0:	4629      	mov	r1, r5
 800b0b2:	4640      	mov	r0, r8
 800b0b4:	f7fe fdd4 	bl	8009c60 <_malloc_r>
 800b0b8:	4607      	mov	r7, r0
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	d0ec      	beq.n	800b098 <_realloc_r+0x1c>
 800b0be:	42b5      	cmp	r5, r6
 800b0c0:	462a      	mov	r2, r5
 800b0c2:	4621      	mov	r1, r4
 800b0c4:	bf28      	it	cs
 800b0c6:	4632      	movcs	r2, r6
 800b0c8:	f7fd fef9 	bl	8008ebe <memcpy>
 800b0cc:	4621      	mov	r1, r4
 800b0ce:	4640      	mov	r0, r8
 800b0d0:	f7fe fd52 	bl	8009b78 <_free_r>
 800b0d4:	463c      	mov	r4, r7
 800b0d6:	e7e0      	b.n	800b09a <_realloc_r+0x1e>

0800b0d8 <_strtol_l.constprop.0>:
 800b0d8:	2b24      	cmp	r3, #36	@ 0x24
 800b0da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0de:	4686      	mov	lr, r0
 800b0e0:	4690      	mov	r8, r2
 800b0e2:	d801      	bhi.n	800b0e8 <_strtol_l.constprop.0+0x10>
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d106      	bne.n	800b0f6 <_strtol_l.constprop.0+0x1e>
 800b0e8:	f7fd febc 	bl	8008e64 <__errno>
 800b0ec:	2316      	movs	r3, #22
 800b0ee:	6003      	str	r3, [r0, #0]
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0f6:	4834      	ldr	r0, [pc, #208]	@ (800b1c8 <_strtol_l.constprop.0+0xf0>)
 800b0f8:	460d      	mov	r5, r1
 800b0fa:	462a      	mov	r2, r5
 800b0fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b100:	5d06      	ldrb	r6, [r0, r4]
 800b102:	f016 0608 	ands.w	r6, r6, #8
 800b106:	d1f8      	bne.n	800b0fa <_strtol_l.constprop.0+0x22>
 800b108:	2c2d      	cmp	r4, #45	@ 0x2d
 800b10a:	d12d      	bne.n	800b168 <_strtol_l.constprop.0+0x90>
 800b10c:	782c      	ldrb	r4, [r5, #0]
 800b10e:	2601      	movs	r6, #1
 800b110:	1c95      	adds	r5, r2, #2
 800b112:	f033 0210 	bics.w	r2, r3, #16
 800b116:	d109      	bne.n	800b12c <_strtol_l.constprop.0+0x54>
 800b118:	2c30      	cmp	r4, #48	@ 0x30
 800b11a:	d12a      	bne.n	800b172 <_strtol_l.constprop.0+0x9a>
 800b11c:	782a      	ldrb	r2, [r5, #0]
 800b11e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b122:	2a58      	cmp	r2, #88	@ 0x58
 800b124:	d125      	bne.n	800b172 <_strtol_l.constprop.0+0x9a>
 800b126:	786c      	ldrb	r4, [r5, #1]
 800b128:	2310      	movs	r3, #16
 800b12a:	3502      	adds	r5, #2
 800b12c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b130:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b134:	2200      	movs	r2, #0
 800b136:	fbbc f9f3 	udiv	r9, ip, r3
 800b13a:	4610      	mov	r0, r2
 800b13c:	fb03 ca19 	mls	sl, r3, r9, ip
 800b140:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b144:	2f09      	cmp	r7, #9
 800b146:	d81b      	bhi.n	800b180 <_strtol_l.constprop.0+0xa8>
 800b148:	463c      	mov	r4, r7
 800b14a:	42a3      	cmp	r3, r4
 800b14c:	dd27      	ble.n	800b19e <_strtol_l.constprop.0+0xc6>
 800b14e:	1c57      	adds	r7, r2, #1
 800b150:	d007      	beq.n	800b162 <_strtol_l.constprop.0+0x8a>
 800b152:	4581      	cmp	r9, r0
 800b154:	d320      	bcc.n	800b198 <_strtol_l.constprop.0+0xc0>
 800b156:	d101      	bne.n	800b15c <_strtol_l.constprop.0+0x84>
 800b158:	45a2      	cmp	sl, r4
 800b15a:	db1d      	blt.n	800b198 <_strtol_l.constprop.0+0xc0>
 800b15c:	fb00 4003 	mla	r0, r0, r3, r4
 800b160:	2201      	movs	r2, #1
 800b162:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b166:	e7eb      	b.n	800b140 <_strtol_l.constprop.0+0x68>
 800b168:	2c2b      	cmp	r4, #43	@ 0x2b
 800b16a:	bf04      	itt	eq
 800b16c:	782c      	ldrbeq	r4, [r5, #0]
 800b16e:	1c95      	addeq	r5, r2, #2
 800b170:	e7cf      	b.n	800b112 <_strtol_l.constprop.0+0x3a>
 800b172:	2b00      	cmp	r3, #0
 800b174:	d1da      	bne.n	800b12c <_strtol_l.constprop.0+0x54>
 800b176:	2c30      	cmp	r4, #48	@ 0x30
 800b178:	bf0c      	ite	eq
 800b17a:	2308      	moveq	r3, #8
 800b17c:	230a      	movne	r3, #10
 800b17e:	e7d5      	b.n	800b12c <_strtol_l.constprop.0+0x54>
 800b180:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b184:	2f19      	cmp	r7, #25
 800b186:	d801      	bhi.n	800b18c <_strtol_l.constprop.0+0xb4>
 800b188:	3c37      	subs	r4, #55	@ 0x37
 800b18a:	e7de      	b.n	800b14a <_strtol_l.constprop.0+0x72>
 800b18c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b190:	2f19      	cmp	r7, #25
 800b192:	d804      	bhi.n	800b19e <_strtol_l.constprop.0+0xc6>
 800b194:	3c57      	subs	r4, #87	@ 0x57
 800b196:	e7d8      	b.n	800b14a <_strtol_l.constprop.0+0x72>
 800b198:	f04f 32ff 	mov.w	r2, #4294967295
 800b19c:	e7e1      	b.n	800b162 <_strtol_l.constprop.0+0x8a>
 800b19e:	1c53      	adds	r3, r2, #1
 800b1a0:	d108      	bne.n	800b1b4 <_strtol_l.constprop.0+0xdc>
 800b1a2:	2322      	movs	r3, #34	@ 0x22
 800b1a4:	f8ce 3000 	str.w	r3, [lr]
 800b1a8:	4660      	mov	r0, ip
 800b1aa:	f1b8 0f00 	cmp.w	r8, #0
 800b1ae:	d0a0      	beq.n	800b0f2 <_strtol_l.constprop.0+0x1a>
 800b1b0:	1e69      	subs	r1, r5, #1
 800b1b2:	e006      	b.n	800b1c2 <_strtol_l.constprop.0+0xea>
 800b1b4:	b106      	cbz	r6, 800b1b8 <_strtol_l.constprop.0+0xe0>
 800b1b6:	4240      	negs	r0, r0
 800b1b8:	f1b8 0f00 	cmp.w	r8, #0
 800b1bc:	d099      	beq.n	800b0f2 <_strtol_l.constprop.0+0x1a>
 800b1be:	2a00      	cmp	r2, #0
 800b1c0:	d1f6      	bne.n	800b1b0 <_strtol_l.constprop.0+0xd8>
 800b1c2:	f8c8 1000 	str.w	r1, [r8]
 800b1c6:	e794      	b.n	800b0f2 <_strtol_l.constprop.0+0x1a>
 800b1c8:	0800bc0b 	.word	0x0800bc0b

0800b1cc <_strtol_r>:
 800b1cc:	f7ff bf84 	b.w	800b0d8 <_strtol_l.constprop.0>

0800b1d0 <_strtoul_l.constprop.0>:
 800b1d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1d4:	4e34      	ldr	r6, [pc, #208]	@ (800b2a8 <_strtoul_l.constprop.0+0xd8>)
 800b1d6:	4686      	mov	lr, r0
 800b1d8:	460d      	mov	r5, r1
 800b1da:	4628      	mov	r0, r5
 800b1dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b1e0:	5d37      	ldrb	r7, [r6, r4]
 800b1e2:	f017 0708 	ands.w	r7, r7, #8
 800b1e6:	d1f8      	bne.n	800b1da <_strtoul_l.constprop.0+0xa>
 800b1e8:	2c2d      	cmp	r4, #45	@ 0x2d
 800b1ea:	d12f      	bne.n	800b24c <_strtoul_l.constprop.0+0x7c>
 800b1ec:	782c      	ldrb	r4, [r5, #0]
 800b1ee:	2701      	movs	r7, #1
 800b1f0:	1c85      	adds	r5, r0, #2
 800b1f2:	f033 0010 	bics.w	r0, r3, #16
 800b1f6:	d109      	bne.n	800b20c <_strtoul_l.constprop.0+0x3c>
 800b1f8:	2c30      	cmp	r4, #48	@ 0x30
 800b1fa:	d12c      	bne.n	800b256 <_strtoul_l.constprop.0+0x86>
 800b1fc:	7828      	ldrb	r0, [r5, #0]
 800b1fe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b202:	2858      	cmp	r0, #88	@ 0x58
 800b204:	d127      	bne.n	800b256 <_strtoul_l.constprop.0+0x86>
 800b206:	786c      	ldrb	r4, [r5, #1]
 800b208:	2310      	movs	r3, #16
 800b20a:	3502      	adds	r5, #2
 800b20c:	f04f 38ff 	mov.w	r8, #4294967295
 800b210:	2600      	movs	r6, #0
 800b212:	fbb8 f8f3 	udiv	r8, r8, r3
 800b216:	fb03 f908 	mul.w	r9, r3, r8
 800b21a:	ea6f 0909 	mvn.w	r9, r9
 800b21e:	4630      	mov	r0, r6
 800b220:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b224:	f1bc 0f09 	cmp.w	ip, #9
 800b228:	d81c      	bhi.n	800b264 <_strtoul_l.constprop.0+0x94>
 800b22a:	4664      	mov	r4, ip
 800b22c:	42a3      	cmp	r3, r4
 800b22e:	dd2a      	ble.n	800b286 <_strtoul_l.constprop.0+0xb6>
 800b230:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b234:	d007      	beq.n	800b246 <_strtoul_l.constprop.0+0x76>
 800b236:	4580      	cmp	r8, r0
 800b238:	d322      	bcc.n	800b280 <_strtoul_l.constprop.0+0xb0>
 800b23a:	d101      	bne.n	800b240 <_strtoul_l.constprop.0+0x70>
 800b23c:	45a1      	cmp	r9, r4
 800b23e:	db1f      	blt.n	800b280 <_strtoul_l.constprop.0+0xb0>
 800b240:	fb00 4003 	mla	r0, r0, r3, r4
 800b244:	2601      	movs	r6, #1
 800b246:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b24a:	e7e9      	b.n	800b220 <_strtoul_l.constprop.0+0x50>
 800b24c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b24e:	bf04      	itt	eq
 800b250:	782c      	ldrbeq	r4, [r5, #0]
 800b252:	1c85      	addeq	r5, r0, #2
 800b254:	e7cd      	b.n	800b1f2 <_strtoul_l.constprop.0+0x22>
 800b256:	2b00      	cmp	r3, #0
 800b258:	d1d8      	bne.n	800b20c <_strtoul_l.constprop.0+0x3c>
 800b25a:	2c30      	cmp	r4, #48	@ 0x30
 800b25c:	bf0c      	ite	eq
 800b25e:	2308      	moveq	r3, #8
 800b260:	230a      	movne	r3, #10
 800b262:	e7d3      	b.n	800b20c <_strtoul_l.constprop.0+0x3c>
 800b264:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b268:	f1bc 0f19 	cmp.w	ip, #25
 800b26c:	d801      	bhi.n	800b272 <_strtoul_l.constprop.0+0xa2>
 800b26e:	3c37      	subs	r4, #55	@ 0x37
 800b270:	e7dc      	b.n	800b22c <_strtoul_l.constprop.0+0x5c>
 800b272:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b276:	f1bc 0f19 	cmp.w	ip, #25
 800b27a:	d804      	bhi.n	800b286 <_strtoul_l.constprop.0+0xb6>
 800b27c:	3c57      	subs	r4, #87	@ 0x57
 800b27e:	e7d5      	b.n	800b22c <_strtoul_l.constprop.0+0x5c>
 800b280:	f04f 36ff 	mov.w	r6, #4294967295
 800b284:	e7df      	b.n	800b246 <_strtoul_l.constprop.0+0x76>
 800b286:	1c73      	adds	r3, r6, #1
 800b288:	d106      	bne.n	800b298 <_strtoul_l.constprop.0+0xc8>
 800b28a:	2322      	movs	r3, #34	@ 0x22
 800b28c:	f8ce 3000 	str.w	r3, [lr]
 800b290:	4630      	mov	r0, r6
 800b292:	b932      	cbnz	r2, 800b2a2 <_strtoul_l.constprop.0+0xd2>
 800b294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b298:	b107      	cbz	r7, 800b29c <_strtoul_l.constprop.0+0xcc>
 800b29a:	4240      	negs	r0, r0
 800b29c:	2a00      	cmp	r2, #0
 800b29e:	d0f9      	beq.n	800b294 <_strtoul_l.constprop.0+0xc4>
 800b2a0:	b106      	cbz	r6, 800b2a4 <_strtoul_l.constprop.0+0xd4>
 800b2a2:	1e69      	subs	r1, r5, #1
 800b2a4:	6011      	str	r1, [r2, #0]
 800b2a6:	e7f5      	b.n	800b294 <_strtoul_l.constprop.0+0xc4>
 800b2a8:	0800bc0b 	.word	0x0800bc0b

0800b2ac <_strtoul_r>:
 800b2ac:	f7ff bf90 	b.w	800b1d0 <_strtoul_l.constprop.0>

0800b2b0 <__ascii_wctomb>:
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	4608      	mov	r0, r1
 800b2b4:	b141      	cbz	r1, 800b2c8 <__ascii_wctomb+0x18>
 800b2b6:	2aff      	cmp	r2, #255	@ 0xff
 800b2b8:	d904      	bls.n	800b2c4 <__ascii_wctomb+0x14>
 800b2ba:	228a      	movs	r2, #138	@ 0x8a
 800b2bc:	601a      	str	r2, [r3, #0]
 800b2be:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c2:	4770      	bx	lr
 800b2c4:	700a      	strb	r2, [r1, #0]
 800b2c6:	2001      	movs	r0, #1
 800b2c8:	4770      	bx	lr
	...

0800b2cc <fiprintf>:
 800b2cc:	b40e      	push	{r1, r2, r3}
 800b2ce:	b503      	push	{r0, r1, lr}
 800b2d0:	4601      	mov	r1, r0
 800b2d2:	ab03      	add	r3, sp, #12
 800b2d4:	4805      	ldr	r0, [pc, #20]	@ (800b2ec <fiprintf+0x20>)
 800b2d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2da:	6800      	ldr	r0, [r0, #0]
 800b2dc:	9301      	str	r3, [sp, #4]
 800b2de:	f000 f83f 	bl	800b360 <_vfiprintf_r>
 800b2e2:	b002      	add	sp, #8
 800b2e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2e8:	b003      	add	sp, #12
 800b2ea:	4770      	bx	lr
 800b2ec:	2000001c 	.word	0x2000001c

0800b2f0 <abort>:
 800b2f0:	b508      	push	{r3, lr}
 800b2f2:	2006      	movs	r0, #6
 800b2f4:	f000 fa08 	bl	800b708 <raise>
 800b2f8:	2001      	movs	r0, #1
 800b2fa:	f7f6 fea5 	bl	8002048 <_exit>

0800b2fe <_malloc_usable_size_r>:
 800b2fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b302:	1f18      	subs	r0, r3, #4
 800b304:	2b00      	cmp	r3, #0
 800b306:	bfbc      	itt	lt
 800b308:	580b      	ldrlt	r3, [r1, r0]
 800b30a:	18c0      	addlt	r0, r0, r3
 800b30c:	4770      	bx	lr

0800b30e <__sfputc_r>:
 800b30e:	6893      	ldr	r3, [r2, #8]
 800b310:	3b01      	subs	r3, #1
 800b312:	2b00      	cmp	r3, #0
 800b314:	b410      	push	{r4}
 800b316:	6093      	str	r3, [r2, #8]
 800b318:	da08      	bge.n	800b32c <__sfputc_r+0x1e>
 800b31a:	6994      	ldr	r4, [r2, #24]
 800b31c:	42a3      	cmp	r3, r4
 800b31e:	db01      	blt.n	800b324 <__sfputc_r+0x16>
 800b320:	290a      	cmp	r1, #10
 800b322:	d103      	bne.n	800b32c <__sfputc_r+0x1e>
 800b324:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b328:	f000 b932 	b.w	800b590 <__swbuf_r>
 800b32c:	6813      	ldr	r3, [r2, #0]
 800b32e:	1c58      	adds	r0, r3, #1
 800b330:	6010      	str	r0, [r2, #0]
 800b332:	7019      	strb	r1, [r3, #0]
 800b334:	4608      	mov	r0, r1
 800b336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <__sfputs_r>:
 800b33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b33e:	4606      	mov	r6, r0
 800b340:	460f      	mov	r7, r1
 800b342:	4614      	mov	r4, r2
 800b344:	18d5      	adds	r5, r2, r3
 800b346:	42ac      	cmp	r4, r5
 800b348:	d101      	bne.n	800b34e <__sfputs_r+0x12>
 800b34a:	2000      	movs	r0, #0
 800b34c:	e007      	b.n	800b35e <__sfputs_r+0x22>
 800b34e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b352:	463a      	mov	r2, r7
 800b354:	4630      	mov	r0, r6
 800b356:	f7ff ffda 	bl	800b30e <__sfputc_r>
 800b35a:	1c43      	adds	r3, r0, #1
 800b35c:	d1f3      	bne.n	800b346 <__sfputs_r+0xa>
 800b35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b360 <_vfiprintf_r>:
 800b360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b364:	460d      	mov	r5, r1
 800b366:	b09d      	sub	sp, #116	@ 0x74
 800b368:	4614      	mov	r4, r2
 800b36a:	4698      	mov	r8, r3
 800b36c:	4606      	mov	r6, r0
 800b36e:	b118      	cbz	r0, 800b378 <_vfiprintf_r+0x18>
 800b370:	6a03      	ldr	r3, [r0, #32]
 800b372:	b90b      	cbnz	r3, 800b378 <_vfiprintf_r+0x18>
 800b374:	f7fd fbe2 	bl	8008b3c <__sinit>
 800b378:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b37a:	07d9      	lsls	r1, r3, #31
 800b37c:	d405      	bmi.n	800b38a <_vfiprintf_r+0x2a>
 800b37e:	89ab      	ldrh	r3, [r5, #12]
 800b380:	059a      	lsls	r2, r3, #22
 800b382:	d402      	bmi.n	800b38a <_vfiprintf_r+0x2a>
 800b384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b386:	f7fd fd98 	bl	8008eba <__retarget_lock_acquire_recursive>
 800b38a:	89ab      	ldrh	r3, [r5, #12]
 800b38c:	071b      	lsls	r3, r3, #28
 800b38e:	d501      	bpl.n	800b394 <_vfiprintf_r+0x34>
 800b390:	692b      	ldr	r3, [r5, #16]
 800b392:	b99b      	cbnz	r3, 800b3bc <_vfiprintf_r+0x5c>
 800b394:	4629      	mov	r1, r5
 800b396:	4630      	mov	r0, r6
 800b398:	f000 f938 	bl	800b60c <__swsetup_r>
 800b39c:	b170      	cbz	r0, 800b3bc <_vfiprintf_r+0x5c>
 800b39e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3a0:	07dc      	lsls	r4, r3, #31
 800b3a2:	d504      	bpl.n	800b3ae <_vfiprintf_r+0x4e>
 800b3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a8:	b01d      	add	sp, #116	@ 0x74
 800b3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ae:	89ab      	ldrh	r3, [r5, #12]
 800b3b0:	0598      	lsls	r0, r3, #22
 800b3b2:	d4f7      	bmi.n	800b3a4 <_vfiprintf_r+0x44>
 800b3b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3b6:	f7fd fd81 	bl	8008ebc <__retarget_lock_release_recursive>
 800b3ba:	e7f3      	b.n	800b3a4 <_vfiprintf_r+0x44>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3c0:	2320      	movs	r3, #32
 800b3c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3ca:	2330      	movs	r3, #48	@ 0x30
 800b3cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b57c <_vfiprintf_r+0x21c>
 800b3d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b3d4:	f04f 0901 	mov.w	r9, #1
 800b3d8:	4623      	mov	r3, r4
 800b3da:	469a      	mov	sl, r3
 800b3dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3e0:	b10a      	cbz	r2, 800b3e6 <_vfiprintf_r+0x86>
 800b3e2:	2a25      	cmp	r2, #37	@ 0x25
 800b3e4:	d1f9      	bne.n	800b3da <_vfiprintf_r+0x7a>
 800b3e6:	ebba 0b04 	subs.w	fp, sl, r4
 800b3ea:	d00b      	beq.n	800b404 <_vfiprintf_r+0xa4>
 800b3ec:	465b      	mov	r3, fp
 800b3ee:	4622      	mov	r2, r4
 800b3f0:	4629      	mov	r1, r5
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f7ff ffa2 	bl	800b33c <__sfputs_r>
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	f000 80a7 	beq.w	800b54c <_vfiprintf_r+0x1ec>
 800b3fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b400:	445a      	add	r2, fp
 800b402:	9209      	str	r2, [sp, #36]	@ 0x24
 800b404:	f89a 3000 	ldrb.w	r3, [sl]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f000 809f 	beq.w	800b54c <_vfiprintf_r+0x1ec>
 800b40e:	2300      	movs	r3, #0
 800b410:	f04f 32ff 	mov.w	r2, #4294967295
 800b414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b418:	f10a 0a01 	add.w	sl, sl, #1
 800b41c:	9304      	str	r3, [sp, #16]
 800b41e:	9307      	str	r3, [sp, #28]
 800b420:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b424:	931a      	str	r3, [sp, #104]	@ 0x68
 800b426:	4654      	mov	r4, sl
 800b428:	2205      	movs	r2, #5
 800b42a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b42e:	4853      	ldr	r0, [pc, #332]	@ (800b57c <_vfiprintf_r+0x21c>)
 800b430:	f7f4 fed6 	bl	80001e0 <memchr>
 800b434:	9a04      	ldr	r2, [sp, #16]
 800b436:	b9d8      	cbnz	r0, 800b470 <_vfiprintf_r+0x110>
 800b438:	06d1      	lsls	r1, r2, #27
 800b43a:	bf44      	itt	mi
 800b43c:	2320      	movmi	r3, #32
 800b43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b442:	0713      	lsls	r3, r2, #28
 800b444:	bf44      	itt	mi
 800b446:	232b      	movmi	r3, #43	@ 0x2b
 800b448:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b44c:	f89a 3000 	ldrb.w	r3, [sl]
 800b450:	2b2a      	cmp	r3, #42	@ 0x2a
 800b452:	d015      	beq.n	800b480 <_vfiprintf_r+0x120>
 800b454:	9a07      	ldr	r2, [sp, #28]
 800b456:	4654      	mov	r4, sl
 800b458:	2000      	movs	r0, #0
 800b45a:	f04f 0c0a 	mov.w	ip, #10
 800b45e:	4621      	mov	r1, r4
 800b460:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b464:	3b30      	subs	r3, #48	@ 0x30
 800b466:	2b09      	cmp	r3, #9
 800b468:	d94b      	bls.n	800b502 <_vfiprintf_r+0x1a2>
 800b46a:	b1b0      	cbz	r0, 800b49a <_vfiprintf_r+0x13a>
 800b46c:	9207      	str	r2, [sp, #28]
 800b46e:	e014      	b.n	800b49a <_vfiprintf_r+0x13a>
 800b470:	eba0 0308 	sub.w	r3, r0, r8
 800b474:	fa09 f303 	lsl.w	r3, r9, r3
 800b478:	4313      	orrs	r3, r2
 800b47a:	9304      	str	r3, [sp, #16]
 800b47c:	46a2      	mov	sl, r4
 800b47e:	e7d2      	b.n	800b426 <_vfiprintf_r+0xc6>
 800b480:	9b03      	ldr	r3, [sp, #12]
 800b482:	1d19      	adds	r1, r3, #4
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	9103      	str	r1, [sp, #12]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	bfbb      	ittet	lt
 800b48c:	425b      	neglt	r3, r3
 800b48e:	f042 0202 	orrlt.w	r2, r2, #2
 800b492:	9307      	strge	r3, [sp, #28]
 800b494:	9307      	strlt	r3, [sp, #28]
 800b496:	bfb8      	it	lt
 800b498:	9204      	strlt	r2, [sp, #16]
 800b49a:	7823      	ldrb	r3, [r4, #0]
 800b49c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b49e:	d10a      	bne.n	800b4b6 <_vfiprintf_r+0x156>
 800b4a0:	7863      	ldrb	r3, [r4, #1]
 800b4a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4a4:	d132      	bne.n	800b50c <_vfiprintf_r+0x1ac>
 800b4a6:	9b03      	ldr	r3, [sp, #12]
 800b4a8:	1d1a      	adds	r2, r3, #4
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	9203      	str	r2, [sp, #12]
 800b4ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4b2:	3402      	adds	r4, #2
 800b4b4:	9305      	str	r3, [sp, #20]
 800b4b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b58c <_vfiprintf_r+0x22c>
 800b4ba:	7821      	ldrb	r1, [r4, #0]
 800b4bc:	2203      	movs	r2, #3
 800b4be:	4650      	mov	r0, sl
 800b4c0:	f7f4 fe8e 	bl	80001e0 <memchr>
 800b4c4:	b138      	cbz	r0, 800b4d6 <_vfiprintf_r+0x176>
 800b4c6:	9b04      	ldr	r3, [sp, #16]
 800b4c8:	eba0 000a 	sub.w	r0, r0, sl
 800b4cc:	2240      	movs	r2, #64	@ 0x40
 800b4ce:	4082      	lsls	r2, r0
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	3401      	adds	r4, #1
 800b4d4:	9304      	str	r3, [sp, #16]
 800b4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4da:	4829      	ldr	r0, [pc, #164]	@ (800b580 <_vfiprintf_r+0x220>)
 800b4dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b4e0:	2206      	movs	r2, #6
 800b4e2:	f7f4 fe7d 	bl	80001e0 <memchr>
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	d03f      	beq.n	800b56a <_vfiprintf_r+0x20a>
 800b4ea:	4b26      	ldr	r3, [pc, #152]	@ (800b584 <_vfiprintf_r+0x224>)
 800b4ec:	bb1b      	cbnz	r3, 800b536 <_vfiprintf_r+0x1d6>
 800b4ee:	9b03      	ldr	r3, [sp, #12]
 800b4f0:	3307      	adds	r3, #7
 800b4f2:	f023 0307 	bic.w	r3, r3, #7
 800b4f6:	3308      	adds	r3, #8
 800b4f8:	9303      	str	r3, [sp, #12]
 800b4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4fc:	443b      	add	r3, r7
 800b4fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800b500:	e76a      	b.n	800b3d8 <_vfiprintf_r+0x78>
 800b502:	fb0c 3202 	mla	r2, ip, r2, r3
 800b506:	460c      	mov	r4, r1
 800b508:	2001      	movs	r0, #1
 800b50a:	e7a8      	b.n	800b45e <_vfiprintf_r+0xfe>
 800b50c:	2300      	movs	r3, #0
 800b50e:	3401      	adds	r4, #1
 800b510:	9305      	str	r3, [sp, #20]
 800b512:	4619      	mov	r1, r3
 800b514:	f04f 0c0a 	mov.w	ip, #10
 800b518:	4620      	mov	r0, r4
 800b51a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b51e:	3a30      	subs	r2, #48	@ 0x30
 800b520:	2a09      	cmp	r2, #9
 800b522:	d903      	bls.n	800b52c <_vfiprintf_r+0x1cc>
 800b524:	2b00      	cmp	r3, #0
 800b526:	d0c6      	beq.n	800b4b6 <_vfiprintf_r+0x156>
 800b528:	9105      	str	r1, [sp, #20]
 800b52a:	e7c4      	b.n	800b4b6 <_vfiprintf_r+0x156>
 800b52c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b530:	4604      	mov	r4, r0
 800b532:	2301      	movs	r3, #1
 800b534:	e7f0      	b.n	800b518 <_vfiprintf_r+0x1b8>
 800b536:	ab03      	add	r3, sp, #12
 800b538:	9300      	str	r3, [sp, #0]
 800b53a:	462a      	mov	r2, r5
 800b53c:	4b12      	ldr	r3, [pc, #72]	@ (800b588 <_vfiprintf_r+0x228>)
 800b53e:	a904      	add	r1, sp, #16
 800b540:	4630      	mov	r0, r6
 800b542:	f7fc feb7 	bl	80082b4 <_printf_float>
 800b546:	4607      	mov	r7, r0
 800b548:	1c78      	adds	r0, r7, #1
 800b54a:	d1d6      	bne.n	800b4fa <_vfiprintf_r+0x19a>
 800b54c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b54e:	07d9      	lsls	r1, r3, #31
 800b550:	d405      	bmi.n	800b55e <_vfiprintf_r+0x1fe>
 800b552:	89ab      	ldrh	r3, [r5, #12]
 800b554:	059a      	lsls	r2, r3, #22
 800b556:	d402      	bmi.n	800b55e <_vfiprintf_r+0x1fe>
 800b558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b55a:	f7fd fcaf 	bl	8008ebc <__retarget_lock_release_recursive>
 800b55e:	89ab      	ldrh	r3, [r5, #12]
 800b560:	065b      	lsls	r3, r3, #25
 800b562:	f53f af1f 	bmi.w	800b3a4 <_vfiprintf_r+0x44>
 800b566:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b568:	e71e      	b.n	800b3a8 <_vfiprintf_r+0x48>
 800b56a:	ab03      	add	r3, sp, #12
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	462a      	mov	r2, r5
 800b570:	4b05      	ldr	r3, [pc, #20]	@ (800b588 <_vfiprintf_r+0x228>)
 800b572:	a904      	add	r1, sp, #16
 800b574:	4630      	mov	r0, r6
 800b576:	f7fd f935 	bl	80087e4 <_printf_i>
 800b57a:	e7e4      	b.n	800b546 <_vfiprintf_r+0x1e6>
 800b57c:	0800bb98 	.word	0x0800bb98
 800b580:	0800bba2 	.word	0x0800bba2
 800b584:	080082b5 	.word	0x080082b5
 800b588:	0800b33d 	.word	0x0800b33d
 800b58c:	0800bb9e 	.word	0x0800bb9e

0800b590 <__swbuf_r>:
 800b590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b592:	460e      	mov	r6, r1
 800b594:	4614      	mov	r4, r2
 800b596:	4605      	mov	r5, r0
 800b598:	b118      	cbz	r0, 800b5a2 <__swbuf_r+0x12>
 800b59a:	6a03      	ldr	r3, [r0, #32]
 800b59c:	b90b      	cbnz	r3, 800b5a2 <__swbuf_r+0x12>
 800b59e:	f7fd facd 	bl	8008b3c <__sinit>
 800b5a2:	69a3      	ldr	r3, [r4, #24]
 800b5a4:	60a3      	str	r3, [r4, #8]
 800b5a6:	89a3      	ldrh	r3, [r4, #12]
 800b5a8:	071a      	lsls	r2, r3, #28
 800b5aa:	d501      	bpl.n	800b5b0 <__swbuf_r+0x20>
 800b5ac:	6923      	ldr	r3, [r4, #16]
 800b5ae:	b943      	cbnz	r3, 800b5c2 <__swbuf_r+0x32>
 800b5b0:	4621      	mov	r1, r4
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	f000 f82a 	bl	800b60c <__swsetup_r>
 800b5b8:	b118      	cbz	r0, 800b5c2 <__swbuf_r+0x32>
 800b5ba:	f04f 37ff 	mov.w	r7, #4294967295
 800b5be:	4638      	mov	r0, r7
 800b5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5c2:	6823      	ldr	r3, [r4, #0]
 800b5c4:	6922      	ldr	r2, [r4, #16]
 800b5c6:	1a98      	subs	r0, r3, r2
 800b5c8:	6963      	ldr	r3, [r4, #20]
 800b5ca:	b2f6      	uxtb	r6, r6
 800b5cc:	4283      	cmp	r3, r0
 800b5ce:	4637      	mov	r7, r6
 800b5d0:	dc05      	bgt.n	800b5de <__swbuf_r+0x4e>
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	f7ff fc47 	bl	800ae68 <_fflush_r>
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	d1ed      	bne.n	800b5ba <__swbuf_r+0x2a>
 800b5de:	68a3      	ldr	r3, [r4, #8]
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	60a3      	str	r3, [r4, #8]
 800b5e4:	6823      	ldr	r3, [r4, #0]
 800b5e6:	1c5a      	adds	r2, r3, #1
 800b5e8:	6022      	str	r2, [r4, #0]
 800b5ea:	701e      	strb	r6, [r3, #0]
 800b5ec:	6962      	ldr	r2, [r4, #20]
 800b5ee:	1c43      	adds	r3, r0, #1
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d004      	beq.n	800b5fe <__swbuf_r+0x6e>
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	07db      	lsls	r3, r3, #31
 800b5f8:	d5e1      	bpl.n	800b5be <__swbuf_r+0x2e>
 800b5fa:	2e0a      	cmp	r6, #10
 800b5fc:	d1df      	bne.n	800b5be <__swbuf_r+0x2e>
 800b5fe:	4621      	mov	r1, r4
 800b600:	4628      	mov	r0, r5
 800b602:	f7ff fc31 	bl	800ae68 <_fflush_r>
 800b606:	2800      	cmp	r0, #0
 800b608:	d0d9      	beq.n	800b5be <__swbuf_r+0x2e>
 800b60a:	e7d6      	b.n	800b5ba <__swbuf_r+0x2a>

0800b60c <__swsetup_r>:
 800b60c:	b538      	push	{r3, r4, r5, lr}
 800b60e:	4b29      	ldr	r3, [pc, #164]	@ (800b6b4 <__swsetup_r+0xa8>)
 800b610:	4605      	mov	r5, r0
 800b612:	6818      	ldr	r0, [r3, #0]
 800b614:	460c      	mov	r4, r1
 800b616:	b118      	cbz	r0, 800b620 <__swsetup_r+0x14>
 800b618:	6a03      	ldr	r3, [r0, #32]
 800b61a:	b90b      	cbnz	r3, 800b620 <__swsetup_r+0x14>
 800b61c:	f7fd fa8e 	bl	8008b3c <__sinit>
 800b620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b624:	0719      	lsls	r1, r3, #28
 800b626:	d422      	bmi.n	800b66e <__swsetup_r+0x62>
 800b628:	06da      	lsls	r2, r3, #27
 800b62a:	d407      	bmi.n	800b63c <__swsetup_r+0x30>
 800b62c:	2209      	movs	r2, #9
 800b62e:	602a      	str	r2, [r5, #0]
 800b630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b634:	81a3      	strh	r3, [r4, #12]
 800b636:	f04f 30ff 	mov.w	r0, #4294967295
 800b63a:	e033      	b.n	800b6a4 <__swsetup_r+0x98>
 800b63c:	0758      	lsls	r0, r3, #29
 800b63e:	d512      	bpl.n	800b666 <__swsetup_r+0x5a>
 800b640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b642:	b141      	cbz	r1, 800b656 <__swsetup_r+0x4a>
 800b644:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b648:	4299      	cmp	r1, r3
 800b64a:	d002      	beq.n	800b652 <__swsetup_r+0x46>
 800b64c:	4628      	mov	r0, r5
 800b64e:	f7fe fa93 	bl	8009b78 <_free_r>
 800b652:	2300      	movs	r3, #0
 800b654:	6363      	str	r3, [r4, #52]	@ 0x34
 800b656:	89a3      	ldrh	r3, [r4, #12]
 800b658:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b65c:	81a3      	strh	r3, [r4, #12]
 800b65e:	2300      	movs	r3, #0
 800b660:	6063      	str	r3, [r4, #4]
 800b662:	6923      	ldr	r3, [r4, #16]
 800b664:	6023      	str	r3, [r4, #0]
 800b666:	89a3      	ldrh	r3, [r4, #12]
 800b668:	f043 0308 	orr.w	r3, r3, #8
 800b66c:	81a3      	strh	r3, [r4, #12]
 800b66e:	6923      	ldr	r3, [r4, #16]
 800b670:	b94b      	cbnz	r3, 800b686 <__swsetup_r+0x7a>
 800b672:	89a3      	ldrh	r3, [r4, #12]
 800b674:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b67c:	d003      	beq.n	800b686 <__swsetup_r+0x7a>
 800b67e:	4621      	mov	r1, r4
 800b680:	4628      	mov	r0, r5
 800b682:	f000 f883 	bl	800b78c <__smakebuf_r>
 800b686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b68a:	f013 0201 	ands.w	r2, r3, #1
 800b68e:	d00a      	beq.n	800b6a6 <__swsetup_r+0x9a>
 800b690:	2200      	movs	r2, #0
 800b692:	60a2      	str	r2, [r4, #8]
 800b694:	6962      	ldr	r2, [r4, #20]
 800b696:	4252      	negs	r2, r2
 800b698:	61a2      	str	r2, [r4, #24]
 800b69a:	6922      	ldr	r2, [r4, #16]
 800b69c:	b942      	cbnz	r2, 800b6b0 <__swsetup_r+0xa4>
 800b69e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b6a2:	d1c5      	bne.n	800b630 <__swsetup_r+0x24>
 800b6a4:	bd38      	pop	{r3, r4, r5, pc}
 800b6a6:	0799      	lsls	r1, r3, #30
 800b6a8:	bf58      	it	pl
 800b6aa:	6962      	ldrpl	r2, [r4, #20]
 800b6ac:	60a2      	str	r2, [r4, #8]
 800b6ae:	e7f4      	b.n	800b69a <__swsetup_r+0x8e>
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	e7f7      	b.n	800b6a4 <__swsetup_r+0x98>
 800b6b4:	2000001c 	.word	0x2000001c

0800b6b8 <_raise_r>:
 800b6b8:	291f      	cmp	r1, #31
 800b6ba:	b538      	push	{r3, r4, r5, lr}
 800b6bc:	4605      	mov	r5, r0
 800b6be:	460c      	mov	r4, r1
 800b6c0:	d904      	bls.n	800b6cc <_raise_r+0x14>
 800b6c2:	2316      	movs	r3, #22
 800b6c4:	6003      	str	r3, [r0, #0]
 800b6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ca:	bd38      	pop	{r3, r4, r5, pc}
 800b6cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b6ce:	b112      	cbz	r2, 800b6d6 <_raise_r+0x1e>
 800b6d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6d4:	b94b      	cbnz	r3, 800b6ea <_raise_r+0x32>
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f000 f830 	bl	800b73c <_getpid_r>
 800b6dc:	4622      	mov	r2, r4
 800b6de:	4601      	mov	r1, r0
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6e6:	f000 b817 	b.w	800b718 <_kill_r>
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d00a      	beq.n	800b704 <_raise_r+0x4c>
 800b6ee:	1c59      	adds	r1, r3, #1
 800b6f0:	d103      	bne.n	800b6fa <_raise_r+0x42>
 800b6f2:	2316      	movs	r3, #22
 800b6f4:	6003      	str	r3, [r0, #0]
 800b6f6:	2001      	movs	r0, #1
 800b6f8:	e7e7      	b.n	800b6ca <_raise_r+0x12>
 800b6fa:	2100      	movs	r1, #0
 800b6fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b700:	4620      	mov	r0, r4
 800b702:	4798      	blx	r3
 800b704:	2000      	movs	r0, #0
 800b706:	e7e0      	b.n	800b6ca <_raise_r+0x12>

0800b708 <raise>:
 800b708:	4b02      	ldr	r3, [pc, #8]	@ (800b714 <raise+0xc>)
 800b70a:	4601      	mov	r1, r0
 800b70c:	6818      	ldr	r0, [r3, #0]
 800b70e:	f7ff bfd3 	b.w	800b6b8 <_raise_r>
 800b712:	bf00      	nop
 800b714:	2000001c 	.word	0x2000001c

0800b718 <_kill_r>:
 800b718:	b538      	push	{r3, r4, r5, lr}
 800b71a:	4d07      	ldr	r5, [pc, #28]	@ (800b738 <_kill_r+0x20>)
 800b71c:	2300      	movs	r3, #0
 800b71e:	4604      	mov	r4, r0
 800b720:	4608      	mov	r0, r1
 800b722:	4611      	mov	r1, r2
 800b724:	602b      	str	r3, [r5, #0]
 800b726:	f7f6 fc7f 	bl	8002028 <_kill>
 800b72a:	1c43      	adds	r3, r0, #1
 800b72c:	d102      	bne.n	800b734 <_kill_r+0x1c>
 800b72e:	682b      	ldr	r3, [r5, #0]
 800b730:	b103      	cbz	r3, 800b734 <_kill_r+0x1c>
 800b732:	6023      	str	r3, [r4, #0]
 800b734:	bd38      	pop	{r3, r4, r5, pc}
 800b736:	bf00      	nop
 800b738:	200050dc 	.word	0x200050dc

0800b73c <_getpid_r>:
 800b73c:	f7f6 bc6c 	b.w	8002018 <_getpid>

0800b740 <__swhatbuf_r>:
 800b740:	b570      	push	{r4, r5, r6, lr}
 800b742:	460c      	mov	r4, r1
 800b744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b748:	2900      	cmp	r1, #0
 800b74a:	b096      	sub	sp, #88	@ 0x58
 800b74c:	4615      	mov	r5, r2
 800b74e:	461e      	mov	r6, r3
 800b750:	da0d      	bge.n	800b76e <__swhatbuf_r+0x2e>
 800b752:	89a3      	ldrh	r3, [r4, #12]
 800b754:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b758:	f04f 0100 	mov.w	r1, #0
 800b75c:	bf14      	ite	ne
 800b75e:	2340      	movne	r3, #64	@ 0x40
 800b760:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b764:	2000      	movs	r0, #0
 800b766:	6031      	str	r1, [r6, #0]
 800b768:	602b      	str	r3, [r5, #0]
 800b76a:	b016      	add	sp, #88	@ 0x58
 800b76c:	bd70      	pop	{r4, r5, r6, pc}
 800b76e:	466a      	mov	r2, sp
 800b770:	f000 f848 	bl	800b804 <_fstat_r>
 800b774:	2800      	cmp	r0, #0
 800b776:	dbec      	blt.n	800b752 <__swhatbuf_r+0x12>
 800b778:	9901      	ldr	r1, [sp, #4]
 800b77a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b77e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b782:	4259      	negs	r1, r3
 800b784:	4159      	adcs	r1, r3
 800b786:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b78a:	e7eb      	b.n	800b764 <__swhatbuf_r+0x24>

0800b78c <__smakebuf_r>:
 800b78c:	898b      	ldrh	r3, [r1, #12]
 800b78e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b790:	079d      	lsls	r5, r3, #30
 800b792:	4606      	mov	r6, r0
 800b794:	460c      	mov	r4, r1
 800b796:	d507      	bpl.n	800b7a8 <__smakebuf_r+0x1c>
 800b798:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b79c:	6023      	str	r3, [r4, #0]
 800b79e:	6123      	str	r3, [r4, #16]
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	6163      	str	r3, [r4, #20]
 800b7a4:	b003      	add	sp, #12
 800b7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7a8:	ab01      	add	r3, sp, #4
 800b7aa:	466a      	mov	r2, sp
 800b7ac:	f7ff ffc8 	bl	800b740 <__swhatbuf_r>
 800b7b0:	9f00      	ldr	r7, [sp, #0]
 800b7b2:	4605      	mov	r5, r0
 800b7b4:	4639      	mov	r1, r7
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	f7fe fa52 	bl	8009c60 <_malloc_r>
 800b7bc:	b948      	cbnz	r0, 800b7d2 <__smakebuf_r+0x46>
 800b7be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7c2:	059a      	lsls	r2, r3, #22
 800b7c4:	d4ee      	bmi.n	800b7a4 <__smakebuf_r+0x18>
 800b7c6:	f023 0303 	bic.w	r3, r3, #3
 800b7ca:	f043 0302 	orr.w	r3, r3, #2
 800b7ce:	81a3      	strh	r3, [r4, #12]
 800b7d0:	e7e2      	b.n	800b798 <__smakebuf_r+0xc>
 800b7d2:	89a3      	ldrh	r3, [r4, #12]
 800b7d4:	6020      	str	r0, [r4, #0]
 800b7d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7da:	81a3      	strh	r3, [r4, #12]
 800b7dc:	9b01      	ldr	r3, [sp, #4]
 800b7de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b7e2:	b15b      	cbz	r3, 800b7fc <__smakebuf_r+0x70>
 800b7e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f000 f81d 	bl	800b828 <_isatty_r>
 800b7ee:	b128      	cbz	r0, 800b7fc <__smakebuf_r+0x70>
 800b7f0:	89a3      	ldrh	r3, [r4, #12]
 800b7f2:	f023 0303 	bic.w	r3, r3, #3
 800b7f6:	f043 0301 	orr.w	r3, r3, #1
 800b7fa:	81a3      	strh	r3, [r4, #12]
 800b7fc:	89a3      	ldrh	r3, [r4, #12]
 800b7fe:	431d      	orrs	r5, r3
 800b800:	81a5      	strh	r5, [r4, #12]
 800b802:	e7cf      	b.n	800b7a4 <__smakebuf_r+0x18>

0800b804 <_fstat_r>:
 800b804:	b538      	push	{r3, r4, r5, lr}
 800b806:	4d07      	ldr	r5, [pc, #28]	@ (800b824 <_fstat_r+0x20>)
 800b808:	2300      	movs	r3, #0
 800b80a:	4604      	mov	r4, r0
 800b80c:	4608      	mov	r0, r1
 800b80e:	4611      	mov	r1, r2
 800b810:	602b      	str	r3, [r5, #0]
 800b812:	f7f6 fc69 	bl	80020e8 <_fstat>
 800b816:	1c43      	adds	r3, r0, #1
 800b818:	d102      	bne.n	800b820 <_fstat_r+0x1c>
 800b81a:	682b      	ldr	r3, [r5, #0]
 800b81c:	b103      	cbz	r3, 800b820 <_fstat_r+0x1c>
 800b81e:	6023      	str	r3, [r4, #0]
 800b820:	bd38      	pop	{r3, r4, r5, pc}
 800b822:	bf00      	nop
 800b824:	200050dc 	.word	0x200050dc

0800b828 <_isatty_r>:
 800b828:	b538      	push	{r3, r4, r5, lr}
 800b82a:	4d06      	ldr	r5, [pc, #24]	@ (800b844 <_isatty_r+0x1c>)
 800b82c:	2300      	movs	r3, #0
 800b82e:	4604      	mov	r4, r0
 800b830:	4608      	mov	r0, r1
 800b832:	602b      	str	r3, [r5, #0]
 800b834:	f7f6 fc68 	bl	8002108 <_isatty>
 800b838:	1c43      	adds	r3, r0, #1
 800b83a:	d102      	bne.n	800b842 <_isatty_r+0x1a>
 800b83c:	682b      	ldr	r3, [r5, #0]
 800b83e:	b103      	cbz	r3, 800b842 <_isatty_r+0x1a>
 800b840:	6023      	str	r3, [r4, #0]
 800b842:	bd38      	pop	{r3, r4, r5, pc}
 800b844:	200050dc 	.word	0x200050dc

0800b848 <_init>:
 800b848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84a:	bf00      	nop
 800b84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b84e:	bc08      	pop	{r3}
 800b850:	469e      	mov	lr, r3
 800b852:	4770      	bx	lr

0800b854 <_fini>:
 800b854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b856:	bf00      	nop
 800b858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b85a:	bc08      	pop	{r3}
 800b85c:	469e      	mov	lr, r3
 800b85e:	4770      	bx	lr
